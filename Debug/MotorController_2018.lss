
MotorController_2018.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000131c  000013b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000131c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000200  00800106  00800106  000013b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025af  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013d8  00000000  00000000  00003bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001255  00000000  00000000  00004faf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000584  00000000  00000000  00006204  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000dab  00000000  00000000  00006788  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011b1  00000000  00000000  00007533  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  000086e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	35 c2       	rjmp	.+1130   	; 0x49c <__vector_12>
      32:	00 00       	nop
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	6a c5       	rjmp	.+2772   	; 0xb1a <__vector_17>
      46:	00 00       	nop
      48:	ea c2       	rjmp	.+1492   	; 0x61e <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	3d c0       	rjmp	.+122    	; 0xd0 <__bad_interrupt>
      56:	00 00       	nop
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	39 c0       	rjmp	.+114    	; 0xd0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	2a c2       	rjmp	.+1108   	; 0x4ba <__vector_25>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c0       	rjmp	.+78     	; 0xd0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c0       	rjmp	.+70     	; 0xd0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ec e1       	ldi	r30, 0x1C	; 28
      a8:	f3 e1       	ldi	r31, 0x13	; 19
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a6 30       	cpi	r26, 0x06	; 6
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	23 e0       	ldi	r18, 0x03	; 3
      bc:	a6 e0       	ldi	r26, 0x06	; 6
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a6 30       	cpi	r26, 0x06	; 6
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	76 d1       	rcall	.+748    	; 0x3b8 <main>
      cc:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <controller>:
#define L (76.0e-6)*2.0

const float Kp=3.0*R/(2.0*V_BATT);
const float Ti= 2.0*L*V_BATT/(3.0*R*R);

void controller(float f32_current_cmd, float f32_prev_current){
      d2:	8f 92       	push	r8
      d4:	9f 92       	push	r9
      d6:	af 92       	push	r10
      d8:	bf 92       	push	r11
      da:	cf 92       	push	r12
      dc:	df 92       	push	r13
      de:	ef 92       	push	r14
      e0:	ff 92       	push	r15
      e2:	cf 93       	push	r28
	static float f32_CurrentDelta ;
	static float f32_Integrator = 0.0 ;
	static float f32_DutyCycleCmd=0.0 ;
	
	f32_CurrentDelta=f32_current_cmd-f32_prev_current	;
      e4:	df 93       	push	r29
      e6:	71 d5       	rcall	.+2786   	; 0xbca <__subsf3>
      e8:	4b 01       	movw	r8, r22

	f32_Integrator+=f32_CurrentDelta*200e-6 ;
      ea:	5c 01       	movw	r10, r24
      ec:	27 e1       	ldi	r18, 0x17	; 23
      ee:	37 eb       	ldi	r19, 0xB7	; 183
      f0:	41 e5       	ldi	r20, 0x51	; 81
      f2:	59 e3       	ldi	r21, 0x39	; 57
      f4:	22 d7       	rcall	.+3652   	; 0xf3a <__mulsf3>
      f6:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <f32_Integrator.2072>
      fa:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <f32_Integrator.2072+0x1>
      fe:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <f32_Integrator.2072+0x2>
     102:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <f32_Integrator.2072+0x3>
     106:	62 d5       	rcall	.+2756   	; 0xbcc <__addsf3>
     108:	6b 01       	movw	r12, r22
     10a:	7c 01       	movw	r14, r24
     10c:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <f32_Integrator.2072>
     110:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <f32_Integrator.2072+0x1>
     114:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <f32_Integrator.2072+0x2>
     118:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <f32_Integrator.2072+0x3>
	f32_DutyCycleCmd=Kp*f32_CurrentDelta+f32_Integrator/Ti ;
	f32_DutyCycleCmd=(f32_DutyCycleCmd+50) ;
     11c:	25 e6       	ldi	r18, 0x65	; 101
     11e:	36 e6       	ldi	r19, 0x66	; 102
     120:	46 ee       	ldi	r20, 0xE6	; 230
     122:	5c e3       	ldi	r21, 0x3C	; 60
     124:	c5 01       	movw	r24, r10
     126:	b4 01       	movw	r22, r8
     128:	08 d7       	rcall	.+3600   	; 0xf3a <__mulsf3>
     12a:	4b 01       	movw	r8, r22
     12c:	5c 01       	movw	r10, r24
     12e:	23 e1       	ldi	r18, 0x13	; 19
     130:	35 ec       	ldi	r19, 0xC5	; 197
     132:	44 ec       	ldi	r20, 0xC4	; 196
     134:	5b e3       	ldi	r21, 0x3B	; 59
     136:	c7 01       	movw	r24, r14
     138:	b6 01       	movw	r22, r12
     13a:	b0 d5       	rcall	.+2912   	; 0xc9c <__divsf3>
     13c:	9b 01       	movw	r18, r22
     13e:	ac 01       	movw	r20, r24
     140:	c5 01       	movw	r24, r10
     142:	b4 01       	movw	r22, r8
     144:	43 d5       	rcall	.+2694   	; 0xbcc <__addsf3>
     146:	20 e0       	ldi	r18, 0x00	; 0
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	48 e4       	ldi	r20, 0x48	; 72
     14c:	52 e4       	ldi	r21, 0x42	; 66
     14e:	3e d5       	rcall	.+2684   	; 0xbcc <__addsf3>
     150:	6b 01       	movw	r12, r22
     152:	7c 01       	movw	r14, r24
     154:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <__data_end>
     158:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <__data_end+0x1>
     15c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end+0x2>
	
	//bounding of duty cycle for well function of bootstrap capacitors

	if (f32_DutyCycleCmd > 95)
     160:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x3>
     164:	20 e0       	ldi	r18, 0x00	; 0
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	4e eb       	ldi	r20, 0xBE	; 190
     16a:	52 e4       	ldi	r21, 0x42	; 66
     16c:	e2 d6       	rcall	.+3524   	; 0xf32 <__gesf2>
     16e:	18 16       	cp	r1, r24
	{
		f32_DutyCycleCmd = 95;
     170:	6c f4       	brge	.+26     	; 0x18c <controller+0xba>
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	ae eb       	ldi	r26, 0xBE	; 190
     178:	b2 e4       	ldi	r27, 0x42	; 66
     17a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
     17e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
     182:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <__data_end+0x2>
     186:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <__data_end+0x3>
	}
	
	if (f32_DutyCycleCmd < 5)
     18a:	15 c0       	rjmp	.+42     	; 0x1b6 <controller+0xe4>
     18c:	20 e0       	ldi	r18, 0x00	; 0
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	40 ea       	ldi	r20, 0xA0	; 160
     192:	50 e4       	ldi	r21, 0x40	; 64
     194:	c7 01       	movw	r24, r14
     196:	b6 01       	movw	r22, r12
     198:	7d d5       	rcall	.+2810   	; 0xc94 <__cmpsf2>
     19a:	88 23       	and	r24, r24
	{
		f32_DutyCycleCmd = 5;
     19c:	64 f4       	brge	.+24     	; 0x1b6 <controller+0xe4>
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	a0 ea       	ldi	r26, 0xA0	; 160
     1a4:	b0 e4       	ldi	r27, 0x40	; 64
     1a6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
     1aa:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
     1ae:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <__data_end+0x2>
     1b2:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <__data_end+0x3>
	}
	
	OCR3A = (int)((f32_DutyCycleCmd/100)*ICR3) ; //PWM_PE3 (non inverted)
     1b6:	c0 91 96 00 	lds	r28, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
     1ba:	d0 91 97 00 	lds	r29, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
     1be:	20 e0       	ldi	r18, 0x00	; 0
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	48 ec       	ldi	r20, 0xC8	; 200
     1c4:	52 e4       	ldi	r21, 0x42	; 66
     1c6:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <__data_end>
     1ca:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <__data_end+0x1>
     1ce:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end+0x2>
     1d2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x3>
     1d6:	62 d5       	rcall	.+2756   	; 0xc9c <__divsf3>
     1d8:	6b 01       	movw	r12, r22
     1da:	7c 01       	movw	r14, r24
     1dc:	be 01       	movw	r22, r28
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	f5 d5       	rcall	.+3050   	; 0xdce <__floatunsisf>
     1e4:	9b 01       	movw	r18, r22
     1e6:	ac 01       	movw	r20, r24
     1e8:	c7 01       	movw	r24, r14
     1ea:	b6 01       	movw	r22, r12
     1ec:	a6 d6       	rcall	.+3404   	; 0xf3a <__mulsf3>
     1ee:	be d5       	rcall	.+2940   	; 0xd6c <__fixsfsi>
     1f0:	e8 e9       	ldi	r30, 0x98	; 152
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	71 83       	std	Z+1, r23	; 0x01
	OCR3B = OCR3A ; //PWM_PE4 (inverted)
     1f6:	60 83       	st	Z, r22
     1f8:	80 81       	ld	r24, Z
     1fa:	91 81       	ldd	r25, Z+1	; 0x01
     1fc:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     200:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
}
     204:	df 91       	pop	r29
     206:	cf 91       	pop	r28
     208:	ff 90       	pop	r15
     20a:	ef 90       	pop	r14
     20c:	df 90       	pop	r13
     20e:	cf 90       	pop	r12
     210:	bf 90       	pop	r11
     212:	af 90       	pop	r10
     214:	9f 90       	pop	r9
     216:	8f 90       	pop	r8
     218:	08 95       	ret

0000021a <timer_init_ts>:




void timer_init_ts(){
	TCCR1B |= (1<<CS10)|(1<<CS11);
     21a:	e1 e8       	ldi	r30, 0x81	; 129
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	83 60       	ori	r24, 0x03	; 3
     222:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12); //CTC
     224:	80 81       	ld	r24, Z
     226:	88 60       	ori	r24, 0x08	; 8
     228:	80 83       	st	Z, r24
	TCNT1 = 0;
     22a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     22e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIMSK1 |= (1<<OCIE1A);
     232:	ef e6       	ldi	r30, 0x6F	; 111
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	80 81       	ld	r24, Z
     238:	82 60       	ori	r24, 0x02	; 2
     23a:	80 83       	st	Z, r24
	OCR1A = 12500 - 1;
     23c:	83 ed       	ldi	r24, 0xD3	; 211
     23e:	90 e3       	ldi	r25, 0x30	; 48
     240:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     244:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     248:	08 95       	ret

0000024a <toggle_DCDC>:
};



void toggle_DCDC(uint8_t OnOff){
	if (OnOff){
     24a:	88 23       	and	r24, r24
     24c:	11 f0       	breq	.+4      	; 0x252 <toggle_DCDC+0x8>
		PORTB &= ~(1 << PB3);
     24e:	2b 98       	cbi	0x05, 3	; 5
     250:	08 95       	ret
	}else{
		PORTB |= (1 << PB3);
     252:	2b 9a       	sbi	0x05, 3	; 5
     254:	08 95       	ret

00000256 <handle_can>:
	}
}

void handle_can(ModuleValues_t *vals, CanMessage_t *rx){
     256:	0f 93       	push	r16
     258:	1f 93       	push	r17
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	8c 01       	movw	r16, r24
     260:	eb 01       	movw	r28, r22
	if (can_read_message_if_new(rx)){
     262:	cb 01       	movw	r24, r22
     264:	22 d3       	rcall	.+1604   	; 0x8aa <can_read_message_if_new>
     266:	88 23       	and	r24, r24
     268:	49 f1       	breq	.+82     	; 0x2bc <handle_can+0x66>
		switch (rx->id){
     26a:	88 81       	ld	r24, Y
     26c:	99 81       	ldd	r25, Y+1	; 0x01
     26e:	80 32       	cpi	r24, 0x20	; 32
     270:	22 e0       	ldi	r18, 0x02	; 2
     272:	92 07       	cpc	r25, r18
     274:	f1 f0       	breq	.+60     	; 0x2b2 <handle_can+0x5c>
     276:	20 f4       	brcc	.+8      	; 0x280 <handle_can+0x2a>
     278:	80 31       	cpi	r24, 0x10	; 16
     27a:	91 40       	sbci	r25, 0x01	; 1
     27c:	49 f0       	breq	.+18     	; 0x290 <handle_can+0x3a>
     27e:	1e c0       	rjmp	.+60     	; 0x2bc <handle_can+0x66>
     280:	80 33       	cpi	r24, 0x30	; 48
     282:	22 e0       	ldi	r18, 0x02	; 2
     284:	92 07       	cpc	r25, r18
     286:	61 f0       	breq	.+24     	; 0x2a0 <handle_can+0x4a>
     288:	88 34       	cpi	r24, 0x48	; 72
     28a:	94 40       	sbci	r25, 0x04	; 4
     28c:	29 f0       	breq	.+10     	; 0x298 <handle_can+0x42>
     28e:	16 c0       	rjmp	.+44     	; 0x2bc <handle_can+0x66>
			case BRAKE_CAN_ID:
				vals->braking = rx->data.u8[0];
     290:	8b 81       	ldd	r24, Y+3	; 0x03
     292:	f8 01       	movw	r30, r16
     294:	85 83       	std	Z+5, r24	; 0x05
				break;
     296:	12 c0       	rjmp	.+36     	; 0x2bc <handle_can+0x66>
			case BMS_STATUS_CAN_ID:
				vals->BMS_status = rx->data.u8[0];
     298:	8b 81       	ldd	r24, Y+3	; 0x03
     29a:	f8 01       	movw	r30, r16
     29c:	80 83       	st	Z, r24
				break;
     29e:	0e c0       	rjmp	.+28     	; 0x2bc <handle_can+0x66>
			case STEERING_WHEEL_CAN_ID:
				vals->throttle_cmd = rx->data.u8[3];
     2a0:	8e 81       	ldd	r24, Y+6	; 0x06
     2a2:	f8 01       	movw	r30, r16
     2a4:	81 83       	std	Z+1, r24	; 0x01
				vals->restart_overload = rx->data.u8[1] & HORN;
     2a6:	8c 81       	ldd	r24, Y+4	; 0x04
     2a8:	82 70       	andi	r24, 0x02	; 2
     2aa:	82 83       	std	Z+2, r24	; 0x02
				vals->deadman = rx->data.u8[2];
     2ac:	8d 81       	ldd	r24, Y+5	; 0x05
     2ae:	83 87       	std	Z+11, r24	; 0x0b
				break;
     2b0:	05 c0       	rjmp	.+10     	; 0x2bc <handle_can+0x66>
			case ENCODER_CAN_ID:
				vals->rpm = rx->data.u16[ENCODER_CHANNEL];
     2b2:	8b 81       	ldd	r24, Y+3	; 0x03
     2b4:	9c 81       	ldd	r25, Y+4	; 0x04
     2b6:	f8 01       	movw	r30, r16
     2b8:	94 83       	std	Z+4, r25	; 0x04
     2ba:	83 83       	std	Z+3, r24	; 0x03
				break;
		}
	}
}
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	1f 91       	pop	r17
     2c2:	0f 91       	pop	r16
     2c4:	08 95       	ret

000002c6 <handle_motor_status_can_msg>:

void handle_motor_status_can_msg(uint8_t *send, ModuleValues_t *vals){
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
	if(*send){
     2ca:	fc 01       	movw	r30, r24
     2cc:	20 81       	ld	r18, Z
     2ce:	22 23       	and	r18, r18
     2d0:	19 f1       	breq	.+70     	; 0x318 <handle_motor_status_can_msg+0x52>
     2d2:	fb 01       	movw	r30, r22
     2d4:	ec 01       	movw	r28, r24
		txFrame.data.u8[0] = vals->motor_status;
     2d6:	a1 ef       	ldi	r26, 0xF1	; 241
     2d8:	b2 e0       	ldi	r27, 0x02	; 2
     2da:	82 85       	ldd	r24, Z+10	; 0x0a
     2dc:	13 96       	adiw	r26, 0x03	; 3
     2de:	8c 93       	st	X, r24
     2e0:	13 97       	sbiw	r26, 0x03	; 3
		txFrame.data.u8[1] = vals->throttle_cmd;
     2e2:	81 81       	ldd	r24, Z+1	; 0x01
     2e4:	14 96       	adiw	r26, 0x04	; 4
     2e6:	8c 93       	st	X, r24
     2e8:	14 97       	sbiw	r26, 0x04	; 4
		txFrame.data.u16[1] = vals->mamp;
     2ea:	86 81       	ldd	r24, Z+6	; 0x06
     2ec:	97 81       	ldd	r25, Z+7	; 0x07
     2ee:	16 96       	adiw	r26, 0x06	; 6
     2f0:	9c 93       	st	X, r25
     2f2:	8e 93       	st	-X, r24
     2f4:	15 97       	sbiw	r26, 0x05	; 5
		txFrame.data.u16[2] = OCR3B;
     2f6:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
     2fa:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     2fe:	18 96       	adiw	r26, 0x08	; 8
     300:	9c 93       	st	X, r25
     302:	8e 93       	st	-X, r24
     304:	17 97       	sbiw	r26, 0x07	; 7
		txFrame.data.u16[3] = vals->rpm;
     306:	83 81       	ldd	r24, Z+3	; 0x03
     308:	94 81       	ldd	r25, Z+4	; 0x04
     30a:	1a 96       	adiw	r26, 0x0a	; 10
     30c:	9c 93       	st	X, r25
     30e:	8e 93       	st	-X, r24
     310:	19 97       	sbiw	r26, 0x09	; 9
		
		can_send_message(&txFrame);
     312:	cd 01       	movw	r24, r26
     314:	0d d3       	rcall	.+1562   	; 0x930 <can_send_message>
		*send = 0;
     316:	18 82       	st	Y, r1
	}
}
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <handle_current_sensor>:
void handle_current_sensor(float *f32_prev_current, uint16_t u16_ADC_reg){ //----------------------------------------------------------------------------TODO test if ok with uint32, otherwise use float
     31e:	0f 93       	push	r16
     320:	1f 93       	push	r17
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	00 d0       	rcall	.+0      	; 0x328 <handle_current_sensor+0xa>
     328:	00 d0       	rcall	.+0      	; 0x32a <handle_current_sensor+0xc>
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
     32e:	8c 01       	movw	r16, r24
	
	volatile float f_new_current = ((((float)u16_ADC_reg*3.3/1024) - TRANSDUCER_OFFSET)/TRANSDUCER_SENSIBILITY)/3 ;// /3 because current passes 3x in transducer for more precision.
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	4c d5       	rcall	.+2712   	; 0xdce <__floatunsisf>
     336:	23 e3       	ldi	r18, 0x33	; 51
     338:	33 e3       	ldi	r19, 0x33	; 51
     33a:	43 e5       	ldi	r20, 0x53	; 83
     33c:	50 e4       	ldi	r21, 0x40	; 64
     33e:	fd d5       	rcall	.+3066   	; 0xf3a <__mulsf3>
     340:	20 e0       	ldi	r18, 0x00	; 0
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	40 e8       	ldi	r20, 0x80	; 128
     346:	5a e3       	ldi	r21, 0x3A	; 58
     348:	f8 d5       	rcall	.+3056   	; 0xf3a <__mulsf3>
     34a:	27 ed       	ldi	r18, 0xD7	; 215
     34c:	33 ea       	ldi	r19, 0xA3	; 163
     34e:	40 e1       	ldi	r20, 0x10	; 16
     350:	50 e4       	ldi	r21, 0x40	; 64
     352:	3b d4       	rcall	.+2166   	; 0xbca <__subsf3>
     354:	23 ec       	ldi	r18, 0xC3	; 195
     356:	34 e6       	ldi	r19, 0x64	; 100
     358:	4a e2       	ldi	r20, 0x2A	; 42
     35a:	5d e3       	ldi	r21, 0x3D	; 61
     35c:	9f d4       	rcall	.+2366   	; 0xc9c <__divsf3>
     35e:	20 e0       	ldi	r18, 0x00	; 0
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	40 e4       	ldi	r20, 0x40	; 64
     364:	50 e4       	ldi	r21, 0x40	; 64
     366:	9a d4       	rcall	.+2356   	; 0xc9c <__divsf3>
     368:	69 83       	std	Y+1, r22	; 0x01
     36a:	7a 83       	std	Y+2, r23	; 0x02
     36c:	8b 83       	std	Y+3, r24	; 0x03
     36e:	9c 83       	std	Y+4, r25	; 0x04
	f_new_current = (f_new_current+0.11)*1.1 ;// correction of offset and ramp error (conversion + hardware) measured with ampmeter of the power supply : bad
     370:	69 81       	ldd	r22, Y+1	; 0x01
     372:	7a 81       	ldd	r23, Y+2	; 0x02
     374:	8b 81       	ldd	r24, Y+3	; 0x03
     376:	9c 81       	ldd	r25, Y+4	; 0x04
     378:	2e ea       	ldi	r18, 0xAE	; 174
     37a:	37 e4       	ldi	r19, 0x47	; 71
     37c:	41 ee       	ldi	r20, 0xE1	; 225
     37e:	5d e3       	ldi	r21, 0x3D	; 61
     380:	25 d4       	rcall	.+2122   	; 0xbcc <__addsf3>
     382:	2d ec       	ldi	r18, 0xCD	; 205
     384:	3c ec       	ldi	r19, 0xCC	; 204
     386:	4c e8       	ldi	r20, 0x8C	; 140
     388:	5f e3       	ldi	r21, 0x3F	; 63
     38a:	d7 d5       	rcall	.+2990   	; 0xf3a <__mulsf3>
     38c:	69 83       	std	Y+1, r22	; 0x01
     38e:	7a 83       	std	Y+2, r23	; 0x02
     390:	8b 83       	std	Y+3, r24	; 0x03
     392:	9c 83       	std	Y+4, r25	; 0x04
	//*f32_prev_current = (*f32_prev_current)*(1-LOWPASS_CONSTANT) + LOWPASS_CONSTANT*f_new_current ;// low pass filter ---------------------TODO test
	*f32_prev_current = f_new_current;
     394:	89 81       	ldd	r24, Y+1	; 0x01
     396:	9a 81       	ldd	r25, Y+2	; 0x02
     398:	ab 81       	ldd	r26, Y+3	; 0x03
     39a:	bc 81       	ldd	r27, Y+4	; 0x04
     39c:	f8 01       	movw	r30, r16
     39e:	80 83       	st	Z, r24
     3a0:	91 83       	std	Z+1, r25	; 0x01
     3a2:	a2 83       	std	Z+2, r26	; 0x02
     3a4:	b3 83       	std	Z+3, r27	; 0x03
}
     3a6:	0f 90       	pop	r0
     3a8:	0f 90       	pop	r0
     3aa:	0f 90       	pop	r0
     3ac:	0f 90       	pop	r0
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	1f 91       	pop	r17
     3b4:	0f 91       	pop	r16
     3b6:	08 95       	ret

000003b8 <main>:

int main(void)	
{
	cli();
     3b8:	f8 94       	cli
	pid_init(&Current, 0.1, 0.05, 0, 0);
     3ba:	81 2c       	mov	r8, r1
     3bc:	91 2c       	mov	r9, r1
     3be:	54 01       	movw	r10, r8
     3c0:	75 01       	movw	r14, r10
     3c2:	64 01       	movw	r12, r8
     3c4:	0d ec       	ldi	r16, 0xCD	; 205
     3c6:	1c ec       	ldi	r17, 0xCC	; 204
     3c8:	2c e4       	ldi	r18, 0x4C	; 76
     3ca:	3d e3       	ldi	r19, 0x3D	; 61
     3cc:	4d ec       	ldi	r20, 0xCD	; 205
     3ce:	5c ec       	ldi	r21, 0xCC	; 204
     3d0:	6c ec       	ldi	r22, 0xCC	; 204
     3d2:	7d e3       	ldi	r23, 0x3D	; 61
     3d4:	89 ed       	ldi	r24, 0xD9	; 217
	usbdbg_init();
     3d6:	92 e0       	ldi	r25, 0x02	; 2
	pwm_init();
     3d8:	d2 d0       	rcall	.+420    	; 0x57e <pid_init>
	pwm_set_top_t3(0x319);
     3da:	e5 d3       	rcall	.+1994   	; 0xba6 <usbdbg_init>
     3dc:	27 d3       	rcall	.+1614   	; 0xa2c <pwm_init>
     3de:	89 e1       	ldi	r24, 0x19	; 25
	can_init(0,0);
     3e0:	93 e0       	ldi	r25, 0x03	; 3
     3e2:	87 d3       	rcall	.+1806   	; 0xaf2 <pwm_set_top_t3>
     3e4:	60 e0       	ldi	r22, 0x00	; 0
	timer_init_ts();
     3e6:	70 e0       	ldi	r23, 0x00	; 0
     3e8:	80 e0       	ldi	r24, 0x00	; 0
	//ADC
	adc_Free_running_init();
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	09 d2       	rcall	.+1042   	; 0x800 <can_init>
	ADMUX &= 0b11100000;
     3ee:	15 df       	rcall	.-470    	; 0x21a <timer_init_ts>
     3f0:	f2 d0       	rcall	.+484    	; 0x5d6 <adc_Free_running_init>
     3f2:	ec e7       	ldi	r30, 0x7C	; 124
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
	ADMUX |= CH_ADC2;
     3f6:	80 81       	ld	r24, Z
     3f8:	80 7e       	andi	r24, 0xE0	; 224
     3fa:	80 83       	st	Z, r24
	
	rgbled_init();
     3fc:	80 81       	ld	r24, Z
     3fe:	82 60       	ori	r24, 0x02	; 2
	txFrame.id = MOTOR_CAN_ID;
     400:	80 83       	st	Z, r24
     402:	80 d3       	rcall	.+1792   	; 0xb04 <rgbled_init>
     404:	e1 ef       	ldi	r30, 0xF1	; 241
     406:	f2 e0       	ldi	r31, 0x02	; 2
	txFrame.length = 8;
     408:	80 e5       	ldi	r24, 0x50	; 80
     40a:	94 e0       	ldi	r25, 0x04	; 4
	sei();
     40c:	91 83       	std	Z+1, r25	; 0x01
	
	// Output pin to turn off DCDC
	DDRB |= (1 << PB3);
	toggle_DCDC(OFF);
     40e:	80 83       	st	Z, r24
     410:	88 e0       	ldi	r24, 0x08	; 8
	
	rgbled_turn_on(LED_BLUE);
     412:	82 83       	std	Z+2, r24	; 0x02
     414:	78 94       	sei
	
    while (1){
		
		handle_motor_status_can_msg(&send_can, &ComValues);
     416:	23 9a       	sbi	0x04, 3	; 4
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	17 df       	rcall	.-466    	; 0x24a <toggle_DCDC>
     41c:	80 e8       	ldi	r24, 0x80	; 128
     41e:	78 d3       	rcall	.+1776   	; 0xb10 <rgbled_turn_on>
		handle_can(&ComValues, &rxFrame);
     420:	6e e0       	ldi	r22, 0x0E	; 14
     422:	71 e0       	ldi	r23, 0x01	; 1
     424:	83 e2       	ldi	r24, 0x23	; 35
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	4e df       	rcall	.-356    	; 0x2c6 <handle_motor_status_can_msg>
		handle_current_sensor(&f32_prev_current, u16_ADC2_reg);
     42a:	6e ec       	ldi	r22, 0xCE	; 206
     42c:	72 e0       	ldi	r23, 0x02	; 2
     42e:	8e e0       	ldi	r24, 0x0E	; 14
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	11 df       	rcall	.-478    	; 0x256 <handle_can>
     434:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <u16_ADC2_reg>
	
		//simple mode with pwm controlled by potentiometer /
	
		pot_val = (float)u16_ADC3_reg/1024 ;
     438:	70 91 22 01 	lds	r23, 0x0122	; 0x800122 <u16_ADC2_reg+0x1>
     43c:	84 e2       	ldi	r24, 0x24	; 36
     43e:	91 e0       	ldi	r25, 0x01	; 1
     440:	6e df       	rcall	.-292    	; 0x31e <handle_current_sensor>
     442:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <u16_ADC3_reg>
     446:	70 91 20 01 	lds	r23, 0x0120	; 0x800120 <u16_ADC3_reg+0x1>
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	bf d4       	rcall	.+2430   	; 0xdce <__floatunsisf>
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	40 e8       	ldi	r20, 0x80	; 128
     456:	5a e3       	ldi	r21, 0x3A	; 58
     458:	70 d5       	rcall	.+2784   	; 0xf3a <__mulsf3>
     45a:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <pot_val>
     45e:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <pot_val+0x1>
	
		controller(pot_val/2, f32_prev_current); // current from 0 to 500mA
     462:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <pot_val+0x2>
     466:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <pot_val+0x3>
     46a:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <pot_val>
     46e:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <pot_val+0x1>
     472:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <pot_val+0x2>
     476:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <pot_val+0x3>
     47a:	c0 90 24 01 	lds	r12, 0x0124	; 0x800124 <f32_prev_current>
     47e:	d0 90 25 01 	lds	r13, 0x0125	; 0x800125 <f32_prev_current+0x1>
     482:	e0 90 26 01 	lds	r14, 0x0126	; 0x800126 <f32_prev_current+0x2>
     486:	f0 90 27 01 	lds	r15, 0x0127	; 0x800127 <f32_prev_current+0x3>
     48a:	20 e0       	ldi	r18, 0x00	; 0
     48c:	30 e0       	ldi	r19, 0x00	; 0
     48e:	40 e0       	ldi	r20, 0x00	; 0
     490:	5f e3       	ldi	r21, 0x3F	; 63
     492:	53 d5       	rcall	.+2726   	; 0xf3a <__mulsf3>
     494:	a7 01       	movw	r20, r14
     496:	96 01       	movw	r18, r12
     498:	1c de       	rcall	.-968    	; 0xd2 <controller>
     49a:	c2 cf       	rjmp	.-124    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>

0000049c <__vector_12>:
		
	}
}

ISR(TIMER1_COMPA_vect){
     49c:	1f 92       	push	r1
     49e:	0f 92       	push	r0
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	0f 92       	push	r0
     4a4:	11 24       	eor	r1, r1
     4a6:	8f 93       	push	r24
	send_can = 1;
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <send_can>
	read_current = 1;
}
     4ae:	8f 91       	pop	r24
     4b0:	0f 90       	pop	r0
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	0f 90       	pop	r0
     4b6:	1f 90       	pop	r1
     4b8:	18 95       	reti

000004ba <__vector_25>:

ISR(ADC_vect)
{
     4ba:	1f 92       	push	r1
     4bc:	0f 92       	push	r0
     4be:	0f b6       	in	r0, 0x3f	; 63
     4c0:	0f 92       	push	r0
     4c2:	11 24       	eor	r1, r1
     4c4:	0b b6       	in	r0, 0x3b	; 59
     4c6:	0f 92       	push	r0
     4c8:	2f 93       	push	r18
     4ca:	3f 93       	push	r19
     4cc:	4f 93       	push	r20
     4ce:	5f 93       	push	r21
     4d0:	6f 93       	push	r22
     4d2:	7f 93       	push	r23
     4d4:	8f 93       	push	r24
     4d6:	9f 93       	push	r25
     4d8:	af 93       	push	r26
     4da:	bf 93       	push	r27
     4dc:	ef 93       	push	r30
     4de:	ff 93       	push	r31
	if (u8_ADC_mux == 3)
     4e0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <u8_ADC_mux>
     4e4:	83 30       	cpi	r24, 0x03	; 3
     4e6:	89 f4       	brne	.+34     	; 0x50a <__vector_25+0x50>
	{
		u16_ADC3_reg = (ADCL+(ADCH<<8)); // reading conversion result
     4e8:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     4ec:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	98 2f       	mov	r25, r24
     4f4:	88 27       	eor	r24, r24
     4f6:	82 0f       	add	r24, r18
     4f8:	91 1d       	adc	r25, r1
     4fa:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <u16_ADC3_reg+0x1>
     4fe:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <u16_ADC3_reg>
		u8_ADC_mux = 0;
     502:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <u8_ADC_mux>
	if (u8_ADC_mux == 2)
	{
		Set_ADC_Channel(CH_ADC3);
		u8_ADC_mux++ ;
	}
	if (u8_ADC_mux == 1)
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	1e c0       	rjmp	.+60     	; 0x546 <__vector_25+0x8c>
	if (u8_ADC_mux == 3)
	{
		u16_ADC3_reg = (ADCL+(ADCH<<8)); // reading conversion result
		u8_ADC_mux = 0;
	}
	if (u8_ADC_mux == 2)
     50a:	82 30       	cpi	r24, 0x02	; 2
     50c:	39 f4       	brne	.+14     	; 0x51c <__vector_25+0x62>
	{
		Set_ADC_Channel(CH_ADC3);
     50e:	83 e0       	ldi	r24, 0x03	; 3
     510:	7e d0       	rcall	.+252    	; 0x60e <Set_ADC_Channel>
		u8_ADC_mux++ ;
     512:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <u8_ADC_mux>
     516:	8f 5f       	subi	r24, 0xFF	; 255
     518:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <u8_ADC_mux>
	}
	if (u8_ADC_mux == 1)
     51c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <u8_ADC_mux>
     520:	81 30       	cpi	r24, 0x01	; 1
     522:	89 f4       	brne	.+34     	; 0x546 <__vector_25+0x8c>
	{
		u16_ADC2_reg = (ADCL+(ADCH<<8)); // reading conversion result
     524:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     528:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	98 2f       	mov	r25, r24
     530:	88 27       	eor	r24, r24
     532:	82 0f       	add	r24, r18
     534:	91 1d       	adc	r25, r1
     536:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <u16_ADC2_reg+0x1>
     53a:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <u16_ADC2_reg>
		u8_ADC_mux++ ;
     53e:	82 e0       	ldi	r24, 0x02	; 2
     540:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <u8_ADC_mux>
     544:	09 c0       	rjmp	.+18     	; 0x558 <__vector_25+0x9e>
	}
	if (u8_ADC_mux == 0)
     546:	81 11       	cpse	r24, r1
	{
		Set_ADC_Channel(CH_ADC2);
     548:	07 c0       	rjmp	.+14     	; 0x558 <__vector_25+0x9e>
     54a:	82 e0       	ldi	r24, 0x02	; 2
		u8_ADC_mux++ ;
     54c:	60 d0       	rcall	.+192    	; 0x60e <Set_ADC_Channel>
     54e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <u8_ADC_mux>
     552:	8f 5f       	subi	r24, 0xFF	; 255
     554:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <u8_ADC_mux>
	}
}
     558:	ff 91       	pop	r31
     55a:	ef 91       	pop	r30
     55c:	bf 91       	pop	r27
     55e:	af 91       	pop	r26
     560:	9f 91       	pop	r25
     562:	8f 91       	pop	r24
     564:	7f 91       	pop	r23
     566:	6f 91       	pop	r22
     568:	5f 91       	pop	r21
     56a:	4f 91       	pop	r20
     56c:	3f 91       	pop	r19
     56e:	2f 91       	pop	r18
     570:	0f 90       	pop	r0
     572:	0b be       	out	0x3b, r0	; 59
     574:	0f 90       	pop	r0
     576:	0f be       	out	0x3f, r0	; 63
     578:	0f 90       	pop	r0
     57a:	1f 90       	pop	r1
     57c:	18 95       	reti

0000057e <pid_init>:
	output = propGain + intGain + derGain;
	//printf("Out: %d \n", output);
	return output;
}

void pid_init(Pid_t *PID, float t, float p, float i, float d){
     57e:	8f 92       	push	r8
     580:	9f 92       	push	r9
     582:	af 92       	push	r10
     584:	bf 92       	push	r11
     586:	cf 92       	push	r12
     588:	df 92       	push	r13
     58a:	ef 92       	push	r14
     58c:	ff 92       	push	r15
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	fc 01       	movw	r30, r24
	PID->Kp = p;
     59c:	04 87       	std	Z+12, r16	; 0x0c
     59e:	15 87       	std	Z+13, r17	; 0x0d
     5a0:	26 87       	std	Z+14, r18	; 0x0e
     5a2:	37 87       	std	Z+15, r19	; 0x0f
	PID->Ki = i;
     5a4:	c4 8a       	std	Z+20, r12	; 0x14
     5a6:	d5 8a       	std	Z+21, r13	; 0x15
     5a8:	e6 8a       	std	Z+22, r14	; 0x16
     5aa:	f7 8a       	std	Z+23, r15	; 0x17
	PID->Kd = d;
     5ac:	80 8a       	std	Z+16, r8	; 0x10
     5ae:	91 8a       	std	Z+17, r9	; 0x11
     5b0:	a2 8a       	std	Z+18, r10	; 0x12
     5b2:	b3 8a       	std	Z+19, r11	; 0x13
	PID->timeStep = t;
     5b4:	40 87       	std	Z+8, r20	; 0x08
     5b6:	51 87       	std	Z+9, r21	; 0x09
     5b8:	62 87       	std	Z+10, r22	; 0x0a
     5ba:	73 87       	std	Z+11, r23	; 0x0b
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	1f 91       	pop	r17
     5c2:	0f 91       	pop	r16
     5c4:	ff 90       	pop	r15
     5c6:	ef 90       	pop	r14
     5c8:	df 90       	pop	r13
     5ca:	cf 90       	pop	r12
     5cc:	bf 90       	pop	r11
     5ce:	af 90       	pop	r10
     5d0:	9f 90       	pop	r9
     5d2:	8f 90       	pop	r8
     5d4:	08 95       	ret

000005d6 <adc_Free_running_init>:
	//Setting channel and type of reading, see enum in adc.h
	ADMUX &= 0b11100000;
	ADMUX |= (int8_t)channel;

	return (ADCL+(ADCH<<8));
}
     5d6:	ec e7       	ldi	r30, 0x7C	; 124
     5d8:	f0 e0       	ldi	r31, 0x00	; 0
     5da:	80 81       	ld	r24, Z
     5dc:	80 64       	ori	r24, 0x40	; 64
     5de:	80 83       	st	Z, r24
     5e0:	ea e7       	ldi	r30, 0x7A	; 122
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	80 81       	ld	r24, Z
     5e6:	84 60       	ori	r24, 0x04	; 4
     5e8:	80 83       	st	Z, r24
     5ea:	80 81       	ld	r24, Z
     5ec:	80 62       	ori	r24, 0x20	; 32
     5ee:	80 83       	st	Z, r24
     5f0:	80 81       	ld	r24, Z
     5f2:	88 60       	ori	r24, 0x08	; 8
     5f4:	80 83       	st	Z, r24
     5f6:	ab e7       	ldi	r26, 0x7B	; 123
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	8c 91       	ld	r24, X
     5fc:	88 7f       	andi	r24, 0xF8	; 248
     5fe:	8c 93       	st	X, r24
     600:	80 81       	ld	r24, Z
     602:	80 68       	ori	r24, 0x80	; 128
     604:	80 83       	st	Z, r24
     606:	80 81       	ld	r24, Z
     608:	80 64       	ori	r24, 0x40	; 64
     60a:	80 83       	st	Z, r24
     60c:	08 95       	ret

0000060e <Set_ADC_Channel>:

void Set_ADC_Channel(adc_channel_t channel)
{
	channel &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|channel; // clears the bottom 3 bits before ORing
     60e:	ec e7       	ldi	r30, 0x7C	; 124
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	90 81       	ld	r25, Z
     614:	98 7f       	andi	r25, 0xF8	; 248
     616:	87 70       	andi	r24, 0x07	; 7
     618:	89 2b       	or	r24, r25
     61a:	80 83       	st	Z, r24
     61c:	08 95       	ret

0000061e <__vector_18>:

/**************************************************************************************************
*   CAN ISR - See 'can.h' Header file for Description
**************************************************************************************************/
ISR(CANIT_vect)
{
     61e:	1f 92       	push	r1
     620:	0f 92       	push	r0
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	0f 92       	push	r0
     626:	11 24       	eor	r1, r1
     628:	0b b6       	in	r0, 0x3b	; 59
     62a:	0f 92       	push	r0
     62c:	2f 93       	push	r18
     62e:	3f 93       	push	r19
     630:	4f 93       	push	r20
     632:	5f 93       	push	r21
     634:	6f 93       	push	r22
     636:	8f 93       	push	r24
     638:	9f 93       	push	r25
     63a:	af 93       	push	r26
     63c:	bf 93       	push	r27
     63e:	ef 93       	push	r30
     640:	ff 93       	push	r31
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	1f 92       	push	r1
     648:	cd b7       	in	r28, 0x3d	; 61
     64a:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t mob_status;

	uint8_t mob_interrupts = CANSIT2;
     64c:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>

	// TX
	if ((mob_interrupts & (1 << SIT0)) && (CANIE2 & (1 << ENMOB0))) {
     650:	80 ff       	sbrs	r24, 0
     652:	47 c0       	rjmp	.+142    	; 0x6e2 <__vector_18+0xc4>
     654:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     658:	90 ff       	sbrs	r25, 0
     65a:	43 c0       	rjmp	.+134    	; 0x6e2 <__vector_18+0xc4>
		CANPAGE = (0x0 << MOBNB0); //Select TX Mob (Mob0)
     65c:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		mob_status = CANSTMOB;
     660:	ee ee       	ldi	r30, 0xEE	; 238
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	80 81       	ld	r24, Z
     666:	89 83       	std	Y+1, r24	; 0x01
		CANSTMOB &= ~(1 << TXOK); //clear MB1, TX interrupt
     668:	80 81       	ld	r24, Z
     66a:	8f 7b       	andi	r24, 0xBF	; 191
     66c:	80 83       	st	Z, r24

		if (tx_on != tx_off) {
     66e:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <tx_off>
     672:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <tx_on>
     676:	98 17       	cp	r25, r24
     678:	89 f1       	breq	.+98     	; 0x6dc <__vector_18+0xbe>
			unsigned char pos;
			pos = tx_off & (TX_SIZE-1);
			//set ID
			CANIDT4 = tx_frames[pos].array[0];
     67a:	8f 70       	andi	r24, 0x0F	; 15
     67c:	2b e0       	ldi	r18, 0x0B	; 11
     67e:	82 9f       	mul	r24, r18
     680:	c0 01       	movw	r24, r0
     682:	11 24       	eor	r1, r1
     684:	fc 01       	movw	r30, r24
     686:	e2 52       	subi	r30, 0x22	; 34
     688:	fe 4f       	sbci	r31, 0xFE	; 254
     68a:	20 81       	ld	r18, Z
     68c:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			CANIDT2 = tx_frames[pos].array[0];
     690:	20 81       	ld	r18, Z
     692:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			CANIDT1 = tx_frames[pos].array[1];
     696:	21 81       	ldd	r18, Z+1	; 0x01
     698:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

			//program data registers - auto increment CANMSG
			CANMSG = tx_frames[pos].data[0];
     69c:	23 81       	ldd	r18, Z+3	; 0x03
     69e:	aa ef       	ldi	r26, 0xFA	; 250
     6a0:	b0 e0       	ldi	r27, 0x00	; 0
     6a2:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[1];
     6a4:	24 81       	ldd	r18, Z+4	; 0x04
     6a6:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[2];
     6a8:	25 81       	ldd	r18, Z+5	; 0x05
     6aa:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[3];
     6ac:	26 81       	ldd	r18, Z+6	; 0x06
     6ae:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[4];
     6b0:	27 81       	ldd	r18, Z+7	; 0x07
     6b2:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[5];
     6b4:	20 85       	ldd	r18, Z+8	; 0x08
     6b6:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[6];
     6b8:	21 85       	ldd	r18, Z+9	; 0x09
     6ba:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[7];
     6bc:	22 85       	ldd	r18, Z+10	; 0x0a
     6be:	2c 93       	st	X, r18

			//set length and request send
			CANCDMOB = (1 << CONMOB0) | tx_frames[pos].length;
     6c0:	fc 01       	movw	r30, r24
     6c2:	e0 52       	subi	r30, 0x20	; 32
     6c4:	fe 4f       	sbci	r31, 0xFE	; 254
     6c6:	80 81       	ld	r24, Z
     6c8:	8f 70       	andi	r24, 0x0F	; 15
     6ca:	80 64       	ori	r24, 0x40	; 64
     6cc:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
			tx_off++;
     6d0:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <tx_off>
     6d4:	8f 5f       	subi	r24, 0xFF	; 255
     6d6:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <tx_off>
     6da:	7d c0       	rjmp	.+250    	; 0x7d6 <__vector_18+0x1b8>
		} else {
			tx_busy = 0;
     6dc:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <tx_busy>
     6e0:	7a c0       	rjmp	.+244    	; 0x7d6 <__vector_18+0x1b8>
		}
	}
	// RX
	else if ((mob_interrupts & (1 << SIT1)) && (CANIE2 & (1 << ENMOB1))) {
     6e2:	81 ff       	sbrs	r24, 1
     6e4:	78 c0       	rjmp	.+240    	; 0x7d6 <__vector_18+0x1b8>
     6e6:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     6ea:	81 ff       	sbrs	r24, 1
     6ec:	74 c0       	rjmp	.+232    	; 0x7d6 <__vector_18+0x1b8>
		//Select RX Mob (Mob1)
		CANPAGE = (0x1 << MOBNB0);
     6ee:	80 e1       	ldi	r24, 0x10	; 16
     6f0:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		if (((rx_on - rx_off) & RX_ABS_MASK) < RX_SIZE) {
     6f4:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <rx_on>
     6f8:	28 2f       	mov	r18, r24
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <rx_off>
     700:	29 1b       	sub	r18, r25
     702:	31 09       	sbc	r19, r1
     704:	2f 77       	andi	r18, 0x7F	; 127
     706:	33 27       	eor	r19, r19
     708:	20 31       	cpi	r18, 0x10	; 16
     70a:	31 05       	cpc	r19, r1
     70c:	0c f0       	brlt	.+2      	; 0x710 <__vector_18+0xf2>
     70e:	58 c0       	rjmp	.+176    	; 0x7c0 <__vector_18+0x1a2>
			unsigned char pos;
			pos = rx_on & (RX_SIZE-1);
			//Read length
			rx_frames[pos].length = CANCDMOB & 0x0F;
     710:	e8 2f       	mov	r30, r24
     712:	ef 70       	andi	r30, 0x0F	; 15
     714:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     718:	2e 2f       	mov	r18, r30
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	4b e0       	ldi	r20, 0x0B	; 11
     71e:	e4 9f       	mul	r30, r20
     720:	f0 01       	movw	r30, r0
     722:	11 24       	eor	r1, r1
     724:	e2 5d       	subi	r30, 0xD2	; 210
     726:	fe 4f       	sbci	r31, 0xFE	; 254
     728:	9f 70       	andi	r25, 0x0F	; 15
     72a:	42 81       	ldd	r20, Z+2	; 0x02
     72c:	40 7f       	andi	r20, 0xF0	; 240
     72e:	94 2b       	or	r25, r20
     730:	92 83       	std	Z+2, r25	; 0x02
			//Read ID
			rx_frames[pos].array[0] = (CANIDT2 & 0xE0) | (CANIDT4 & 0x07);
     732:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     736:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     73a:	40 7e       	andi	r20, 0xE0	; 224
     73c:	97 70       	andi	r25, 0x07	; 7
     73e:	94 2b       	or	r25, r20
     740:	90 83       	st	Z, r25
			rx_frames[pos].array[1] = CANIDT1;
     742:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     746:	91 83       	std	Z+1, r25	; 0x01

			//read data registers - auto increment CANMSG
			rx_frames[pos].data[0] = CANMSG;
     748:	aa ef       	ldi	r26, 0xFA	; 250
     74a:	b0 e0       	ldi	r27, 0x00	; 0
     74c:	9c 91       	ld	r25, X
     74e:	93 83       	std	Z+3, r25	; 0x03
			rx_frames[pos].data[1] = CANMSG;
     750:	9c 91       	ld	r25, X
     752:	94 83       	std	Z+4, r25	; 0x04
			rx_frames[pos].data[2] = CANMSG;
     754:	9c 91       	ld	r25, X
     756:	95 83       	std	Z+5, r25	; 0x05
			rx_frames[pos].data[3] = CANMSG;
     758:	9c 91       	ld	r25, X
     75a:	96 83       	std	Z+6, r25	; 0x06
			rx_frames[pos].data[4] = CANMSG;
     75c:	9c 91       	ld	r25, X
     75e:	97 83       	std	Z+7, r25	; 0x07
			rx_frames[pos].data[5] = CANMSG;
     760:	9c 91       	ld	r25, X
     762:	90 87       	std	Z+8, r25	; 0x08
			rx_frames[pos].data[6] = CANMSG;
     764:	9c 91       	ld	r25, X
     766:	91 87       	std	Z+9, r25	; 0x09
			rx_frames[pos].data[7] = CANMSG;
     768:	9c 91       	ld	r25, X
     76a:	92 87       	std	Z+10, r25	; 0x0a
			rx_on++;
     76c:	8f 5f       	subi	r24, 0xFF	; 255
     76e:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <rx_on>

			// Reset if reset can message
			if(rx_frames[pos].id == 0x000 && rx_frames[pos].data[0] == 0x03){
     772:	40 81       	ld	r20, Z
     774:	42 95       	swap	r20
     776:	46 95       	lsr	r20
     778:	47 70       	andi	r20, 0x07	; 7
     77a:	51 81       	ldd	r21, Z+1	; 0x01
     77c:	65 2f       	mov	r22, r21
     77e:	66 0f       	add	r22, r22
     780:	66 0f       	add	r22, r22
     782:	66 0f       	add	r22, r22
     784:	86 2f       	mov	r24, r22
     786:	84 2b       	or	r24, r20
     788:	95 2f       	mov	r25, r21
     78a:	92 95       	swap	r25
     78c:	96 95       	lsr	r25
     78e:	97 70       	andi	r25, 0x07	; 7
     790:	89 2b       	or	r24, r25
     792:	b1 f4       	brne	.+44     	; 0x7c0 <__vector_18+0x1a2>
     794:	8b e0       	ldi	r24, 0x0B	; 11
     796:	82 9f       	mul	r24, r18
     798:	f0 01       	movw	r30, r0
     79a:	83 9f       	mul	r24, r19
     79c:	f0 0d       	add	r31, r0
     79e:	11 24       	eor	r1, r1
     7a0:	e2 5d       	subi	r30, 0xD2	; 210
     7a2:	fe 4f       	sbci	r31, 0xFE	; 254
     7a4:	83 81       	ldd	r24, Z+3	; 0x03
     7a6:	83 30       	cpi	r24, 0x03	; 3
     7a8:	59 f4       	brne	.+22     	; 0x7c0 <__vector_18+0x1a2>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     7aa:	98 e0       	ldi	r25, 0x08	; 8
     7ac:	88 e1       	ldi	r24, 0x18	; 24
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	f8 94       	cli
     7b2:	a8 95       	wdr
     7b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     7be:	ff cf       	rjmp	.-2      	; 0x7be <__vector_18+0x1a0>
				while(1); //wait for watchdog
			}
		}

		// Clear irq
		mob_status = CANSTMOB;
     7c0:	ee ee       	ldi	r30, 0xEE	; 238
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	80 81       	ld	r24, Z
     7c6:	89 83       	std	Y+1, r24	; 0x01
		(void)mob_status;
     7c8:	89 81       	ldd	r24, Y+1	; 0x01

		CANSTMOB &= ~(1 << RXOK);
     7ca:	80 81       	ld	r24, Z
     7cc:	8f 7d       	andi	r24, 0xDF	; 223
     7ce:	80 83       	st	Z, r24
		CANCDMOB = (1 << CONMOB1);			//Set Mob 1 as RX
     7d0:	80 e8       	ldi	r24, 0x80	; 128
     7d2:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	}
}
     7d6:	0f 90       	pop	r0
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	ff 91       	pop	r31
     7de:	ef 91       	pop	r30
     7e0:	bf 91       	pop	r27
     7e2:	af 91       	pop	r26
     7e4:	9f 91       	pop	r25
     7e6:	8f 91       	pop	r24
     7e8:	6f 91       	pop	r22
     7ea:	5f 91       	pop	r21
     7ec:	4f 91       	pop	r20
     7ee:	3f 91       	pop	r19
     7f0:	2f 91       	pop	r18
     7f2:	0f 90       	pop	r0
     7f4:	0b be       	out	0x3b, r0	; 59
     7f6:	0f 90       	pop	r0
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	0f 90       	pop	r0
     7fc:	1f 90       	pop	r1
     7fe:	18 95       	reti

00000800 <can_init>:


void can_init(uint16_t accept_mask_id, uint16_t accept_tag_id) {
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
	// Reset CAN controller
	CANGCON = (1 << SWRES);
     804:	e8 ed       	ldi	r30, 0xD8	; 216
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	21 e0       	ldi	r18, 0x01	; 1
     80a:	20 83       	st	Z, r18

	CANBT1 = (BRP_VALUE - 1) << 1;
     80c:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = ((SJW_VALUE - 1) << 5) | ((PROP_SEG - 1) << 1);
     810:	2c e0       	ldi	r18, 0x0C	; 12
     812:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = ((PHASE_SEG_2 - 1) << 4) | ((PHASE_SEG_1 - 1) << 1) | 1;
     816:	27 e3       	ldi	r18, 0x37	; 55
     818:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	CANTIM = 0;
     81c:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
     820:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	CANTTC = 0;
     824:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     828:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	CANHPMOB = 0;
     82c:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	CANTCON = 0;
     830:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	// Switch to Mob 0 access
	CANPAGE = (0x0 << MOBNB0);
     834:	cd ee       	ldi	r28, 0xED	; 237
     836:	d0 e0       	ldi	r29, 0x00	; 0
     838:	18 82       	st	Y, r1
	CANSTMOB = 0;
     83a:	ae ee       	ldi	r26, 0xEE	; 238
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	1c 92       	st	X, r1

	// Switch to Mob 1 access
	CANPAGE = (0x1 << MOBNB0);
     840:	20 e1       	ldi	r18, 0x10	; 16
     842:	28 83       	st	Y, r18
	CANSTMOB = 0;
     844:	1c 92       	st	X, r1
	CANIDM4 = 0;
     846:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANIDM2 = (accept_mask_id << 5) & 0xFF;
     84a:	28 2f       	mov	r18, r24
     84c:	22 95       	swap	r18
     84e:	22 0f       	add	r18, r18
     850:	20 7e       	andi	r18, 0xE0	; 224
     852:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = (accept_mask_id >> 3) & 0xFF;
     856:	96 95       	lsr	r25
     858:	87 95       	ror	r24
     85a:	96 95       	lsr	r25
     85c:	87 95       	ror	r24
     85e:	96 95       	lsr	r25
     860:	87 95       	ror	r24
     862:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDT4 = 0;
     866:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT2 = (accept_tag_id << 5) & 0xFF;
     86a:	86 2f       	mov	r24, r22
     86c:	82 95       	swap	r24
     86e:	88 0f       	add	r24, r24
     870:	80 7e       	andi	r24, 0xE0	; 224
     872:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (accept_tag_id >> 3) & 0xFF;
     876:	76 95       	lsr	r23
     878:	67 95       	ror	r22
     87a:	76 95       	lsr	r23
     87c:	67 95       	ror	r22
     87e:	76 95       	lsr	r23
     880:	67 95       	ror	r22
     882:	60 93 f3 00 	sts	0x00F3, r22	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

	// Set Mob 1 as RX
	CANCDMOB = (1 << CONMOB1);
     886:	80 e8       	ldi	r24, 0x80	; 128
     888:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	// Enable Mob 0 and 1
	CANEN2 = (1 << ENMOB1) | (1 << ENMOB0);
     88c:	83 e0       	ldi	r24, 0x03	; 3
     88e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	// Enable Mob 0 and 1 Interrupt
	CANIE2 = (1 << ENMOB1) | (1 << ENMOB0);
     892:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	// Enable TX and RX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);	
     896:	80 eb       	ldi	r24, 0xB0	; 176
     898:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>

	// Enable CAN controller
	CANGCON = (1 << ENASTB);
     89c:	82 e0       	ldi	r24, 0x02	; 2
     89e:	80 83       	st	Z, r24

	reset = 0;
     8a0:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <reset>
}
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	08 95       	ret

000008aa <can_read_message_if_new>:

bool can_read_message_if_new(CanMessage_t* message) {
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	ec 01       	movw	r28, r24
	// Check if there is a new message
	if (rx_on == rx_off) {
     8b0:	40 91 2a 01 	lds	r20, 0x012A	; 0x80012a <rx_off>
     8b4:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <rx_on>
     8b8:	24 17       	cp	r18, r20
     8ba:	89 f1       	breq	.+98     	; 0x91e <can_read_message_if_new+0x74>
     8bc:	a4 2f       	mov	r26, r20
     8be:	af 70       	andi	r26, 0x0F	; 15
	}

	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
     8c0:	8b e0       	ldi	r24, 0x0B	; 11
     8c2:	a8 9f       	mul	r26, r24
     8c4:	b0 01       	movw	r22, r0
     8c6:	11 24       	eor	r1, r1
     8c8:	fb 01       	movw	r30, r22
     8ca:	e2 5d       	subi	r30, 0xD2	; 210
     8cc:	fe 4f       	sbci	r31, 0xFE	; 254
     8ce:	20 81       	ld	r18, Z
     8d0:	22 95       	swap	r18
     8d2:	26 95       	lsr	r18
     8d4:	27 70       	andi	r18, 0x07	; 7
     8d6:	31 81       	ldd	r19, Z+1	; 0x01
     8d8:	53 2f       	mov	r21, r19
     8da:	55 0f       	add	r21, r21
     8dc:	55 0f       	add	r21, r21
     8de:	55 0f       	add	r21, r21
     8e0:	25 2b       	or	r18, r21
     8e2:	32 95       	swap	r19
     8e4:	36 95       	lsr	r19
     8e6:	37 70       	andi	r19, 0x07	; 7
     8e8:	28 83       	st	Y, r18
     8ea:	39 83       	std	Y+1, r19	; 0x01
	message->length = frame->length;
     8ec:	fb 01       	movw	r30, r22
     8ee:	e0 5d       	subi	r30, 0xD0	; 208
     8f0:	fe 4f       	sbci	r31, 0xFE	; 254
     8f2:	20 81       	ld	r18, Z
     8f4:	2f 70       	andi	r18, 0x0F	; 15
     8f6:	2a 83       	std	Y+2, r18	; 0x02
	for (int i = 0; i < message->length; i++) {
     8f8:	22 23       	and	r18, r18
     8fa:	99 f0       	breq	.+38     	; 0x922 <can_read_message_if_new+0x78>
     8fc:	db 01       	movw	r26, r22
     8fe:	af 5c       	subi	r26, 0xCF	; 207
     900:	be 4f       	sbci	r27, 0xFE	; 254
     902:	fe 01       	movw	r30, r28
     904:	33 96       	adiw	r30, 0x03	; 3
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	2d 5f       	subi	r18, 0xFD	; 253
     90a:	3f 4f       	sbci	r19, 0xFF	; 255
     90c:	ce 01       	movw	r24, r28
     90e:	82 0f       	add	r24, r18
     910:	93 1f       	adc	r25, r19
		message->data.u8[i] = frame->data[i];
     912:	2d 91       	ld	r18, X+
     914:	21 93       	st	Z+, r18
	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
	message->length = frame->length;
	for (int i = 0; i < message->length; i++) {
     916:	e8 17       	cp	r30, r24
     918:	f9 07       	cpc	r31, r25
     91a:	d9 f7       	brne	.-10     	; 0x912 <can_read_message_if_new+0x68>
     91c:	02 c0       	rjmp	.+4      	; 0x922 <can_read_message_if_new+0x78>
}

bool can_read_message_if_new(CanMessage_t* message) {
	// Check if there is a new message
	if (rx_on == rx_off) {
		return false;
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	04 c0       	rjmp	.+8      	; 0x92a <can_read_message_if_new+0x80>
		message->data.u8[i] = frame->data[i];
	}

	// Advance to next can message
	if (rx_on != rx_off) {
		rx_off++;
     922:	4f 5f       	subi	r20, 0xFF	; 255
     924:	40 93 2a 01 	sts	0x012A, r20	; 0x80012a <rx_off>
	}

	return true;
     928:	81 e0       	ldi	r24, 0x01	; 1
}
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	08 95       	ret

00000930 <can_send_message>:

bool can_send_message(CanMessage_t* message) {
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	fc 01       	movw	r30, r24
	bool result = false;

	CANGIE &= ~(1 << ENIT);
     936:	ab ed       	ldi	r26, 0xDB	; 219
     938:	b0 e0       	ldi	r27, 0x00	; 0
     93a:	8c 91       	ld	r24, X
     93c:	8f 77       	andi	r24, 0x7F	; 127
     93e:	8c 93       	st	X, r24

	if (!tx_busy) {
     940:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <tx_busy>
     944:	81 11       	cpse	r24, r1
     946:	27 c0       	rjmp	.+78     	; 0x996 <can_send_message+0x66>
		// Switch to Mob 0 access
		CANPAGE = 0 << 4;
     948:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		// Set ID
		CANIDT2 = message->id << 5;
     94c:	80 81       	ld	r24, Z
     94e:	82 95       	swap	r24
     950:	88 0f       	add	r24, r24
     952:	80 7e       	andi	r24, 0xE0	; 224
     954:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT1 = message->id >> 3;
     958:	80 81       	ld	r24, Z
     95a:	91 81       	ldd	r25, Z+1	; 0x01
     95c:	96 95       	lsr	r25
     95e:	87 95       	ror	r24
     960:	96 95       	lsr	r25
     962:	87 95       	ror	r24
     964:	96 95       	lsr	r25
     966:	87 95       	ror	r24
     968:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     96c:	df 01       	movw	r26, r30
     96e:	13 96       	adiw	r26, 0x03	; 3
     970:	9f 01       	movw	r18, r30
     972:	25 5f       	subi	r18, 0xF5	; 245
     974:	3f 4f       	sbci	r19, 0xFF	; 255

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
     976:	ca ef       	ldi	r28, 0xFA	; 250
     978:	d0 e0       	ldi	r29, 0x00	; 0
     97a:	9d 91       	ld	r25, X+
     97c:	98 83       	st	Y, r25
		// Set ID
		CANIDT2 = message->id << 5;
		CANIDT1 = message->id >> 3;

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
     97e:	a2 17       	cp	r26, r18
     980:	b3 07       	cpc	r27, r19
     982:	d9 f7       	brne	.-10     	; 0x97a <can_send_message+0x4a>
			CANMSG = message->data.u8[i];
		}
		
		result = true;
		tx_busy = 1;
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <tx_busy>

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
     98a:	82 81       	ldd	r24, Z+2	; 0x02
     98c:	80 64       	ori	r24, 0x40	; 64
     98e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
		}
		
		result = true;
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	43 c0       	rjmp	.+134    	; 0xa1c <can_send_message+0xec>
		tx_busy = 1;

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
	}
	else if (TX_SIZE - ((tx_on - tx_off) & TX_ABS_MASK)) {
     996:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <tx_on>
     99a:	82 2f       	mov	r24, r18
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <tx_off>
     9a2:	83 1b       	sub	r24, r19
     9a4:	91 09       	sbc	r25, r1
     9a6:	8f 77       	andi	r24, 0x7F	; 127
     9a8:	99 27       	eor	r25, r25
     9aa:	40 97       	sbiw	r24, 0x10	; 16
     9ac:	b1 f1       	breq	.+108    	; 0xa1a <can_send_message+0xea>
		// Copy data into TX buffer
		tx_frames[tx_on & (TX_SIZE-1)].id = message->id;
     9ae:	a2 2f       	mov	r26, r18
     9b0:	af 70       	andi	r26, 0x0F	; 15
     9b2:	8b e0       	ldi	r24, 0x0B	; 11
     9b4:	a8 9f       	mul	r26, r24
     9b6:	d0 01       	movw	r26, r0
     9b8:	11 24       	eor	r1, r1
     9ba:	ed 01       	movw	r28, r26
     9bc:	c2 52       	subi	r28, 0x22	; 34
     9be:	de 4f       	sbci	r29, 0xFE	; 254
     9c0:	80 81       	ld	r24, Z
     9c2:	98 2f       	mov	r25, r24
     9c4:	92 95       	swap	r25
     9c6:	99 0f       	add	r25, r25
     9c8:	90 7e       	andi	r25, 0xE0	; 224
     9ca:	88 81       	ld	r24, Y
     9cc:	8f 71       	andi	r24, 0x1F	; 31
     9ce:	89 2b       	or	r24, r25
     9d0:	88 83       	st	Y, r24
     9d2:	80 81       	ld	r24, Z
     9d4:	98 2f       	mov	r25, r24
     9d6:	96 95       	lsr	r25
     9d8:	96 95       	lsr	r25
     9da:	96 95       	lsr	r25
     9dc:	89 81       	ldd	r24, Y+1	; 0x01
     9de:	80 7e       	andi	r24, 0xE0	; 224
     9e0:	89 2b       	or	r24, r25
     9e2:	89 83       	std	Y+1, r24	; 0x01
     9e4:	91 81       	ldd	r25, Z+1	; 0x01
     9e6:	92 95       	swap	r25
     9e8:	99 0f       	add	r25, r25
     9ea:	90 7e       	andi	r25, 0xE0	; 224
     9ec:	8f 71       	andi	r24, 0x1F	; 31
     9ee:	89 2b       	or	r24, r25
     9f0:	89 83       	std	Y+1, r24	; 0x01
		tx_frames[tx_on & (TX_SIZE-1)].length = message->length;
     9f2:	82 81       	ldd	r24, Z+2	; 0x02
     9f4:	98 2f       	mov	r25, r24
     9f6:	9f 70       	andi	r25, 0x0F	; 15
     9f8:	8a 81       	ldd	r24, Y+2	; 0x02
     9fa:	80 7f       	andi	r24, 0xF0	; 240
     9fc:	89 2b       	or	r24, r25
     9fe:	8a 83       	std	Y+2, r24	; 0x02
		memcpy(tx_frames[tx_on & (TX_SIZE-1)].data, &message->data, CAN_FRAME_DATA_MAX_LENGTH);
     a00:	af 51       	subi	r26, 0x1F	; 31
     a02:	be 4f       	sbci	r27, 0xFE	; 254
     a04:	33 96       	adiw	r30, 0x03	; 3
     a06:	88 e0       	ldi	r24, 0x08	; 8
     a08:	01 90       	ld	r0, Z+
     a0a:	0d 92       	st	X+, r0
     a0c:	8a 95       	dec	r24
     a0e:	e1 f7       	brne	.-8      	; 0xa08 <can_send_message+0xd8>

		/*for (int i = 0; i < 8; i++) {
			tx_frames[tx_on & (TX_SIZE-1)].data[i] = message->data.u8[i];
		}*/

		tx_on++;
     a10:	2f 5f       	subi	r18, 0xFF	; 255
     a12:	20 93 2c 01 	sts	0x012C, r18	; 0x80012c <tx_on>
		result = true;
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	01 c0       	rjmp	.+2      	; 0xa1c <can_send_message+0xec>

	return true;
}

bool can_send_message(CanMessage_t* message) {
	bool result = false;
     a1a:	80 e0       	ldi	r24, 0x00	; 0

		tx_on++;
		result = true;
	}

	CANGIE |= (1 << ENIT);
     a1c:	eb ed       	ldi	r30, 0xDB	; 219
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	90 81       	ld	r25, Z
     a22:	90 68       	ori	r25, 0x80	; 128
     a24:	90 83       	st	Z, r25

	return result;
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	08 95       	ret

00000a2c <pwm_init>:
			break;
		case PWM_PE4:
			OCR3B = (dutyCycle & 0xFFFF);
			break;
		case PWM_PE5:
			OCR3C = (dutyCycle & 0xFFFF);
     a2c:	0f 93       	push	r16
     a2e:	1f 93       	push	r17
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	8e b1       	in	r24, 0x0e	; 14
     a36:	87 7c       	andi	r24, 0xC7	; 199
     a38:	8e b9       	out	0x0e, r24	; 14
     a3a:	8d b1       	in	r24, 0x0d	; 13
     a3c:	88 63       	ori	r24, 0x38	; 56
     a3e:	8d b9       	out	0x0d, r24	; 13
     a40:	2c 98       	cbi	0x05, 4	; 5
     a42:	24 9a       	sbi	0x04, 4	; 4
     a44:	a1 e9       	ldi	r26, 0x91	; 145
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	8c 91       	ld	r24, X
     a4a:	88 61       	ori	r24, 0x18	; 24
     a4c:	8c 93       	st	X, r24
     a4e:	e0 e9       	ldi	r30, 0x90	; 144
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	80 81       	ld	r24, Z
     a54:	82 60       	ori	r24, 0x02	; 2
     a56:	80 83       	st	Z, r24
     a58:	80 81       	ld	r24, Z
     a5a:	8e 7f       	andi	r24, 0xFE	; 254
     a5c:	80 83       	st	Z, r24
     a5e:	c0 eb       	ldi	r28, 0xB0	; 176
     a60:	d0 e0       	ldi	r29, 0x00	; 0
     a62:	88 81       	ld	r24, Y
     a64:	88 64       	ori	r24, 0x48	; 72
     a66:	88 83       	st	Y, r24
     a68:	80 81       	ld	r24, Z
     a6a:	80 68       	ori	r24, 0x80	; 128
     a6c:	80 83       	st	Z, r24
     a6e:	80 81       	ld	r24, Z
     a70:	8f 7b       	andi	r24, 0xBF	; 191
     a72:	80 83       	st	Z, r24
     a74:	80 81       	ld	r24, Z
     a76:	80 62       	ori	r24, 0x20	; 32
     a78:	80 83       	st	Z, r24
     a7a:	80 81       	ld	r24, Z
     a7c:	80 61       	ori	r24, 0x10	; 16
     a7e:	80 83       	st	Z, r24
     a80:	88 81       	ld	r24, Y
     a82:	80 62       	ori	r24, 0x20	; 32
     a84:	88 83       	st	Y, r24
     a86:	88 81       	ld	r24, Y
     a88:	8f 7e       	andi	r24, 0xEF	; 239
     a8a:	88 83       	st	Y, r24
     a8c:	8c 91       	ld	r24, X
     a8e:	81 60       	ori	r24, 0x01	; 1
     a90:	8c 93       	st	X, r24
     a92:	8c 91       	ld	r24, X
     a94:	89 7f       	andi	r24, 0xF9	; 249
     a96:	8c 93       	st	X, r24
     a98:	e6 e9       	ldi	r30, 0x96	; 150
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	8f ef       	ldi	r24, 0xFF	; 255
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	91 83       	std	Z+1, r25	; 0x01
     aa2:	80 83       	st	Z, r24
     aa4:	c8 e9       	ldi	r28, 0x98	; 152
     aa6:	d0 e0       	ldi	r29, 0x00	; 0
     aa8:	19 82       	std	Y+1, r1	; 0x01
     aaa:	18 82       	st	Y, r1
     aac:	0a e9       	ldi	r16, 0x9A	; 154
     aae:	10 e0       	ldi	r17, 0x00	; 0
     ab0:	d8 01       	movw	r26, r16
     ab2:	11 96       	adiw	r26, 0x01	; 1
     ab4:	1c 92       	st	X, r1
     ab6:	1e 92       	st	-X, r1
     ab8:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
     abc:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     ac0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     ac4:	60 81       	ld	r22, Z
     ac6:	71 81       	ldd	r23, Z+1	; 0x01
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	80 d1       	rcall	.+768    	; 0xdce <__floatunsisf>
     ace:	20 e0       	ldi	r18, 0x00	; 0
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	40 e0       	ldi	r20, 0x00	; 0
     ad4:	5f e3       	ldi	r21, 0x3F	; 63
     ad6:	31 d2       	rcall	.+1122   	; 0xf3a <__mulsf3>
     ad8:	49 d1       	rcall	.+658    	; 0xd6c <__fixsfsi>
     ada:	79 83       	std	Y+1, r23	; 0x01
     adc:	68 83       	st	Y, r22
     ade:	88 81       	ld	r24, Y
     ae0:	99 81       	ldd	r25, Y+1	; 0x01
     ae2:	f8 01       	movw	r30, r16
     ae4:	91 83       	std	Z+1, r25	; 0x01
     ae6:	80 83       	st	Z, r24
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	1f 91       	pop	r17
     aee:	0f 91       	pop	r16
     af0:	08 95       	ret

00000af2 <pwm_set_top_t3>:
	}
}

void pwm_set_top_t3(uint16_t top)
{
	ICR3 = (top & 0xFFFF);
     af2:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
     af6:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
     afa:	08 95       	ret

00000afc <rgbled_turn_off>:
	DDRB |= LED_ALL;
	rgbled_turn_off(LED_ALL);
}

void rgbled_turn_off(RgbLedColor_t color) {
	PORTB |= color;
     afc:	95 b1       	in	r25, 0x05	; 5
     afe:	89 2b       	or	r24, r25
     b00:	85 b9       	out	0x05, r24	; 5
     b02:	08 95       	ret

00000b04 <rgbled_init>:
#include "rgbled.h"
#include <avr/io.h>


void rgbled_init() {
	DDRB |= LED_ALL;
     b04:	84 b1       	in	r24, 0x04	; 4
     b06:	80 6e       	ori	r24, 0xE0	; 224
     b08:	84 b9       	out	0x04, r24	; 4
	rgbled_turn_off(LED_ALL);
     b0a:	80 ee       	ldi	r24, 0xE0	; 224
     b0c:	f7 cf       	rjmp	.-18     	; 0xafc <rgbled_turn_off>
     b0e:	08 95       	ret

00000b10 <rgbled_turn_on>:
void rgbled_turn_off(RgbLedColor_t color) {
	PORTB |= color;
}

void rgbled_turn_on(RgbLedColor_t color) {
	PORTB &= ~color;
     b10:	95 b1       	in	r25, 0x05	; 5
     b12:	80 95       	com	r24
     b14:	98 23       	and	r25, r24
     b16:	95 b9       	out	0x05, r25	; 5
     b18:	08 95       	ret

00000b1a <__vector_17>:

uint16_t timer_elapsed_ms(timer_t timer) {
	return elapsed_microseconds[timer] / 1000;
}

ISR(TIMER0_OVF_vect) {
     b1a:	1f 92       	push	r1
     b1c:	0f 92       	push	r0
     b1e:	0f b6       	in	r0, 0x3f	; 63
     b20:	0f 92       	push	r0
     b22:	11 24       	eor	r1, r1
     b24:	0b b6       	in	r0, 0x3b	; 59
     b26:	0f 92       	push	r0
     b28:	2f 93       	push	r18
     b2a:	3f 93       	push	r19
     b2c:	4f 93       	push	r20
     b2e:	5f 93       	push	r21
     b30:	6f 93       	push	r22
     b32:	7f 93       	push	r23
     b34:	8f 93       	push	r24
     b36:	af 93       	push	r26
     b38:	bf 93       	push	r27
     b3a:	ef 93       	push	r30
     b3c:	ff 93       	push	r31
     b3e:	ae ea       	ldi	r26, 0xAE	; 174
     b40:	b2 e0       	ldi	r27, 0x02	; 2
     b42:	ee e8       	ldi	r30, 0x8E	; 142
     b44:	f2 e0       	ldi	r31, 0x02	; 2
     b46:	2e ea       	ldi	r18, 0xAE	; 174
     b48:	32 e0       	ldi	r19, 0x02	; 2
	for (int t = 0; t < NUMBER_OF_TIMERS; t++) {
		if (timer_enabled[t]){
     b4a:	8d 91       	ld	r24, X+
     b4c:	88 23       	and	r24, r24
     b4e:	59 f0       	breq	.+22     	; 0xb66 <__vector_17+0x4c>
			elapsed_microseconds[t] += (1000000ULL * 256 * 256) / F_CPU;
     b50:	40 81       	ld	r20, Z
     b52:	51 81       	ldd	r21, Z+1	; 0x01
     b54:	62 81       	ldd	r22, Z+2	; 0x02
     b56:	73 81       	ldd	r23, Z+3	; 0x03
     b58:	50 5e       	subi	r21, 0xE0	; 224
     b5a:	6f 4f       	sbci	r22, 0xFF	; 255
     b5c:	7f 4f       	sbci	r23, 0xFF	; 255
     b5e:	40 83       	st	Z, r20
     b60:	51 83       	std	Z+1, r21	; 0x01
     b62:	62 83       	std	Z+2, r22	; 0x02
     b64:	73 83       	std	Z+3, r23	; 0x03
     b66:	34 96       	adiw	r30, 0x04	; 4
uint16_t timer_elapsed_ms(timer_t timer) {
	return elapsed_microseconds[timer] / 1000;
}

ISR(TIMER0_OVF_vect) {
	for (int t = 0; t < NUMBER_OF_TIMERS; t++) {
     b68:	e2 17       	cp	r30, r18
     b6a:	f3 07       	cpc	r31, r19
     b6c:	71 f7       	brne	.-36     	; 0xb4a <__vector_17+0x30>
		if (timer_enabled[t]){
			elapsed_microseconds[t] += (1000000ULL * 256 * 256) / F_CPU;
		}
	}
}
     b6e:	ff 91       	pop	r31
     b70:	ef 91       	pop	r30
     b72:	bf 91       	pop	r27
     b74:	af 91       	pop	r26
     b76:	8f 91       	pop	r24
     b78:	7f 91       	pop	r23
     b7a:	6f 91       	pop	r22
     b7c:	5f 91       	pop	r21
     b7e:	4f 91       	pop	r20
     b80:	3f 91       	pop	r19
     b82:	2f 91       	pop	r18
     b84:	0f 90       	pop	r0
     b86:	0b be       	out	0x3b, r0	; 59
     b88:	0f 90       	pop	r0
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	0f 90       	pop	r0
     b8e:	1f 90       	pop	r1
     b90:	18 95       	reti

00000b92 <usbdbg_tx_char>:
	fdevopen(usbdbg_tx_char, NULL);
}

int usbdbg_tx_char(char c, FILE* stream)
{
	while (!(UCSR0A & (1 << UDRE0))) { }; // Wait until data register is empty
     b92:	e0 ec       	ldi	r30, 0xC0	; 192
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	90 81       	ld	r25, Z
     b98:	95 ff       	sbrs	r25, 5
     b9a:	fd cf       	rjmp	.-6      	; 0xb96 <usbdbg_tx_char+0x4>
	UDR0 = c;
     b9c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 1;
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	08 95       	ret

00000ba6 <usbdbg_init>:
#include <stdlib.h>

void usbdbg_init()
{
	const uint32_t baud_rate = 500000;
	UBRR0 = (F_CPU / 16) / baud_rate - 1;
     ba6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     baa:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C = (3 << UCSZ0);	// 8 bit transfer
     bae:	86 e0       	ldi	r24, 0x06	; 6
     bb0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B |= (1 << TXEN0); // Enable transmit
     bb4:	e1 ec       	ldi	r30, 0xC1	; 193
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	88 60       	ori	r24, 0x08	; 8
     bbc:	80 83       	st	Z, r24
	
	fdevopen(usbdbg_tx_char, NULL);
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	89 ec       	ldi	r24, 0xC9	; 201
     bc4:	95 e0       	ldi	r25, 0x05	; 5
     bc6:	1c c2       	rjmp	.+1080   	; 0x1000 <fdevopen>
     bc8:	08 95       	ret

00000bca <__subsf3>:
     bca:	50 58       	subi	r21, 0x80	; 128

00000bcc <__addsf3>:
     bcc:	bb 27       	eor	r27, r27
     bce:	aa 27       	eor	r26, r26
     bd0:	0e d0       	rcall	.+28     	; 0xbee <__addsf3x>
     bd2:	75 c1       	rjmp	.+746    	; 0xebe <__fp_round>
     bd4:	66 d1       	rcall	.+716    	; 0xea2 <__fp_pscA>
     bd6:	30 f0       	brcs	.+12     	; 0xbe4 <__addsf3+0x18>
     bd8:	6b d1       	rcall	.+726    	; 0xeb0 <__fp_pscB>
     bda:	20 f0       	brcs	.+8      	; 0xbe4 <__addsf3+0x18>
     bdc:	31 f4       	brne	.+12     	; 0xbea <__addsf3+0x1e>
     bde:	9f 3f       	cpi	r25, 0xFF	; 255
     be0:	11 f4       	brne	.+4      	; 0xbe6 <__addsf3+0x1a>
     be2:	1e f4       	brtc	.+6      	; 0xbea <__addsf3+0x1e>
     be4:	5b c1       	rjmp	.+694    	; 0xe9c <__fp_nan>
     be6:	0e f4       	brtc	.+2      	; 0xbea <__addsf3+0x1e>
     be8:	e0 95       	com	r30
     bea:	e7 fb       	bst	r30, 7
     bec:	51 c1       	rjmp	.+674    	; 0xe90 <__fp_inf>

00000bee <__addsf3x>:
     bee:	e9 2f       	mov	r30, r25
     bf0:	77 d1       	rcall	.+750    	; 0xee0 <__fp_split3>
     bf2:	80 f3       	brcs	.-32     	; 0xbd4 <__addsf3+0x8>
     bf4:	ba 17       	cp	r27, r26
     bf6:	62 07       	cpc	r22, r18
     bf8:	73 07       	cpc	r23, r19
     bfa:	84 07       	cpc	r24, r20
     bfc:	95 07       	cpc	r25, r21
     bfe:	18 f0       	brcs	.+6      	; 0xc06 <__addsf3x+0x18>
     c00:	71 f4       	brne	.+28     	; 0xc1e <__addsf3x+0x30>
     c02:	9e f5       	brtc	.+102    	; 0xc6a <__addsf3x+0x7c>
     c04:	8f c1       	rjmp	.+798    	; 0xf24 <__fp_zero>
     c06:	0e f4       	brtc	.+2      	; 0xc0a <__addsf3x+0x1c>
     c08:	e0 95       	com	r30
     c0a:	0b 2e       	mov	r0, r27
     c0c:	ba 2f       	mov	r27, r26
     c0e:	a0 2d       	mov	r26, r0
     c10:	0b 01       	movw	r0, r22
     c12:	b9 01       	movw	r22, r18
     c14:	90 01       	movw	r18, r0
     c16:	0c 01       	movw	r0, r24
     c18:	ca 01       	movw	r24, r20
     c1a:	a0 01       	movw	r20, r0
     c1c:	11 24       	eor	r1, r1
     c1e:	ff 27       	eor	r31, r31
     c20:	59 1b       	sub	r21, r25
     c22:	99 f0       	breq	.+38     	; 0xc4a <__addsf3x+0x5c>
     c24:	59 3f       	cpi	r21, 0xF9	; 249
     c26:	50 f4       	brcc	.+20     	; 0xc3c <__addsf3x+0x4e>
     c28:	50 3e       	cpi	r21, 0xE0	; 224
     c2a:	68 f1       	brcs	.+90     	; 0xc86 <__addsf3x+0x98>
     c2c:	1a 16       	cp	r1, r26
     c2e:	f0 40       	sbci	r31, 0x00	; 0
     c30:	a2 2f       	mov	r26, r18
     c32:	23 2f       	mov	r18, r19
     c34:	34 2f       	mov	r19, r20
     c36:	44 27       	eor	r20, r20
     c38:	58 5f       	subi	r21, 0xF8	; 248
     c3a:	f3 cf       	rjmp	.-26     	; 0xc22 <__addsf3x+0x34>
     c3c:	46 95       	lsr	r20
     c3e:	37 95       	ror	r19
     c40:	27 95       	ror	r18
     c42:	a7 95       	ror	r26
     c44:	f0 40       	sbci	r31, 0x00	; 0
     c46:	53 95       	inc	r21
     c48:	c9 f7       	brne	.-14     	; 0xc3c <__addsf3x+0x4e>
     c4a:	7e f4       	brtc	.+30     	; 0xc6a <__addsf3x+0x7c>
     c4c:	1f 16       	cp	r1, r31
     c4e:	ba 0b       	sbc	r27, r26
     c50:	62 0b       	sbc	r22, r18
     c52:	73 0b       	sbc	r23, r19
     c54:	84 0b       	sbc	r24, r20
     c56:	ba f0       	brmi	.+46     	; 0xc86 <__addsf3x+0x98>
     c58:	91 50       	subi	r25, 0x01	; 1
     c5a:	a1 f0       	breq	.+40     	; 0xc84 <__addsf3x+0x96>
     c5c:	ff 0f       	add	r31, r31
     c5e:	bb 1f       	adc	r27, r27
     c60:	66 1f       	adc	r22, r22
     c62:	77 1f       	adc	r23, r23
     c64:	88 1f       	adc	r24, r24
     c66:	c2 f7       	brpl	.-16     	; 0xc58 <__addsf3x+0x6a>
     c68:	0e c0       	rjmp	.+28     	; 0xc86 <__addsf3x+0x98>
     c6a:	ba 0f       	add	r27, r26
     c6c:	62 1f       	adc	r22, r18
     c6e:	73 1f       	adc	r23, r19
     c70:	84 1f       	adc	r24, r20
     c72:	48 f4       	brcc	.+18     	; 0xc86 <__addsf3x+0x98>
     c74:	87 95       	ror	r24
     c76:	77 95       	ror	r23
     c78:	67 95       	ror	r22
     c7a:	b7 95       	ror	r27
     c7c:	f7 95       	ror	r31
     c7e:	9e 3f       	cpi	r25, 0xFE	; 254
     c80:	08 f0       	brcs	.+2      	; 0xc84 <__addsf3x+0x96>
     c82:	b3 cf       	rjmp	.-154    	; 0xbea <__addsf3+0x1e>
     c84:	93 95       	inc	r25
     c86:	88 0f       	add	r24, r24
     c88:	08 f0       	brcs	.+2      	; 0xc8c <__addsf3x+0x9e>
     c8a:	99 27       	eor	r25, r25
     c8c:	ee 0f       	add	r30, r30
     c8e:	97 95       	ror	r25
     c90:	87 95       	ror	r24
     c92:	08 95       	ret

00000c94 <__cmpsf2>:
     c94:	d9 d0       	rcall	.+434    	; 0xe48 <__fp_cmp>
     c96:	08 f4       	brcc	.+2      	; 0xc9a <__cmpsf2+0x6>
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	08 95       	ret

00000c9c <__divsf3>:
     c9c:	0c d0       	rcall	.+24     	; 0xcb6 <__divsf3x>
     c9e:	0f c1       	rjmp	.+542    	; 0xebe <__fp_round>
     ca0:	07 d1       	rcall	.+526    	; 0xeb0 <__fp_pscB>
     ca2:	40 f0       	brcs	.+16     	; 0xcb4 <__divsf3+0x18>
     ca4:	fe d0       	rcall	.+508    	; 0xea2 <__fp_pscA>
     ca6:	30 f0       	brcs	.+12     	; 0xcb4 <__divsf3+0x18>
     ca8:	21 f4       	brne	.+8      	; 0xcb2 <__divsf3+0x16>
     caa:	5f 3f       	cpi	r21, 0xFF	; 255
     cac:	19 f0       	breq	.+6      	; 0xcb4 <__divsf3+0x18>
     cae:	f0 c0       	rjmp	.+480    	; 0xe90 <__fp_inf>
     cb0:	51 11       	cpse	r21, r1
     cb2:	39 c1       	rjmp	.+626    	; 0xf26 <__fp_szero>
     cb4:	f3 c0       	rjmp	.+486    	; 0xe9c <__fp_nan>

00000cb6 <__divsf3x>:
     cb6:	14 d1       	rcall	.+552    	; 0xee0 <__fp_split3>
     cb8:	98 f3       	brcs	.-26     	; 0xca0 <__divsf3+0x4>

00000cba <__divsf3_pse>:
     cba:	99 23       	and	r25, r25
     cbc:	c9 f3       	breq	.-14     	; 0xcb0 <__divsf3+0x14>
     cbe:	55 23       	and	r21, r21
     cc0:	b1 f3       	breq	.-20     	; 0xcae <__divsf3+0x12>
     cc2:	95 1b       	sub	r25, r21
     cc4:	55 0b       	sbc	r21, r21
     cc6:	bb 27       	eor	r27, r27
     cc8:	aa 27       	eor	r26, r26
     cca:	62 17       	cp	r22, r18
     ccc:	73 07       	cpc	r23, r19
     cce:	84 07       	cpc	r24, r20
     cd0:	38 f0       	brcs	.+14     	; 0xce0 <__divsf3_pse+0x26>
     cd2:	9f 5f       	subi	r25, 0xFF	; 255
     cd4:	5f 4f       	sbci	r21, 0xFF	; 255
     cd6:	22 0f       	add	r18, r18
     cd8:	33 1f       	adc	r19, r19
     cda:	44 1f       	adc	r20, r20
     cdc:	aa 1f       	adc	r26, r26
     cde:	a9 f3       	breq	.-22     	; 0xcca <__divsf3_pse+0x10>
     ce0:	33 d0       	rcall	.+102    	; 0xd48 <__divsf3_pse+0x8e>
     ce2:	0e 2e       	mov	r0, r30
     ce4:	3a f0       	brmi	.+14     	; 0xcf4 <__divsf3_pse+0x3a>
     ce6:	e0 e8       	ldi	r30, 0x80	; 128
     ce8:	30 d0       	rcall	.+96     	; 0xd4a <__divsf3_pse+0x90>
     cea:	91 50       	subi	r25, 0x01	; 1
     cec:	50 40       	sbci	r21, 0x00	; 0
     cee:	e6 95       	lsr	r30
     cf0:	00 1c       	adc	r0, r0
     cf2:	ca f7       	brpl	.-14     	; 0xce6 <__divsf3_pse+0x2c>
     cf4:	29 d0       	rcall	.+82     	; 0xd48 <__divsf3_pse+0x8e>
     cf6:	fe 2f       	mov	r31, r30
     cf8:	27 d0       	rcall	.+78     	; 0xd48 <__divsf3_pse+0x8e>
     cfa:	66 0f       	add	r22, r22
     cfc:	77 1f       	adc	r23, r23
     cfe:	88 1f       	adc	r24, r24
     d00:	bb 1f       	adc	r27, r27
     d02:	26 17       	cp	r18, r22
     d04:	37 07       	cpc	r19, r23
     d06:	48 07       	cpc	r20, r24
     d08:	ab 07       	cpc	r26, r27
     d0a:	b0 e8       	ldi	r27, 0x80	; 128
     d0c:	09 f0       	breq	.+2      	; 0xd10 <__divsf3_pse+0x56>
     d0e:	bb 0b       	sbc	r27, r27
     d10:	80 2d       	mov	r24, r0
     d12:	bf 01       	movw	r22, r30
     d14:	ff 27       	eor	r31, r31
     d16:	93 58       	subi	r25, 0x83	; 131
     d18:	5f 4f       	sbci	r21, 0xFF	; 255
     d1a:	2a f0       	brmi	.+10     	; 0xd26 <__divsf3_pse+0x6c>
     d1c:	9e 3f       	cpi	r25, 0xFE	; 254
     d1e:	51 05       	cpc	r21, r1
     d20:	68 f0       	brcs	.+26     	; 0xd3c <__divsf3_pse+0x82>
     d22:	b6 c0       	rjmp	.+364    	; 0xe90 <__fp_inf>
     d24:	00 c1       	rjmp	.+512    	; 0xf26 <__fp_szero>
     d26:	5f 3f       	cpi	r21, 0xFF	; 255
     d28:	ec f3       	brlt	.-6      	; 0xd24 <__divsf3_pse+0x6a>
     d2a:	98 3e       	cpi	r25, 0xE8	; 232
     d2c:	dc f3       	brlt	.-10     	; 0xd24 <__divsf3_pse+0x6a>
     d2e:	86 95       	lsr	r24
     d30:	77 95       	ror	r23
     d32:	67 95       	ror	r22
     d34:	b7 95       	ror	r27
     d36:	f7 95       	ror	r31
     d38:	9f 5f       	subi	r25, 0xFF	; 255
     d3a:	c9 f7       	brne	.-14     	; 0xd2e <__divsf3_pse+0x74>
     d3c:	88 0f       	add	r24, r24
     d3e:	91 1d       	adc	r25, r1
     d40:	96 95       	lsr	r25
     d42:	87 95       	ror	r24
     d44:	97 f9       	bld	r25, 7
     d46:	08 95       	ret
     d48:	e1 e0       	ldi	r30, 0x01	; 1
     d4a:	66 0f       	add	r22, r22
     d4c:	77 1f       	adc	r23, r23
     d4e:	88 1f       	adc	r24, r24
     d50:	bb 1f       	adc	r27, r27
     d52:	62 17       	cp	r22, r18
     d54:	73 07       	cpc	r23, r19
     d56:	84 07       	cpc	r24, r20
     d58:	ba 07       	cpc	r27, r26
     d5a:	20 f0       	brcs	.+8      	; 0xd64 <__divsf3_pse+0xaa>
     d5c:	62 1b       	sub	r22, r18
     d5e:	73 0b       	sbc	r23, r19
     d60:	84 0b       	sbc	r24, r20
     d62:	ba 0b       	sbc	r27, r26
     d64:	ee 1f       	adc	r30, r30
     d66:	88 f7       	brcc	.-30     	; 0xd4a <__divsf3_pse+0x90>
     d68:	e0 95       	com	r30
     d6a:	08 95       	ret

00000d6c <__fixsfsi>:
     d6c:	04 d0       	rcall	.+8      	; 0xd76 <__fixunssfsi>
     d6e:	68 94       	set
     d70:	b1 11       	cpse	r27, r1
     d72:	d9 c0       	rjmp	.+434    	; 0xf26 <__fp_szero>
     d74:	08 95       	ret

00000d76 <__fixunssfsi>:
     d76:	bc d0       	rcall	.+376    	; 0xef0 <__fp_splitA>
     d78:	88 f0       	brcs	.+34     	; 0xd9c <__fixunssfsi+0x26>
     d7a:	9f 57       	subi	r25, 0x7F	; 127
     d7c:	90 f0       	brcs	.+36     	; 0xda2 <__fixunssfsi+0x2c>
     d7e:	b9 2f       	mov	r27, r25
     d80:	99 27       	eor	r25, r25
     d82:	b7 51       	subi	r27, 0x17	; 23
     d84:	a0 f0       	brcs	.+40     	; 0xdae <__fixunssfsi+0x38>
     d86:	d1 f0       	breq	.+52     	; 0xdbc <__fixunssfsi+0x46>
     d88:	66 0f       	add	r22, r22
     d8a:	77 1f       	adc	r23, r23
     d8c:	88 1f       	adc	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	1a f0       	brmi	.+6      	; 0xd98 <__fixunssfsi+0x22>
     d92:	ba 95       	dec	r27
     d94:	c9 f7       	brne	.-14     	; 0xd88 <__fixunssfsi+0x12>
     d96:	12 c0       	rjmp	.+36     	; 0xdbc <__fixunssfsi+0x46>
     d98:	b1 30       	cpi	r27, 0x01	; 1
     d9a:	81 f0       	breq	.+32     	; 0xdbc <__fixunssfsi+0x46>
     d9c:	c3 d0       	rcall	.+390    	; 0xf24 <__fp_zero>
     d9e:	b1 e0       	ldi	r27, 0x01	; 1
     da0:	08 95       	ret
     da2:	c0 c0       	rjmp	.+384    	; 0xf24 <__fp_zero>
     da4:	67 2f       	mov	r22, r23
     da6:	78 2f       	mov	r23, r24
     da8:	88 27       	eor	r24, r24
     daa:	b8 5f       	subi	r27, 0xF8	; 248
     dac:	39 f0       	breq	.+14     	; 0xdbc <__fixunssfsi+0x46>
     dae:	b9 3f       	cpi	r27, 0xF9	; 249
     db0:	cc f3       	brlt	.-14     	; 0xda4 <__fixunssfsi+0x2e>
     db2:	86 95       	lsr	r24
     db4:	77 95       	ror	r23
     db6:	67 95       	ror	r22
     db8:	b3 95       	inc	r27
     dba:	d9 f7       	brne	.-10     	; 0xdb2 <__fixunssfsi+0x3c>
     dbc:	3e f4       	brtc	.+14     	; 0xdcc <__fixunssfsi+0x56>
     dbe:	90 95       	com	r25
     dc0:	80 95       	com	r24
     dc2:	70 95       	com	r23
     dc4:	61 95       	neg	r22
     dc6:	7f 4f       	sbci	r23, 0xFF	; 255
     dc8:	8f 4f       	sbci	r24, 0xFF	; 255
     dca:	9f 4f       	sbci	r25, 0xFF	; 255
     dcc:	08 95       	ret

00000dce <__floatunsisf>:
     dce:	e8 94       	clt
     dd0:	09 c0       	rjmp	.+18     	; 0xde4 <__floatsisf+0x12>

00000dd2 <__floatsisf>:
     dd2:	97 fb       	bst	r25, 7
     dd4:	3e f4       	brtc	.+14     	; 0xde4 <__floatsisf+0x12>
     dd6:	90 95       	com	r25
     dd8:	80 95       	com	r24
     dda:	70 95       	com	r23
     ddc:	61 95       	neg	r22
     dde:	7f 4f       	sbci	r23, 0xFF	; 255
     de0:	8f 4f       	sbci	r24, 0xFF	; 255
     de2:	9f 4f       	sbci	r25, 0xFF	; 255
     de4:	99 23       	and	r25, r25
     de6:	a9 f0       	breq	.+42     	; 0xe12 <__floatsisf+0x40>
     de8:	f9 2f       	mov	r31, r25
     dea:	96 e9       	ldi	r25, 0x96	; 150
     dec:	bb 27       	eor	r27, r27
     dee:	93 95       	inc	r25
     df0:	f6 95       	lsr	r31
     df2:	87 95       	ror	r24
     df4:	77 95       	ror	r23
     df6:	67 95       	ror	r22
     df8:	b7 95       	ror	r27
     dfa:	f1 11       	cpse	r31, r1
     dfc:	f8 cf       	rjmp	.-16     	; 0xdee <__floatsisf+0x1c>
     dfe:	fa f4       	brpl	.+62     	; 0xe3e <__floatsisf+0x6c>
     e00:	bb 0f       	add	r27, r27
     e02:	11 f4       	brne	.+4      	; 0xe08 <__floatsisf+0x36>
     e04:	60 ff       	sbrs	r22, 0
     e06:	1b c0       	rjmp	.+54     	; 0xe3e <__floatsisf+0x6c>
     e08:	6f 5f       	subi	r22, 0xFF	; 255
     e0a:	7f 4f       	sbci	r23, 0xFF	; 255
     e0c:	8f 4f       	sbci	r24, 0xFF	; 255
     e0e:	9f 4f       	sbci	r25, 0xFF	; 255
     e10:	16 c0       	rjmp	.+44     	; 0xe3e <__floatsisf+0x6c>
     e12:	88 23       	and	r24, r24
     e14:	11 f0       	breq	.+4      	; 0xe1a <__floatsisf+0x48>
     e16:	96 e9       	ldi	r25, 0x96	; 150
     e18:	11 c0       	rjmp	.+34     	; 0xe3c <__floatsisf+0x6a>
     e1a:	77 23       	and	r23, r23
     e1c:	21 f0       	breq	.+8      	; 0xe26 <__floatsisf+0x54>
     e1e:	9e e8       	ldi	r25, 0x8E	; 142
     e20:	87 2f       	mov	r24, r23
     e22:	76 2f       	mov	r23, r22
     e24:	05 c0       	rjmp	.+10     	; 0xe30 <__floatsisf+0x5e>
     e26:	66 23       	and	r22, r22
     e28:	71 f0       	breq	.+28     	; 0xe46 <__floatsisf+0x74>
     e2a:	96 e8       	ldi	r25, 0x86	; 134
     e2c:	86 2f       	mov	r24, r22
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	60 e0       	ldi	r22, 0x00	; 0
     e32:	2a f0       	brmi	.+10     	; 0xe3e <__floatsisf+0x6c>
     e34:	9a 95       	dec	r25
     e36:	66 0f       	add	r22, r22
     e38:	77 1f       	adc	r23, r23
     e3a:	88 1f       	adc	r24, r24
     e3c:	da f7       	brpl	.-10     	; 0xe34 <__floatsisf+0x62>
     e3e:	88 0f       	add	r24, r24
     e40:	96 95       	lsr	r25
     e42:	87 95       	ror	r24
     e44:	97 f9       	bld	r25, 7
     e46:	08 95       	ret

00000e48 <__fp_cmp>:
     e48:	99 0f       	add	r25, r25
     e4a:	00 08       	sbc	r0, r0
     e4c:	55 0f       	add	r21, r21
     e4e:	aa 0b       	sbc	r26, r26
     e50:	e0 e8       	ldi	r30, 0x80	; 128
     e52:	fe ef       	ldi	r31, 0xFE	; 254
     e54:	16 16       	cp	r1, r22
     e56:	17 06       	cpc	r1, r23
     e58:	e8 07       	cpc	r30, r24
     e5a:	f9 07       	cpc	r31, r25
     e5c:	c0 f0       	brcs	.+48     	; 0xe8e <__fp_cmp+0x46>
     e5e:	12 16       	cp	r1, r18
     e60:	13 06       	cpc	r1, r19
     e62:	e4 07       	cpc	r30, r20
     e64:	f5 07       	cpc	r31, r21
     e66:	98 f0       	brcs	.+38     	; 0xe8e <__fp_cmp+0x46>
     e68:	62 1b       	sub	r22, r18
     e6a:	73 0b       	sbc	r23, r19
     e6c:	84 0b       	sbc	r24, r20
     e6e:	95 0b       	sbc	r25, r21
     e70:	39 f4       	brne	.+14     	; 0xe80 <__fp_cmp+0x38>
     e72:	0a 26       	eor	r0, r26
     e74:	61 f0       	breq	.+24     	; 0xe8e <__fp_cmp+0x46>
     e76:	23 2b       	or	r18, r19
     e78:	24 2b       	or	r18, r20
     e7a:	25 2b       	or	r18, r21
     e7c:	21 f4       	brne	.+8      	; 0xe86 <__fp_cmp+0x3e>
     e7e:	08 95       	ret
     e80:	0a 26       	eor	r0, r26
     e82:	09 f4       	brne	.+2      	; 0xe86 <__fp_cmp+0x3e>
     e84:	a1 40       	sbci	r26, 0x01	; 1
     e86:	a6 95       	lsr	r26
     e88:	8f ef       	ldi	r24, 0xFF	; 255
     e8a:	81 1d       	adc	r24, r1
     e8c:	81 1d       	adc	r24, r1
     e8e:	08 95       	ret

00000e90 <__fp_inf>:
     e90:	97 f9       	bld	r25, 7
     e92:	9f 67       	ori	r25, 0x7F	; 127
     e94:	80 e8       	ldi	r24, 0x80	; 128
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	60 e0       	ldi	r22, 0x00	; 0
     e9a:	08 95       	ret

00000e9c <__fp_nan>:
     e9c:	9f ef       	ldi	r25, 0xFF	; 255
     e9e:	80 ec       	ldi	r24, 0xC0	; 192
     ea0:	08 95       	ret

00000ea2 <__fp_pscA>:
     ea2:	00 24       	eor	r0, r0
     ea4:	0a 94       	dec	r0
     ea6:	16 16       	cp	r1, r22
     ea8:	17 06       	cpc	r1, r23
     eaa:	18 06       	cpc	r1, r24
     eac:	09 06       	cpc	r0, r25
     eae:	08 95       	ret

00000eb0 <__fp_pscB>:
     eb0:	00 24       	eor	r0, r0
     eb2:	0a 94       	dec	r0
     eb4:	12 16       	cp	r1, r18
     eb6:	13 06       	cpc	r1, r19
     eb8:	14 06       	cpc	r1, r20
     eba:	05 06       	cpc	r0, r21
     ebc:	08 95       	ret

00000ebe <__fp_round>:
     ebe:	09 2e       	mov	r0, r25
     ec0:	03 94       	inc	r0
     ec2:	00 0c       	add	r0, r0
     ec4:	11 f4       	brne	.+4      	; 0xeca <__fp_round+0xc>
     ec6:	88 23       	and	r24, r24
     ec8:	52 f0       	brmi	.+20     	; 0xede <__fp_round+0x20>
     eca:	bb 0f       	add	r27, r27
     ecc:	40 f4       	brcc	.+16     	; 0xede <__fp_round+0x20>
     ece:	bf 2b       	or	r27, r31
     ed0:	11 f4       	brne	.+4      	; 0xed6 <__fp_round+0x18>
     ed2:	60 ff       	sbrs	r22, 0
     ed4:	04 c0       	rjmp	.+8      	; 0xede <__fp_round+0x20>
     ed6:	6f 5f       	subi	r22, 0xFF	; 255
     ed8:	7f 4f       	sbci	r23, 0xFF	; 255
     eda:	8f 4f       	sbci	r24, 0xFF	; 255
     edc:	9f 4f       	sbci	r25, 0xFF	; 255
     ede:	08 95       	ret

00000ee0 <__fp_split3>:
     ee0:	57 fd       	sbrc	r21, 7
     ee2:	90 58       	subi	r25, 0x80	; 128
     ee4:	44 0f       	add	r20, r20
     ee6:	55 1f       	adc	r21, r21
     ee8:	59 f0       	breq	.+22     	; 0xf00 <__fp_splitA+0x10>
     eea:	5f 3f       	cpi	r21, 0xFF	; 255
     eec:	71 f0       	breq	.+28     	; 0xf0a <__fp_splitA+0x1a>
     eee:	47 95       	ror	r20

00000ef0 <__fp_splitA>:
     ef0:	88 0f       	add	r24, r24
     ef2:	97 fb       	bst	r25, 7
     ef4:	99 1f       	adc	r25, r25
     ef6:	61 f0       	breq	.+24     	; 0xf10 <__fp_splitA+0x20>
     ef8:	9f 3f       	cpi	r25, 0xFF	; 255
     efa:	79 f0       	breq	.+30     	; 0xf1a <__fp_splitA+0x2a>
     efc:	87 95       	ror	r24
     efe:	08 95       	ret
     f00:	12 16       	cp	r1, r18
     f02:	13 06       	cpc	r1, r19
     f04:	14 06       	cpc	r1, r20
     f06:	55 1f       	adc	r21, r21
     f08:	f2 cf       	rjmp	.-28     	; 0xeee <__fp_split3+0xe>
     f0a:	46 95       	lsr	r20
     f0c:	f1 df       	rcall	.-30     	; 0xef0 <__fp_splitA>
     f0e:	08 c0       	rjmp	.+16     	; 0xf20 <__fp_splitA+0x30>
     f10:	16 16       	cp	r1, r22
     f12:	17 06       	cpc	r1, r23
     f14:	18 06       	cpc	r1, r24
     f16:	99 1f       	adc	r25, r25
     f18:	f1 cf       	rjmp	.-30     	; 0xefc <__fp_splitA+0xc>
     f1a:	86 95       	lsr	r24
     f1c:	71 05       	cpc	r23, r1
     f1e:	61 05       	cpc	r22, r1
     f20:	08 94       	sec
     f22:	08 95       	ret

00000f24 <__fp_zero>:
     f24:	e8 94       	clt

00000f26 <__fp_szero>:
     f26:	bb 27       	eor	r27, r27
     f28:	66 27       	eor	r22, r22
     f2a:	77 27       	eor	r23, r23
     f2c:	cb 01       	movw	r24, r22
     f2e:	97 f9       	bld	r25, 7
     f30:	08 95       	ret

00000f32 <__gesf2>:
     f32:	8a df       	rcall	.-236    	; 0xe48 <__fp_cmp>
     f34:	08 f4       	brcc	.+2      	; 0xf38 <__gesf2+0x6>
     f36:	8f ef       	ldi	r24, 0xFF	; 255
     f38:	08 95       	ret

00000f3a <__mulsf3>:
     f3a:	0b d0       	rcall	.+22     	; 0xf52 <__mulsf3x>
     f3c:	c0 cf       	rjmp	.-128    	; 0xebe <__fp_round>
     f3e:	b1 df       	rcall	.-158    	; 0xea2 <__fp_pscA>
     f40:	28 f0       	brcs	.+10     	; 0xf4c <__mulsf3+0x12>
     f42:	b6 df       	rcall	.-148    	; 0xeb0 <__fp_pscB>
     f44:	18 f0       	brcs	.+6      	; 0xf4c <__mulsf3+0x12>
     f46:	95 23       	and	r25, r21
     f48:	09 f0       	breq	.+2      	; 0xf4c <__mulsf3+0x12>
     f4a:	a2 cf       	rjmp	.-188    	; 0xe90 <__fp_inf>
     f4c:	a7 cf       	rjmp	.-178    	; 0xe9c <__fp_nan>
     f4e:	11 24       	eor	r1, r1
     f50:	ea cf       	rjmp	.-44     	; 0xf26 <__fp_szero>

00000f52 <__mulsf3x>:
     f52:	c6 df       	rcall	.-116    	; 0xee0 <__fp_split3>
     f54:	a0 f3       	brcs	.-24     	; 0xf3e <__mulsf3+0x4>

00000f56 <__mulsf3_pse>:
     f56:	95 9f       	mul	r25, r21
     f58:	d1 f3       	breq	.-12     	; 0xf4e <__mulsf3+0x14>
     f5a:	95 0f       	add	r25, r21
     f5c:	50 e0       	ldi	r21, 0x00	; 0
     f5e:	55 1f       	adc	r21, r21
     f60:	62 9f       	mul	r22, r18
     f62:	f0 01       	movw	r30, r0
     f64:	72 9f       	mul	r23, r18
     f66:	bb 27       	eor	r27, r27
     f68:	f0 0d       	add	r31, r0
     f6a:	b1 1d       	adc	r27, r1
     f6c:	63 9f       	mul	r22, r19
     f6e:	aa 27       	eor	r26, r26
     f70:	f0 0d       	add	r31, r0
     f72:	b1 1d       	adc	r27, r1
     f74:	aa 1f       	adc	r26, r26
     f76:	64 9f       	mul	r22, r20
     f78:	66 27       	eor	r22, r22
     f7a:	b0 0d       	add	r27, r0
     f7c:	a1 1d       	adc	r26, r1
     f7e:	66 1f       	adc	r22, r22
     f80:	82 9f       	mul	r24, r18
     f82:	22 27       	eor	r18, r18
     f84:	b0 0d       	add	r27, r0
     f86:	a1 1d       	adc	r26, r1
     f88:	62 1f       	adc	r22, r18
     f8a:	73 9f       	mul	r23, r19
     f8c:	b0 0d       	add	r27, r0
     f8e:	a1 1d       	adc	r26, r1
     f90:	62 1f       	adc	r22, r18
     f92:	83 9f       	mul	r24, r19
     f94:	a0 0d       	add	r26, r0
     f96:	61 1d       	adc	r22, r1
     f98:	22 1f       	adc	r18, r18
     f9a:	74 9f       	mul	r23, r20
     f9c:	33 27       	eor	r19, r19
     f9e:	a0 0d       	add	r26, r0
     fa0:	61 1d       	adc	r22, r1
     fa2:	23 1f       	adc	r18, r19
     fa4:	84 9f       	mul	r24, r20
     fa6:	60 0d       	add	r22, r0
     fa8:	21 1d       	adc	r18, r1
     faa:	82 2f       	mov	r24, r18
     fac:	76 2f       	mov	r23, r22
     fae:	6a 2f       	mov	r22, r26
     fb0:	11 24       	eor	r1, r1
     fb2:	9f 57       	subi	r25, 0x7F	; 127
     fb4:	50 40       	sbci	r21, 0x00	; 0
     fb6:	8a f0       	brmi	.+34     	; 0xfda <__mulsf3_pse+0x84>
     fb8:	e1 f0       	breq	.+56     	; 0xff2 <__mulsf3_pse+0x9c>
     fba:	88 23       	and	r24, r24
     fbc:	4a f0       	brmi	.+18     	; 0xfd0 <__mulsf3_pse+0x7a>
     fbe:	ee 0f       	add	r30, r30
     fc0:	ff 1f       	adc	r31, r31
     fc2:	bb 1f       	adc	r27, r27
     fc4:	66 1f       	adc	r22, r22
     fc6:	77 1f       	adc	r23, r23
     fc8:	88 1f       	adc	r24, r24
     fca:	91 50       	subi	r25, 0x01	; 1
     fcc:	50 40       	sbci	r21, 0x00	; 0
     fce:	a9 f7       	brne	.-22     	; 0xfba <__mulsf3_pse+0x64>
     fd0:	9e 3f       	cpi	r25, 0xFE	; 254
     fd2:	51 05       	cpc	r21, r1
     fd4:	70 f0       	brcs	.+28     	; 0xff2 <__mulsf3_pse+0x9c>
     fd6:	5c cf       	rjmp	.-328    	; 0xe90 <__fp_inf>
     fd8:	a6 cf       	rjmp	.-180    	; 0xf26 <__fp_szero>
     fda:	5f 3f       	cpi	r21, 0xFF	; 255
     fdc:	ec f3       	brlt	.-6      	; 0xfd8 <__mulsf3_pse+0x82>
     fde:	98 3e       	cpi	r25, 0xE8	; 232
     fe0:	dc f3       	brlt	.-10     	; 0xfd8 <__mulsf3_pse+0x82>
     fe2:	86 95       	lsr	r24
     fe4:	77 95       	ror	r23
     fe6:	67 95       	ror	r22
     fe8:	b7 95       	ror	r27
     fea:	f7 95       	ror	r31
     fec:	e7 95       	ror	r30
     fee:	9f 5f       	subi	r25, 0xFF	; 255
     ff0:	c1 f7       	brne	.-16     	; 0xfe2 <__mulsf3_pse+0x8c>
     ff2:	fe 2b       	or	r31, r30
     ff4:	88 0f       	add	r24, r24
     ff6:	91 1d       	adc	r25, r1
     ff8:	96 95       	lsr	r25
     ffa:	87 95       	ror	r24
     ffc:	97 f9       	bld	r25, 7
     ffe:	08 95       	ret

00001000 <fdevopen>:
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	31 f4       	brne	.+12     	; 0x1018 <fdevopen+0x18>
    100c:	61 15       	cp	r22, r1
    100e:	71 05       	cpc	r23, r1
    1010:	19 f4       	brne	.+6      	; 0x1018 <fdevopen+0x18>
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	39 c0       	rjmp	.+114    	; 0x108a <fdevopen+0x8a>
    1018:	8b 01       	movw	r16, r22
    101a:	ec 01       	movw	r28, r24
    101c:	6e e0       	ldi	r22, 0x0E	; 14
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	37 d0       	rcall	.+110    	; 0x1094 <calloc>
    1026:	fc 01       	movw	r30, r24
    1028:	89 2b       	or	r24, r25
    102a:	99 f3       	breq	.-26     	; 0x1012 <fdevopen+0x12>
    102c:	80 e8       	ldi	r24, 0x80	; 128
    102e:	83 83       	std	Z+3, r24	; 0x03
    1030:	01 15       	cp	r16, r1
    1032:	11 05       	cpc	r17, r1
    1034:	71 f0       	breq	.+28     	; 0x1052 <fdevopen+0x52>
    1036:	13 87       	std	Z+11, r17	; 0x0b
    1038:	02 87       	std	Z+10, r16	; 0x0a
    103a:	81 e8       	ldi	r24, 0x81	; 129
    103c:	83 83       	std	Z+3, r24	; 0x03
    103e:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <__iob>
    1042:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <__iob+0x1>
    1046:	89 2b       	or	r24, r25
    1048:	21 f4       	brne	.+8      	; 0x1052 <fdevopen+0x52>
    104a:	f0 93 fd 02 	sts	0x02FD, r31	; 0x8002fd <__iob+0x1>
    104e:	e0 93 fc 02 	sts	0x02FC, r30	; 0x8002fc <__iob>
    1052:	20 97       	sbiw	r28, 0x00	; 0
    1054:	c9 f0       	breq	.+50     	; 0x1088 <fdevopen+0x88>
    1056:	d1 87       	std	Z+9, r29	; 0x09
    1058:	c0 87       	std	Z+8, r28	; 0x08
    105a:	83 81       	ldd	r24, Z+3	; 0x03
    105c:	82 60       	ori	r24, 0x02	; 2
    105e:	83 83       	std	Z+3, r24	; 0x03
    1060:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <__iob+0x2>
    1064:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <__iob+0x3>
    1068:	89 2b       	or	r24, r25
    106a:	71 f4       	brne	.+28     	; 0x1088 <fdevopen+0x88>
    106c:	f0 93 ff 02 	sts	0x02FF, r31	; 0x8002ff <__iob+0x3>
    1070:	e0 93 fe 02 	sts	0x02FE, r30	; 0x8002fe <__iob+0x2>
    1074:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <__iob+0x4>
    1078:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <__iob+0x5>
    107c:	89 2b       	or	r24, r25
    107e:	21 f4       	brne	.+8      	; 0x1088 <fdevopen+0x88>
    1080:	f0 93 01 03 	sts	0x0301, r31	; 0x800301 <__iob+0x5>
    1084:	e0 93 00 03 	sts	0x0300, r30	; 0x800300 <__iob+0x4>
    1088:	cf 01       	movw	r24, r30
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	1f 91       	pop	r17
    1090:	0f 91       	pop	r16
    1092:	08 95       	ret

00001094 <calloc>:
    1094:	0f 93       	push	r16
    1096:	1f 93       	push	r17
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	86 9f       	mul	r24, r22
    109e:	80 01       	movw	r16, r0
    10a0:	87 9f       	mul	r24, r23
    10a2:	10 0d       	add	r17, r0
    10a4:	96 9f       	mul	r25, r22
    10a6:	10 0d       	add	r17, r0
    10a8:	11 24       	eor	r1, r1
    10aa:	c8 01       	movw	r24, r16
    10ac:	0d d0       	rcall	.+26     	; 0x10c8 <malloc>
    10ae:	ec 01       	movw	r28, r24
    10b0:	00 97       	sbiw	r24, 0x00	; 0
    10b2:	21 f0       	breq	.+8      	; 0x10bc <calloc+0x28>
    10b4:	a8 01       	movw	r20, r16
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	27 d1       	rcall	.+590    	; 0x130a <memset>
    10bc:	ce 01       	movw	r24, r28
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	1f 91       	pop	r17
    10c4:	0f 91       	pop	r16
    10c6:	08 95       	ret

000010c8 <malloc>:
    10c8:	0f 93       	push	r16
    10ca:	1f 93       	push	r17
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	82 30       	cpi	r24, 0x02	; 2
    10d2:	91 05       	cpc	r25, r1
    10d4:	10 f4       	brcc	.+4      	; 0x10da <malloc+0x12>
    10d6:	82 e0       	ldi	r24, 0x02	; 2
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	e0 91 04 03 	lds	r30, 0x0304	; 0x800304 <__flp>
    10de:	f0 91 05 03 	lds	r31, 0x0305	; 0x800305 <__flp+0x1>
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	a0 e0       	ldi	r26, 0x00	; 0
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	30 97       	sbiw	r30, 0x00	; 0
    10ec:	19 f1       	breq	.+70     	; 0x1134 <__stack+0x35>
    10ee:	40 81       	ld	r20, Z
    10f0:	51 81       	ldd	r21, Z+1	; 0x01
    10f2:	02 81       	ldd	r16, Z+2	; 0x02
    10f4:	13 81       	ldd	r17, Z+3	; 0x03
    10f6:	48 17       	cp	r20, r24
    10f8:	59 07       	cpc	r21, r25
    10fa:	c8 f0       	brcs	.+50     	; 0x112e <__stack+0x2f>
    10fc:	84 17       	cp	r24, r20
    10fe:	95 07       	cpc	r25, r21
    1100:	69 f4       	brne	.+26     	; 0x111c <__stack+0x1d>
    1102:	10 97       	sbiw	r26, 0x00	; 0
    1104:	31 f0       	breq	.+12     	; 0x1112 <__stack+0x13>
    1106:	12 96       	adiw	r26, 0x02	; 2
    1108:	0c 93       	st	X, r16
    110a:	12 97       	sbiw	r26, 0x02	; 2
    110c:	13 96       	adiw	r26, 0x03	; 3
    110e:	1c 93       	st	X, r17
    1110:	27 c0       	rjmp	.+78     	; 0x1160 <__stack+0x61>
    1112:	00 93 04 03 	sts	0x0304, r16	; 0x800304 <__flp>
    1116:	10 93 05 03 	sts	0x0305, r17	; 0x800305 <__flp+0x1>
    111a:	22 c0       	rjmp	.+68     	; 0x1160 <__stack+0x61>
    111c:	21 15       	cp	r18, r1
    111e:	31 05       	cpc	r19, r1
    1120:	19 f0       	breq	.+6      	; 0x1128 <__stack+0x29>
    1122:	42 17       	cp	r20, r18
    1124:	53 07       	cpc	r21, r19
    1126:	18 f4       	brcc	.+6      	; 0x112e <__stack+0x2f>
    1128:	9a 01       	movw	r18, r20
    112a:	bd 01       	movw	r22, r26
    112c:	ef 01       	movw	r28, r30
    112e:	df 01       	movw	r26, r30
    1130:	f8 01       	movw	r30, r16
    1132:	db cf       	rjmp	.-74     	; 0x10ea <malloc+0x22>
    1134:	21 15       	cp	r18, r1
    1136:	31 05       	cpc	r19, r1
    1138:	f9 f0       	breq	.+62     	; 0x1178 <__stack+0x79>
    113a:	28 1b       	sub	r18, r24
    113c:	39 0b       	sbc	r19, r25
    113e:	24 30       	cpi	r18, 0x04	; 4
    1140:	31 05       	cpc	r19, r1
    1142:	80 f4       	brcc	.+32     	; 0x1164 <__stack+0x65>
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	9b 81       	ldd	r25, Y+3	; 0x03
    1148:	61 15       	cp	r22, r1
    114a:	71 05       	cpc	r23, r1
    114c:	21 f0       	breq	.+8      	; 0x1156 <__stack+0x57>
    114e:	fb 01       	movw	r30, r22
    1150:	93 83       	std	Z+3, r25	; 0x03
    1152:	82 83       	std	Z+2, r24	; 0x02
    1154:	04 c0       	rjmp	.+8      	; 0x115e <__stack+0x5f>
    1156:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <__flp+0x1>
    115a:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <__flp>
    115e:	fe 01       	movw	r30, r28
    1160:	32 96       	adiw	r30, 0x02	; 2
    1162:	44 c0       	rjmp	.+136    	; 0x11ec <__stack+0xed>
    1164:	fe 01       	movw	r30, r28
    1166:	e2 0f       	add	r30, r18
    1168:	f3 1f       	adc	r31, r19
    116a:	81 93       	st	Z+, r24
    116c:	91 93       	st	Z+, r25
    116e:	22 50       	subi	r18, 0x02	; 2
    1170:	31 09       	sbc	r19, r1
    1172:	39 83       	std	Y+1, r19	; 0x01
    1174:	28 83       	st	Y, r18
    1176:	3a c0       	rjmp	.+116    	; 0x11ec <__stack+0xed>
    1178:	20 91 02 03 	lds	r18, 0x0302	; 0x800302 <__brkval>
    117c:	30 91 03 03 	lds	r19, 0x0303	; 0x800303 <__brkval+0x1>
    1180:	23 2b       	or	r18, r19
    1182:	41 f4       	brne	.+16     	; 0x1194 <__stack+0x95>
    1184:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1188:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    118c:	30 93 03 03 	sts	0x0303, r19	; 0x800303 <__brkval+0x1>
    1190:	20 93 02 03 	sts	0x0302, r18	; 0x800302 <__brkval>
    1194:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1198:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    119c:	21 15       	cp	r18, r1
    119e:	31 05       	cpc	r19, r1
    11a0:	41 f4       	brne	.+16     	; 0x11b2 <__stack+0xb3>
    11a2:	2d b7       	in	r18, 0x3d	; 61
    11a4:	3e b7       	in	r19, 0x3e	; 62
    11a6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    11aa:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    11ae:	24 1b       	sub	r18, r20
    11b0:	35 0b       	sbc	r19, r21
    11b2:	e0 91 02 03 	lds	r30, 0x0302	; 0x800302 <__brkval>
    11b6:	f0 91 03 03 	lds	r31, 0x0303	; 0x800303 <__brkval+0x1>
    11ba:	e2 17       	cp	r30, r18
    11bc:	f3 07       	cpc	r31, r19
    11be:	a0 f4       	brcc	.+40     	; 0x11e8 <__stack+0xe9>
    11c0:	2e 1b       	sub	r18, r30
    11c2:	3f 0b       	sbc	r19, r31
    11c4:	28 17       	cp	r18, r24
    11c6:	39 07       	cpc	r19, r25
    11c8:	78 f0       	brcs	.+30     	; 0x11e8 <__stack+0xe9>
    11ca:	ac 01       	movw	r20, r24
    11cc:	4e 5f       	subi	r20, 0xFE	; 254
    11ce:	5f 4f       	sbci	r21, 0xFF	; 255
    11d0:	24 17       	cp	r18, r20
    11d2:	35 07       	cpc	r19, r21
    11d4:	48 f0       	brcs	.+18     	; 0x11e8 <__stack+0xe9>
    11d6:	4e 0f       	add	r20, r30
    11d8:	5f 1f       	adc	r21, r31
    11da:	50 93 03 03 	sts	0x0303, r21	; 0x800303 <__brkval+0x1>
    11de:	40 93 02 03 	sts	0x0302, r20	; 0x800302 <__brkval>
    11e2:	81 93       	st	Z+, r24
    11e4:	91 93       	st	Z+, r25
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <__stack+0xed>
    11e8:	e0 e0       	ldi	r30, 0x00	; 0
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	cf 01       	movw	r24, r30
    11ee:	df 91       	pop	r29
    11f0:	cf 91       	pop	r28
    11f2:	1f 91       	pop	r17
    11f4:	0f 91       	pop	r16
    11f6:	08 95       	ret

000011f8 <free>:
    11f8:	cf 93       	push	r28
    11fa:	df 93       	push	r29
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	09 f4       	brne	.+2      	; 0x1202 <free+0xa>
    1200:	81 c0       	rjmp	.+258    	; 0x1304 <free+0x10c>
    1202:	fc 01       	movw	r30, r24
    1204:	32 97       	sbiw	r30, 0x02	; 2
    1206:	13 82       	std	Z+3, r1	; 0x03
    1208:	12 82       	std	Z+2, r1	; 0x02
    120a:	a0 91 04 03 	lds	r26, 0x0304	; 0x800304 <__flp>
    120e:	b0 91 05 03 	lds	r27, 0x0305	; 0x800305 <__flp+0x1>
    1212:	10 97       	sbiw	r26, 0x00	; 0
    1214:	81 f4       	brne	.+32     	; 0x1236 <free+0x3e>
    1216:	20 81       	ld	r18, Z
    1218:	31 81       	ldd	r19, Z+1	; 0x01
    121a:	82 0f       	add	r24, r18
    121c:	93 1f       	adc	r25, r19
    121e:	20 91 02 03 	lds	r18, 0x0302	; 0x800302 <__brkval>
    1222:	30 91 03 03 	lds	r19, 0x0303	; 0x800303 <__brkval+0x1>
    1226:	28 17       	cp	r18, r24
    1228:	39 07       	cpc	r19, r25
    122a:	51 f5       	brne	.+84     	; 0x1280 <free+0x88>
    122c:	f0 93 03 03 	sts	0x0303, r31	; 0x800303 <__brkval+0x1>
    1230:	e0 93 02 03 	sts	0x0302, r30	; 0x800302 <__brkval>
    1234:	67 c0       	rjmp	.+206    	; 0x1304 <free+0x10c>
    1236:	ed 01       	movw	r28, r26
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	ce 17       	cp	r28, r30
    123e:	df 07       	cpc	r29, r31
    1240:	40 f4       	brcc	.+16     	; 0x1252 <free+0x5a>
    1242:	4a 81       	ldd	r20, Y+2	; 0x02
    1244:	5b 81       	ldd	r21, Y+3	; 0x03
    1246:	9e 01       	movw	r18, r28
    1248:	41 15       	cp	r20, r1
    124a:	51 05       	cpc	r21, r1
    124c:	f1 f0       	breq	.+60     	; 0x128a <free+0x92>
    124e:	ea 01       	movw	r28, r20
    1250:	f5 cf       	rjmp	.-22     	; 0x123c <free+0x44>
    1252:	d3 83       	std	Z+3, r29	; 0x03
    1254:	c2 83       	std	Z+2, r28	; 0x02
    1256:	40 81       	ld	r20, Z
    1258:	51 81       	ldd	r21, Z+1	; 0x01
    125a:	84 0f       	add	r24, r20
    125c:	95 1f       	adc	r25, r21
    125e:	c8 17       	cp	r28, r24
    1260:	d9 07       	cpc	r29, r25
    1262:	59 f4       	brne	.+22     	; 0x127a <free+0x82>
    1264:	88 81       	ld	r24, Y
    1266:	99 81       	ldd	r25, Y+1	; 0x01
    1268:	84 0f       	add	r24, r20
    126a:	95 1f       	adc	r25, r21
    126c:	02 96       	adiw	r24, 0x02	; 2
    126e:	91 83       	std	Z+1, r25	; 0x01
    1270:	80 83       	st	Z, r24
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	9b 81       	ldd	r25, Y+3	; 0x03
    1276:	93 83       	std	Z+3, r25	; 0x03
    1278:	82 83       	std	Z+2, r24	; 0x02
    127a:	21 15       	cp	r18, r1
    127c:	31 05       	cpc	r19, r1
    127e:	29 f4       	brne	.+10     	; 0x128a <free+0x92>
    1280:	f0 93 05 03 	sts	0x0305, r31	; 0x800305 <__flp+0x1>
    1284:	e0 93 04 03 	sts	0x0304, r30	; 0x800304 <__flp>
    1288:	3d c0       	rjmp	.+122    	; 0x1304 <free+0x10c>
    128a:	e9 01       	movw	r28, r18
    128c:	fb 83       	std	Y+3, r31	; 0x03
    128e:	ea 83       	std	Y+2, r30	; 0x02
    1290:	49 91       	ld	r20, Y+
    1292:	59 91       	ld	r21, Y+
    1294:	c4 0f       	add	r28, r20
    1296:	d5 1f       	adc	r29, r21
    1298:	ec 17       	cp	r30, r28
    129a:	fd 07       	cpc	r31, r29
    129c:	61 f4       	brne	.+24     	; 0x12b6 <free+0xbe>
    129e:	80 81       	ld	r24, Z
    12a0:	91 81       	ldd	r25, Z+1	; 0x01
    12a2:	84 0f       	add	r24, r20
    12a4:	95 1f       	adc	r25, r21
    12a6:	02 96       	adiw	r24, 0x02	; 2
    12a8:	e9 01       	movw	r28, r18
    12aa:	99 83       	std	Y+1, r25	; 0x01
    12ac:	88 83       	st	Y, r24
    12ae:	82 81       	ldd	r24, Z+2	; 0x02
    12b0:	93 81       	ldd	r25, Z+3	; 0x03
    12b2:	9b 83       	std	Y+3, r25	; 0x03
    12b4:	8a 83       	std	Y+2, r24	; 0x02
    12b6:	e0 e0       	ldi	r30, 0x00	; 0
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	12 96       	adiw	r26, 0x02	; 2
    12bc:	8d 91       	ld	r24, X+
    12be:	9c 91       	ld	r25, X
    12c0:	13 97       	sbiw	r26, 0x03	; 3
    12c2:	00 97       	sbiw	r24, 0x00	; 0
    12c4:	19 f0       	breq	.+6      	; 0x12cc <free+0xd4>
    12c6:	fd 01       	movw	r30, r26
    12c8:	dc 01       	movw	r26, r24
    12ca:	f7 cf       	rjmp	.-18     	; 0x12ba <free+0xc2>
    12cc:	8d 91       	ld	r24, X+
    12ce:	9c 91       	ld	r25, X
    12d0:	11 97       	sbiw	r26, 0x01	; 1
    12d2:	9d 01       	movw	r18, r26
    12d4:	2e 5f       	subi	r18, 0xFE	; 254
    12d6:	3f 4f       	sbci	r19, 0xFF	; 255
    12d8:	82 0f       	add	r24, r18
    12da:	93 1f       	adc	r25, r19
    12dc:	20 91 02 03 	lds	r18, 0x0302	; 0x800302 <__brkval>
    12e0:	30 91 03 03 	lds	r19, 0x0303	; 0x800303 <__brkval+0x1>
    12e4:	28 17       	cp	r18, r24
    12e6:	39 07       	cpc	r19, r25
    12e8:	69 f4       	brne	.+26     	; 0x1304 <free+0x10c>
    12ea:	30 97       	sbiw	r30, 0x00	; 0
    12ec:	29 f4       	brne	.+10     	; 0x12f8 <free+0x100>
    12ee:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <__flp+0x1>
    12f2:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <__flp>
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <free+0x104>
    12f8:	13 82       	std	Z+3, r1	; 0x03
    12fa:	12 82       	std	Z+2, r1	; 0x02
    12fc:	b0 93 03 03 	sts	0x0303, r27	; 0x800303 <__brkval+0x1>
    1300:	a0 93 02 03 	sts	0x0302, r26	; 0x800302 <__brkval>
    1304:	df 91       	pop	r29
    1306:	cf 91       	pop	r28
    1308:	08 95       	ret

0000130a <memset>:
    130a:	dc 01       	movw	r26, r24
    130c:	01 c0       	rjmp	.+2      	; 0x1310 <memset+0x6>
    130e:	6d 93       	st	X+, r22
    1310:	41 50       	subi	r20, 0x01	; 1
    1312:	50 40       	sbci	r21, 0x00	; 0
    1314:	e0 f7       	brcc	.-8      	; 0x130e <memset+0x4>
    1316:	08 95       	ret

00001318 <_exit>:
    1318:	f8 94       	cli

0000131a <__stop_program>:
    131a:	ff cf       	rjmp	.-2      	; 0x131a <__stop_program>
