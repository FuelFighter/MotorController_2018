
MotorController_2018.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00001a06  00001a9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001fc  00800110  00800110  00001aaa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001aaa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00001b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025c3  00000000  00000000  00001d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013fa  00000000  00000000  00004303  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000117f  00000000  00000000  000056fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000618  00000000  00000000  0000687c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d2c  00000000  00000000  00006e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001274  00000000  00000000  00007bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00008e34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4e c2       	rjmp	.+1180   	; 0x4ce <__vector_12>
      32:	00 00       	nop
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	76 c2       	rjmp	.+1260   	; 0x52e <__vector_16>
      42:	00 00       	nop
      44:	ea c5       	rjmp	.+3028   	; 0xc1a <__vector_17>
      46:	00 00       	nop
      48:	6f c3       	rjmp	.+1758   	; 0x728 <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	3d c0       	rjmp	.+122    	; 0xd0 <__bad_interrupt>
      56:	00 00       	nop
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	39 c0       	rjmp	.+114    	; 0xd0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	af c2       	rjmp	.+1374   	; 0x5c4 <__vector_25>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c0       	rjmp	.+78     	; 0xd0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c0       	rjmp	.+70     	; 0xd0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e6 e0       	ldi	r30, 0x06	; 6
      a8:	fa e1       	ldi	r31, 0x1A	; 26
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a0 31       	cpi	r26, 0x10	; 16
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	23 e0       	ldi	r18, 0x03	; 3
      bc:	a0 e1       	ldi	r26, 0x10	; 16
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	ac 30       	cpi	r26, 0x0C	; 12
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	85 d1       	rcall	.+778    	; 0x3d6 <main>
      cc:	0c 94 01 0d 	jmp	0x1a02	; 0x1a02 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <controller>:


static float f32_Integrator = 0.0 ;
static float f32_DutyCycleCmd = 50.0 ;

void controller(float f32_current_cmd, float f32_prev_current){
      d2:	8f 92       	push	r8
      d4:	9f 92       	push	r9
      d6:	af 92       	push	r10
      d8:	bf 92       	push	r11
      da:	cf 92       	push	r12
      dc:	df 92       	push	r13
      de:	ef 92       	push	r14
      e0:	ff 92       	push	r15
      e2:	cf 93       	push	r28
	
	float f32_CurrentDelta=f32_current_cmd-f32_prev_current	;
      e4:	df 93       	push	r29
      e6:	f3 d5       	rcall	.+3046   	; 0xcce <__subsf3>
      e8:	4b 01       	movw	r8, r22

	f32_Integrator+=f32_CurrentDelta*TimeStep ;
      ea:	5c 01       	movw	r10, r24
      ec:	2a e0       	ldi	r18, 0x0A	; 10
      ee:	37 ed       	ldi	r19, 0xD7	; 215
      f0:	43 e2       	ldi	r20, 0x23	; 35
      f2:	5c e3       	ldi	r21, 0x3C	; 60
      f4:	a4 d7       	rcall	.+3912   	; 0x103e <__mulsf3>
      f6:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__data_end>
      fa:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__data_end+0x1>
      fe:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__data_end+0x2>
     102:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__data_end+0x3>
     106:	e4 d5       	rcall	.+3016   	; 0xcd0 <__addsf3>
     108:	6b 01       	movw	r12, r22
     10a:	7c 01       	movw	r14, r24
     10c:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <__data_end>
     110:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <__data_end+0x1>
     114:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end+0x2>
     118:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x3>
	f32_DutyCycleCmd=Kp*f32_CurrentDelta+f32_Integrator/Ti ;
	f32_DutyCycleCmd=(f32_DutyCycleCmd+50) ;
     11c:	23 ea       	ldi	r18, 0xA3	; 163
     11e:	36 e0       	ldi	r19, 0x06	; 6
     120:	43 ed       	ldi	r20, 0xD3	; 211
     122:	5a e3       	ldi	r21, 0x3A	; 58
     124:	c5 01       	movw	r24, r10
     126:	b4 01       	movw	r22, r8
     128:	8a d7       	rcall	.+3860   	; 0x103e <__mulsf3>
     12a:	4b 01       	movw	r8, r22
     12c:	5c 01       	movw	r10, r24
     12e:	2c e5       	ldi	r18, 0x5C	; 92
     130:	3f e8       	ldi	r19, 0x8F	; 143
     132:	42 ec       	ldi	r20, 0xC2	; 194
     134:	50 e4       	ldi	r21, 0x40	; 64
     136:	c7 01       	movw	r24, r14
     138:	b6 01       	movw	r22, r12
     13a:	32 d6       	rcall	.+3172   	; 0xda0 <__divsf3>
     13c:	9b 01       	movw	r18, r22
     13e:	ac 01       	movw	r20, r24
     140:	c5 01       	movw	r24, r10
     142:	b4 01       	movw	r22, r8
     144:	c5 d5       	rcall	.+2954   	; 0xcd0 <__addsf3>
     146:	20 e0       	ldi	r18, 0x00	; 0
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	48 e4       	ldi	r20, 0x48	; 72
     14c:	52 e4       	ldi	r21, 0x42	; 66
     14e:	c0 d5       	rcall	.+2944   	; 0xcd0 <__addsf3>
     150:	6b 01       	movw	r12, r22
     152:	7c 01       	movw	r14, r24
     154:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <f32_DutyCycleCmd>
     158:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <f32_DutyCycleCmd+0x1>
     15c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <f32_DutyCycleCmd+0x2>
	
	//bounding of duty cycle for well function of bootstrap capacitors

	if (f32_DutyCycleCmd > 95)
     160:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <f32_DutyCycleCmd+0x3>
     164:	20 e0       	ldi	r18, 0x00	; 0
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	4e eb       	ldi	r20, 0xBE	; 190
     16a:	52 e4       	ldi	r21, 0x42	; 66
     16c:	64 d7       	rcall	.+3784   	; 0x1036 <__gesf2>
     16e:	18 16       	cp	r1, r24
	{
		f32_DutyCycleCmd = 95;
     170:	6c f4       	brge	.+26     	; 0x18c <controller+0xba>
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	ae eb       	ldi	r26, 0xBE	; 190
     178:	b2 e4       	ldi	r27, 0x42	; 66
     17a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <f32_DutyCycleCmd>
     17e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <f32_DutyCycleCmd+0x1>
     182:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <f32_DutyCycleCmd+0x2>
     186:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <f32_DutyCycleCmd+0x3>
	}
	
	if (f32_DutyCycleCmd < 5)
     18a:	15 c0       	rjmp	.+42     	; 0x1b6 <controller+0xe4>
     18c:	20 e0       	ldi	r18, 0x00	; 0
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	40 ea       	ldi	r20, 0xA0	; 160
     192:	50 e4       	ldi	r21, 0x40	; 64
     194:	c7 01       	movw	r24, r14
     196:	b6 01       	movw	r22, r12
     198:	ff d5       	rcall	.+3070   	; 0xd98 <__cmpsf2>
     19a:	88 23       	and	r24, r24
	{
		f32_DutyCycleCmd = 5;
     19c:	64 f4       	brge	.+24     	; 0x1b6 <controller+0xe4>
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	a0 ea       	ldi	r26, 0xA0	; 160
     1a4:	b0 e4       	ldi	r27, 0x40	; 64
     1a6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <f32_DutyCycleCmd>
     1aa:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <f32_DutyCycleCmd+0x1>
     1ae:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <f32_DutyCycleCmd+0x2>
     1b2:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <f32_DutyCycleCmd+0x3>
	}
	
	OCR3A = (int)((f32_DutyCycleCmd/100)*ICR3) ; //PWM_PE3 (non inverted)
     1b6:	c0 91 96 00 	lds	r28, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
     1ba:	d0 91 97 00 	lds	r29, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
     1be:	20 e0       	ldi	r18, 0x00	; 0
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	48 ec       	ldi	r20, 0xC8	; 200
     1c4:	52 e4       	ldi	r21, 0x42	; 66
     1c6:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <f32_DutyCycleCmd>
     1ca:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <f32_DutyCycleCmd+0x1>
     1ce:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <f32_DutyCycleCmd+0x2>
     1d2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <f32_DutyCycleCmd+0x3>
     1d6:	e4 d5       	rcall	.+3016   	; 0xda0 <__divsf3>
     1d8:	6b 01       	movw	r12, r22
     1da:	7c 01       	movw	r14, r24
     1dc:	be 01       	movw	r22, r28
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	77 d6       	rcall	.+3310   	; 0xed2 <__floatunsisf>
     1e4:	9b 01       	movw	r18, r22
     1e6:	ac 01       	movw	r20, r24
     1e8:	c7 01       	movw	r24, r14
     1ea:	b6 01       	movw	r22, r12
     1ec:	28 d7       	rcall	.+3664   	; 0x103e <__mulsf3>
     1ee:	40 d6       	rcall	.+3200   	; 0xe70 <__fixsfsi>
     1f0:	e8 e9       	ldi	r30, 0x98	; 152
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	71 83       	std	Z+1, r23	; 0x01
	OCR3B = OCR3A ; //PWM_PE4 (inverted)
     1f6:	60 83       	st	Z, r22
     1f8:	80 81       	ld	r24, Z
     1fa:	91 81       	ldd	r25, Z+1	; 0x01
     1fc:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     200:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
}
     204:	df 91       	pop	r29
     206:	cf 91       	pop	r28
     208:	ff 90       	pop	r15
     20a:	ef 90       	pop	r14
     20c:	df 90       	pop	r13
     20e:	cf 90       	pop	r12
     210:	bf 90       	pop	r11
     212:	af 90       	pop	r10
     214:	9f 90       	pop	r9
     216:	8f 90       	pop	r8
     218:	08 95       	ret

0000021a <timer1_init_ts>:




void timer1_init_ts(){
	TCCR1B |= (1<<CS10)|(1<<CS11); // timer 1 prescaler set CLK/64
     21a:	e1 e8       	ldi	r30, 0x81	; 129
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	83 60       	ori	r24, 0x03	; 3
     222:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12); //CTC
     224:	80 81       	ld	r24, Z
     226:	88 60       	ori	r24, 0x08	; 8
     228:	80 83       	st	Z, r24
	TCNT1 = 0; //reset timer value
     22a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     22e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIMSK1 |= (1<<OCIE1A); //enable interrupt
     232:	ef e6       	ldi	r30, 0x6F	; 111
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	80 81       	ld	r24, Z
     238:	82 60       	ori	r24, 0x02	; 2
     23a:	80 83       	st	Z, r24
	OCR1A = 125 - 1; //compare value //every 1ms
     23c:	8c e7       	ldi	r24, 0x7C	; 124
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     244:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     248:	08 95       	ret

0000024a <timer0_init_ts>:
}

void timer0_init_ts(){ 
	TCCR0A |= (1<<CS10)|(1<<CS11); // timer 0 prescaler set CLK/1024
     24a:	84 b5       	in	r24, 0x24	; 36
     24c:	83 60       	ori	r24, 0x03	; 3
     24e:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM01); //CTC
     250:	84 b5       	in	r24, 0x24	; 36
     252:	88 60       	ori	r24, 0x08	; 8
     254:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0; //reset timer value
     256:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1<<OCIE0A); //enable interrupt
     258:	ee e6       	ldi	r30, 0x6E	; 110
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	80 81       	ld	r24, Z
     25e:	82 60       	ori	r24, 0x02	; 2
     260:	80 83       	st	Z, r24
	OCR0A = 79; //compare value
     262:	8f e4       	ldi	r24, 0x4F	; 79
     264:	87 bd       	out	0x27, r24	; 39
     266:	08 95       	ret

00000268 <toggle_DCDC>:
};



void toggle_DCDC(uint8_t OnOff){
	if (OnOff){
     268:	88 23       	and	r24, r24
     26a:	11 f0       	breq	.+4      	; 0x270 <toggle_DCDC+0x8>
		PORTB &= ~(1 << PB3);
     26c:	2b 98       	cbi	0x05, 3	; 5
     26e:	08 95       	ret
	}else{
		PORTB |= (1 << PB3);
     270:	2b 9a       	sbi	0x05, 3	; 5
     272:	08 95       	ret

00000274 <handle_can>:
	}
}

void handle_can(ModuleValues_t *vals, CanMessage_t *rx){
     274:	0f 93       	push	r16
     276:	1f 93       	push	r17
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	8c 01       	movw	r16, r24
     27e:	eb 01       	movw	r28, r22
	if (can_read_message_if_new(rx)){
     280:	cb 01       	movw	r24, r22
     282:	98 d3       	rcall	.+1840   	; 0x9b4 <can_read_message_if_new>
     284:	88 23       	and	r24, r24
     286:	49 f1       	breq	.+82     	; 0x2da <handle_can+0x66>
		switch (rx->id){
     288:	88 81       	ld	r24, Y
     28a:	99 81       	ldd	r25, Y+1	; 0x01
     28c:	80 32       	cpi	r24, 0x20	; 32
     28e:	22 e0       	ldi	r18, 0x02	; 2
     290:	92 07       	cpc	r25, r18
     292:	f1 f0       	breq	.+60     	; 0x2d0 <handle_can+0x5c>
     294:	20 f4       	brcc	.+8      	; 0x29e <handle_can+0x2a>
     296:	80 31       	cpi	r24, 0x10	; 16
     298:	91 40       	sbci	r25, 0x01	; 1
     29a:	49 f0       	breq	.+18     	; 0x2ae <handle_can+0x3a>
     29c:	1e c0       	rjmp	.+60     	; 0x2da <handle_can+0x66>
     29e:	80 33       	cpi	r24, 0x30	; 48
     2a0:	22 e0       	ldi	r18, 0x02	; 2
     2a2:	92 07       	cpc	r25, r18
     2a4:	61 f0       	breq	.+24     	; 0x2be <handle_can+0x4a>
     2a6:	88 34       	cpi	r24, 0x48	; 72
     2a8:	94 40       	sbci	r25, 0x04	; 4
     2aa:	29 f0       	breq	.+10     	; 0x2b6 <handle_can+0x42>
     2ac:	16 c0       	rjmp	.+44     	; 0x2da <handle_can+0x66>
			case BRAKE_CAN_ID:
				vals->braking = rx->data.u8[0];
     2ae:	8b 81       	ldd	r24, Y+3	; 0x03
     2b0:	f8 01       	movw	r30, r16
     2b2:	85 83       	std	Z+5, r24	; 0x05
				break;
     2b4:	12 c0       	rjmp	.+36     	; 0x2da <handle_can+0x66>
			case BMS_STATUS_CAN_ID:
				vals->BMS_status = rx->data.u8[0];
     2b6:	8b 81       	ldd	r24, Y+3	; 0x03
     2b8:	f8 01       	movw	r30, r16
     2ba:	80 83       	st	Z, r24
				break;
     2bc:	0e c0       	rjmp	.+28     	; 0x2da <handle_can+0x66>
			case STEERING_WHEEL_CAN_ID:
				vals->throttle_cmd = rx->data.u8[3];
     2be:	8e 81       	ldd	r24, Y+6	; 0x06
     2c0:	f8 01       	movw	r30, r16
     2c2:	81 83       	std	Z+1, r24	; 0x01
				vals->restart_overload = rx->data.u8[1] & HORN;
     2c4:	8c 81       	ldd	r24, Y+4	; 0x04
     2c6:	82 70       	andi	r24, 0x02	; 2
     2c8:	82 83       	std	Z+2, r24	; 0x02
				vals->deadman = rx->data.u8[2];
     2ca:	8d 81       	ldd	r24, Y+5	; 0x05
     2cc:	83 87       	std	Z+11, r24	; 0x0b
				break;
     2ce:	05 c0       	rjmp	.+10     	; 0x2da <handle_can+0x66>
			case ENCODER_CAN_ID:
				vals->rpm = rx->data.u16[ENCODER_CHANNEL];
     2d0:	8b 81       	ldd	r24, Y+3	; 0x03
     2d2:	9c 81       	ldd	r25, Y+4	; 0x04
     2d4:	f8 01       	movw	r30, r16
     2d6:	94 83       	std	Z+4, r25	; 0x04
     2d8:	83 83       	std	Z+3, r24	; 0x03
				break;
		}
	}
}
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	1f 91       	pop	r17
     2e0:	0f 91       	pop	r16
     2e2:	08 95       	ret

000002e4 <handle_motor_status_can_msg>:

void handle_motor_status_can_msg(uint8_t *send, ModuleValues_t *vals){
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
	if(*send){
     2e8:	fc 01       	movw	r30, r24
     2ea:	20 81       	ld	r18, Z
     2ec:	22 23       	and	r18, r18
     2ee:	19 f1       	breq	.+70     	; 0x336 <handle_motor_status_can_msg+0x52>
     2f0:	fb 01       	movw	r30, r22
     2f2:	ec 01       	movw	r28, r24
		txFrame.data.u8[0] = vals->motor_status;
     2f4:	a7 ef       	ldi	r26, 0xF7	; 247
     2f6:	b2 e0       	ldi	r27, 0x02	; 2
     2f8:	82 85       	ldd	r24, Z+10	; 0x0a
     2fa:	13 96       	adiw	r26, 0x03	; 3
     2fc:	8c 93       	st	X, r24
     2fe:	13 97       	sbiw	r26, 0x03	; 3
		txFrame.data.u8[1] = vals->throttle_cmd;
     300:	81 81       	ldd	r24, Z+1	; 0x01
     302:	14 96       	adiw	r26, 0x04	; 4
     304:	8c 93       	st	X, r24
     306:	14 97       	sbiw	r26, 0x04	; 4
		txFrame.data.u16[1] = vals->mamp;
     308:	86 81       	ldd	r24, Z+6	; 0x06
     30a:	97 81       	ldd	r25, Z+7	; 0x07
     30c:	16 96       	adiw	r26, 0x06	; 6
     30e:	9c 93       	st	X, r25
     310:	8e 93       	st	-X, r24
     312:	15 97       	sbiw	r26, 0x05	; 5
		txFrame.data.u16[2] = OCR3B;
     314:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
     318:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     31c:	18 96       	adiw	r26, 0x08	; 8
     31e:	9c 93       	st	X, r25
     320:	8e 93       	st	-X, r24
     322:	17 97       	sbiw	r26, 0x07	; 7
		txFrame.data.u16[3] = vals->rpm;
     324:	83 81       	ldd	r24, Z+3	; 0x03
     326:	94 81       	ldd	r25, Z+4	; 0x04
     328:	1a 96       	adiw	r26, 0x0a	; 10
     32a:	9c 93       	st	X, r25
     32c:	8e 93       	st	-X, r24
     32e:	19 97       	sbiw	r26, 0x09	; 9
		
		can_send_message(&txFrame);
     330:	cd 01       	movw	r24, r26
     332:	83 d3       	rcall	.+1798   	; 0xa3a <can_send_message>
		*send = 0;
     334:	18 82       	st	Y, r1
	}
}
     336:	df 91       	pop	r29
     338:	cf 91       	pop	r28
     33a:	08 95       	ret

0000033c <handle_current_sensor>:
void handle_current_sensor(float *f32_prev_current, uint16_t u16_ADC_reg){ //----------------------------------------------------------------------------TODO test if ok with uint32, otherwise use float
     33c:	0f 93       	push	r16
     33e:	1f 93       	push	r17
     340:	cf 93       	push	r28
     342:	df 93       	push	r29
     344:	00 d0       	rcall	.+0      	; 0x346 <handle_current_sensor+0xa>
     346:	00 d0       	rcall	.+0      	; 0x348 <handle_current_sensor+0xc>
     348:	cd b7       	in	r28, 0x3d	; 61
     34a:	de b7       	in	r29, 0x3e	; 62
     34c:	8c 01       	movw	r16, r24
	
	volatile float f_new_current = ((((float)u16_ADC_reg*3.3/1024) - TRANSDUCER_OFFSET)/TRANSDUCER_SENSIBILITY)/3 ;// /3 because current passes 3x in transducer for more precision.
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	bf d5       	rcall	.+2942   	; 0xed2 <__floatunsisf>
     354:	23 e3       	ldi	r18, 0x33	; 51
     356:	33 e3       	ldi	r19, 0x33	; 51
     358:	43 e5       	ldi	r20, 0x53	; 83
     35a:	50 e4       	ldi	r21, 0x40	; 64
     35c:	70 d6       	rcall	.+3296   	; 0x103e <__mulsf3>
     35e:	20 e0       	ldi	r18, 0x00	; 0
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	40 e8       	ldi	r20, 0x80	; 128
     364:	5a e3       	ldi	r21, 0x3A	; 58
     366:	6b d6       	rcall	.+3286   	; 0x103e <__mulsf3>
     368:	27 ed       	ldi	r18, 0xD7	; 215
     36a:	33 ea       	ldi	r19, 0xA3	; 163
     36c:	40 e1       	ldi	r20, 0x10	; 16
     36e:	50 e4       	ldi	r21, 0x40	; 64
     370:	ae d4       	rcall	.+2396   	; 0xcce <__subsf3>
     372:	23 ec       	ldi	r18, 0xC3	; 195
     374:	34 e6       	ldi	r19, 0x64	; 100
     376:	4a e2       	ldi	r20, 0x2A	; 42
     378:	5d e3       	ldi	r21, 0x3D	; 61
     37a:	12 d5       	rcall	.+2596   	; 0xda0 <__divsf3>
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	40 e4       	ldi	r20, 0x40	; 64
     382:	50 e4       	ldi	r21, 0x40	; 64
     384:	0d d5       	rcall	.+2586   	; 0xda0 <__divsf3>
     386:	69 83       	std	Y+1, r22	; 0x01
     388:	7a 83       	std	Y+2, r23	; 0x02
     38a:	8b 83       	std	Y+3, r24	; 0x03
     38c:	9c 83       	std	Y+4, r25	; 0x04
	f_new_current = (f_new_current+0.11)*1.1 ;// correction of offset and ramp error (conversion + hardware) measured with ampmeter of the power supply : bad
     38e:	69 81       	ldd	r22, Y+1	; 0x01
     390:	7a 81       	ldd	r23, Y+2	; 0x02
     392:	8b 81       	ldd	r24, Y+3	; 0x03
     394:	9c 81       	ldd	r25, Y+4	; 0x04
     396:	2e ea       	ldi	r18, 0xAE	; 174
     398:	37 e4       	ldi	r19, 0x47	; 71
     39a:	41 ee       	ldi	r20, 0xE1	; 225
     39c:	5d e3       	ldi	r21, 0x3D	; 61
     39e:	98 d4       	rcall	.+2352   	; 0xcd0 <__addsf3>
     3a0:	2d ec       	ldi	r18, 0xCD	; 205
     3a2:	3c ec       	ldi	r19, 0xCC	; 204
     3a4:	4c e8       	ldi	r20, 0x8C	; 140
     3a6:	5f e3       	ldi	r21, 0x3F	; 63
     3a8:	4a d6       	rcall	.+3220   	; 0x103e <__mulsf3>
     3aa:	69 83       	std	Y+1, r22	; 0x01
     3ac:	7a 83       	std	Y+2, r23	; 0x02
     3ae:	8b 83       	std	Y+3, r24	; 0x03
     3b0:	9c 83       	std	Y+4, r25	; 0x04
	//*f32_prev_current = (*f32_prev_current)*(1-LOWPASS_CONSTANT) + LOWPASS_CONSTANT*f_new_current ;// low pass filter ---------------------TODO test
	*f32_prev_current = f_new_current;
     3b2:	89 81       	ldd	r24, Y+1	; 0x01
     3b4:	9a 81       	ldd	r25, Y+2	; 0x02
     3b6:	ab 81       	ldd	r26, Y+3	; 0x03
     3b8:	bc 81       	ldd	r27, Y+4	; 0x04
     3ba:	f8 01       	movw	r30, r16
     3bc:	80 83       	st	Z, r24
     3be:	91 83       	std	Z+1, r25	; 0x01
     3c0:	a2 83       	std	Z+2, r26	; 0x02
     3c2:	b3 83       	std	Z+3, r27	; 0x03
}
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	0f 90       	pop	r0
     3ca:	0f 90       	pop	r0
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	08 95       	ret

000003d6 <main>:

int main(void)	
{
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	cd b7       	in	r28, 0x3d	; 61
     3dc:	de b7       	in	r29, 0x3e	; 62
     3de:	28 97       	sbiw	r28, 0x08	; 8
     3e0:	0f b6       	in	r0, 0x3f	; 63
     3e2:	f8 94       	cli
     3e4:	de bf       	out	0x3e, r29	; 62
     3e6:	0f be       	out	0x3f, r0	; 63
     3e8:	cd bf       	out	0x3d, r28	; 61
	cli();
     3ea:	f8 94       	cli
	pid_init(&Current, 0.1, 0.05, 0, 0);
     3ec:	81 2c       	mov	r8, r1
     3ee:	91 2c       	mov	r9, r1
     3f0:	54 01       	movw	r10, r8
     3f2:	75 01       	movw	r14, r10
     3f4:	64 01       	movw	r12, r8
     3f6:	0d ec       	ldi	r16, 0xCD	; 205
     3f8:	1c ec       	ldi	r17, 0xCC	; 204
     3fa:	2c e4       	ldi	r18, 0x4C	; 76
     3fc:	3d e3       	ldi	r19, 0x3D	; 61
     3fe:	4d ec       	ldi	r20, 0xCD	; 205
     400:	5c ec       	ldi	r21, 0xCC	; 204
     402:	6c ec       	ldi	r22, 0xCC	; 204
     404:	7d e3       	ldi	r23, 0x3D	; 61
     406:	8f ed       	ldi	r24, 0xDF	; 223
	usbdbg_init();
     408:	92 e0       	ldi	r25, 0x02	; 2
	//uart_init();
	//USART0_Init ((unsigned int)(9600));
	pwm_init();
     40a:	3e d1       	rcall	.+636    	; 0x688 <pid_init>
     40c:	4c d4       	rcall	.+2200   	; 0xca6 <usbdbg_init>
	//pwm_set_top_t3(0x319);
	can_init(0,0);
     40e:	93 d3       	rcall	.+1830   	; 0xb36 <pwm_init>
     410:	60 e0       	ldi	r22, 0x00	; 0
	timer1_init_ts();
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	80 e0       	ldi	r24, 0x00	; 0
	timer0_init_ts();
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	78 d2       	rcall	.+1264   	; 0x90a <can_init>
	//ADC
	adc_Free_running_init();
     41a:	ff de       	rcall	.-514    	; 0x21a <timer1_init_ts>
     41c:	16 df       	rcall	.-468    	; 0x24a <timer0_init_ts>
	ADMUX &= 0b11100000;
     41e:	60 d1       	rcall	.+704    	; 0x6e0 <adc_Free_running_init>
     420:	ec e7       	ldi	r30, 0x7C	; 124
     422:	f0 e0       	ldi	r31, 0x00	; 0
     424:	80 81       	ld	r24, Z
	ADMUX |= CH_ADC2;
     426:	80 7e       	andi	r24, 0xE0	; 224
     428:	80 83       	st	Z, r24
     42a:	80 81       	ld	r24, Z
	
	rgbled_init();
     42c:	82 60       	ori	r24, 0x02	; 2
     42e:	80 83       	st	Z, r24
	txFrame.id = MOTOR_CAN_ID;
     430:	e9 d3       	rcall	.+2002   	; 0xc04 <rgbled_init>
     432:	e7 ef       	ldi	r30, 0xF7	; 247
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	80 e5       	ldi	r24, 0x50	; 80
	txFrame.length = 8;
     438:	94 e0       	ldi	r25, 0x04	; 4
     43a:	91 83       	std	Z+1, r25	; 0x01
	sei();
     43c:	80 83       	st	Z, r24
	
	// Output pin to turn off DCDC
	DDRB |= (1 << PB3);
     43e:	88 e0       	ldi	r24, 0x08	; 8
	toggle_DCDC(OFF);
     440:	82 83       	std	Z+2, r24	; 0x02
     442:	78 94       	sei
     444:	23 9a       	sbi	0x04, 3	; 4
	
	rgbled_turn_on(LED_BLUE);
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	0f df       	rcall	.-482    	; 0x268 <toggle_DCDC>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     44a:	80 e8       	ldi	r24, 0x80	; 128
     44c:	e1 d3       	rcall	.+1986   	; 0xc10 <rgbled_turn_on>
     44e:	ce 01       	movw	r24, r28
		//simple mode with pwm controlled by potentiometer /
	
		pot_val = (float)u16_ADC2_reg/1024 ;
		char buff1 [8];
		itoa(100*pot_val,buff1,10);
		printf("%s,\n",buff1);
     450:	01 96       	adiw	r24, 0x01	; 1
	
	rgbled_turn_on(LED_BLUE);
	
    while (1){
		
		handle_motor_status_can_msg(&send_can, &ComValues);
     452:	7c 01       	movw	r14, r24
     454:	0a e0       	ldi	r16, 0x0A	; 10
     456:	11 e0       	ldi	r17, 0x01	; 1
     458:	64 e1       	ldi	r22, 0x14	; 20
     45a:	71 e0       	ldi	r23, 0x01	; 1
		handle_can(&ComValues, &rxFrame);
     45c:	89 e2       	ldi	r24, 0x29	; 41
     45e:	91 e0       	ldi	r25, 0x01	; 1
     460:	41 df       	rcall	.-382    	; 0x2e4 <handle_motor_status_can_msg>
     462:	64 ed       	ldi	r22, 0xD4	; 212
		
	
		//simple mode with pwm controlled by potentiometer /
	
		pot_val = (float)u16_ADC2_reg/1024 ;
     464:	72 e0       	ldi	r23, 0x02	; 2
     466:	84 e1       	ldi	r24, 0x14	; 20
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	04 df       	rcall	.-504    	; 0x274 <handle_can>
     46c:	60 91 27 01 	lds	r22, 0x0127	; 0x800127 <u16_ADC2_reg>
     470:	70 91 28 01 	lds	r23, 0x0128	; 0x800128 <u16_ADC2_reg+0x1>
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	2c d5       	rcall	.+2648   	; 0xed2 <__floatunsisf>
     47a:	20 e0       	ldi	r18, 0x00	; 0
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	40 e8       	ldi	r20, 0x80	; 128
     480:	5a e3       	ldi	r21, 0x3A	; 58
     482:	dd d5       	rcall	.+3002   	; 0x103e <__mulsf3>
     484:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <pot_val>
     488:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <pot_val+0x1>
		char buff1 [8];
		itoa(100*pot_val,buff1,10);
     48c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <pot_val+0x2>
     490:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <pot_val+0x3>
     494:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <pot_val>
     498:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <pot_val+0x1>
     49c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <pot_val+0x2>
     4a0:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <pot_val+0x3>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	48 ec       	ldi	r20, 0xC8	; 200
     4aa:	52 e4       	ldi	r21, 0x42	; 66
     4ac:	c8 d5       	rcall	.+2960   	; 0x103e <__mulsf3>
     4ae:	e0 d4       	rcall	.+2496   	; 0xe70 <__fixsfsi>
     4b0:	dc 01       	movw	r26, r24
     4b2:	cb 01       	movw	r24, r22
		printf("%s,\n",buff1);
     4b4:	4a e0       	ldi	r20, 0x0A	; 10
     4b6:	b7 01       	movw	r22, r14
     4b8:	25 d6       	rcall	.+3146   	; 0x1104 <__itoa_ncheck>
     4ba:	ff 92       	push	r15
     4bc:	ef 92       	push	r14
     4be:	1f 93       	push	r17
     4c0:	0f 93       	push	r16
     4c2:	8d d6       	rcall	.+3354   	; 0x11de <printf>
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	c5 cf       	rjmp	.-118    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>

000004ce <__vector_12>:
		
		
	}
}

ISR(TIMER1_COMPA_vect){// every 1ms
     4ce:	1f 92       	push	r1
     4d0:	0f 92       	push	r0
     4d2:	0f b6       	in	r0, 0x3f	; 63
     4d4:	0f 92       	push	r0
     4d6:	11 24       	eor	r1, r1
     4d8:	0b b6       	in	r0, 0x3b	; 59
     4da:	0f 92       	push	r0
     4dc:	2f 93       	push	r18
     4de:	3f 93       	push	r19
     4e0:	4f 93       	push	r20
     4e2:	5f 93       	push	r21
     4e4:	6f 93       	push	r22
     4e6:	7f 93       	push	r23
     4e8:	8f 93       	push	r24
     4ea:	9f 93       	push	r25
     4ec:	af 93       	push	r26
     4ee:	bf 93       	push	r27
     4f0:	ef 93       	push	r30
     4f2:	ff 93       	push	r31
	send_can = 1;
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <send_can>
	read_current = 1;
	handle_current_sensor(&f32_prev_current, u16_ADC3_reg);
     4fa:	60 91 25 01 	lds	r22, 0x0125	; 0x800125 <u16_ADC3_reg>
     4fe:	70 91 26 01 	lds	r23, 0x0126	; 0x800126 <u16_ADC3_reg+0x1>
     502:	8a e2       	ldi	r24, 0x2A	; 42
     504:	91 e0       	ldi	r25, 0x01	; 1
     506:	1a df       	rcall	.-460    	; 0x33c <handle_current_sensor>
	
}
     508:	ff 91       	pop	r31
     50a:	ef 91       	pop	r30
     50c:	bf 91       	pop	r27
     50e:	af 91       	pop	r26
     510:	9f 91       	pop	r25
     512:	8f 91       	pop	r24
     514:	7f 91       	pop	r23
     516:	6f 91       	pop	r22
     518:	5f 91       	pop	r21
     51a:	4f 91       	pop	r20
     51c:	3f 91       	pop	r19
     51e:	2f 91       	pop	r18
     520:	0f 90       	pop	r0
     522:	0b be       	out	0x3b, r0	; 59
     524:	0f 90       	pop	r0
     526:	0f be       	out	0x3f, r0	; 63
     528:	0f 90       	pop	r0
     52a:	1f 90       	pop	r1
     52c:	18 95       	reti

0000052e <__vector_16>:

ISR(TIMER0_COMP_vect){ // every 100ms
     52e:	1f 92       	push	r1
     530:	0f 92       	push	r0
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	0f 92       	push	r0
     536:	11 24       	eor	r1, r1
     538:	0b b6       	in	r0, 0x3b	; 59
     53a:	0f 92       	push	r0
     53c:	cf 92       	push	r12
     53e:	df 92       	push	r13
     540:	ef 92       	push	r14
     542:	ff 92       	push	r15
     544:	2f 93       	push	r18
     546:	3f 93       	push	r19
     548:	4f 93       	push	r20
     54a:	5f 93       	push	r21
     54c:	6f 93       	push	r22
     54e:	7f 93       	push	r23
     550:	8f 93       	push	r24
     552:	9f 93       	push	r25
     554:	af 93       	push	r26
     556:	bf 93       	push	r27
     558:	ef 93       	push	r30
     55a:	ff 93       	push	r31
	controller(pot_val*20-10, f32_prev_current); // current from -5A to 5A
     55c:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <pot_val>
     560:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <pot_val+0x1>
     564:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <pot_val+0x2>
     568:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <pot_val+0x3>
     56c:	c0 90 2a 01 	lds	r12, 0x012A	; 0x80012a <f32_prev_current>
     570:	d0 90 2b 01 	lds	r13, 0x012B	; 0x80012b <f32_prev_current+0x1>
     574:	e0 90 2c 01 	lds	r14, 0x012C	; 0x80012c <f32_prev_current+0x2>
     578:	f0 90 2d 01 	lds	r15, 0x012D	; 0x80012d <f32_prev_current+0x3>
     57c:	20 e0       	ldi	r18, 0x00	; 0
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	40 ea       	ldi	r20, 0xA0	; 160
     582:	51 e4       	ldi	r21, 0x41	; 65
     584:	5c d5       	rcall	.+2744   	; 0x103e <__mulsf3>
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	40 e2       	ldi	r20, 0x20	; 32
     58c:	51 e4       	ldi	r21, 0x41	; 65
     58e:	9f d3       	rcall	.+1854   	; 0xcce <__subsf3>
     590:	a7 01       	movw	r20, r14
     592:	96 01       	movw	r18, r12
     594:	9e dd       	rcall	.-1220   	; 0xd2 <controller>
}
     596:	ff 91       	pop	r31
     598:	ef 91       	pop	r30
     59a:	bf 91       	pop	r27
     59c:	af 91       	pop	r26
     59e:	9f 91       	pop	r25
     5a0:	8f 91       	pop	r24
     5a2:	7f 91       	pop	r23
     5a4:	6f 91       	pop	r22
     5a6:	5f 91       	pop	r21
     5a8:	4f 91       	pop	r20
     5aa:	3f 91       	pop	r19
     5ac:	2f 91       	pop	r18
     5ae:	ff 90       	pop	r15
     5b0:	ef 90       	pop	r14
     5b2:	df 90       	pop	r13
     5b4:	cf 90       	pop	r12
     5b6:	0f 90       	pop	r0
     5b8:	0b be       	out	0x3b, r0	; 59
     5ba:	0f 90       	pop	r0
     5bc:	0f be       	out	0x3f, r0	; 63
     5be:	0f 90       	pop	r0
     5c0:	1f 90       	pop	r1
     5c2:	18 95       	reti

000005c4 <__vector_25>:


ISR(ADC_vect)
{
     5c4:	1f 92       	push	r1
     5c6:	0f 92       	push	r0
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	0f 92       	push	r0
     5cc:	11 24       	eor	r1, r1
     5ce:	0b b6       	in	r0, 0x3b	; 59
     5d0:	0f 92       	push	r0
     5d2:	2f 93       	push	r18
     5d4:	3f 93       	push	r19
     5d6:	4f 93       	push	r20
     5d8:	5f 93       	push	r21
     5da:	6f 93       	push	r22
     5dc:	7f 93       	push	r23
     5de:	8f 93       	push	r24
     5e0:	9f 93       	push	r25
     5e2:	af 93       	push	r26
     5e4:	bf 93       	push	r27
     5e6:	ef 93       	push	r30
     5e8:	ff 93       	push	r31
	if (u8_ADC_mux == 3)
     5ea:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <u8_ADC_mux>
     5ee:	83 30       	cpi	r24, 0x03	; 3
     5f0:	89 f4       	brne	.+34     	; 0x614 <__vector_25+0x50>
	{
		u16_ADC3_reg = (ADCL+(ADCH<<8)); // reading conversion result
     5f2:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     5f6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	98 2f       	mov	r25, r24
     5fe:	88 27       	eor	r24, r24
     600:	82 0f       	add	r24, r18
     602:	91 1d       	adc	r25, r1
     604:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <u16_ADC3_reg+0x1>
     608:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <u16_ADC3_reg>
		u8_ADC_mux = 0;
     60c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <u8_ADC_mux>
	if (u8_ADC_mux == 2)
	{
		Set_ADC_Channel(CH_ADC3);
		u8_ADC_mux++ ;
	}
	if (u8_ADC_mux == 1)
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	1e c0       	rjmp	.+60     	; 0x650 <__vector_25+0x8c>
	if (u8_ADC_mux == 3)
	{
		u16_ADC3_reg = (ADCL+(ADCH<<8)); // reading conversion result
		u8_ADC_mux = 0;
	}
	if (u8_ADC_mux == 2)
     614:	82 30       	cpi	r24, 0x02	; 2
     616:	39 f4       	brne	.+14     	; 0x626 <__vector_25+0x62>
	{
		Set_ADC_Channel(CH_ADC3);
     618:	83 e0       	ldi	r24, 0x03	; 3
     61a:	7e d0       	rcall	.+252    	; 0x718 <Set_ADC_Channel>
		u8_ADC_mux++ ;
     61c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <u8_ADC_mux>
     620:	8f 5f       	subi	r24, 0xFF	; 255
     622:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <u8_ADC_mux>
	}
	if (u8_ADC_mux == 1)
     626:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <u8_ADC_mux>
     62a:	81 30       	cpi	r24, 0x01	; 1
     62c:	89 f4       	brne	.+34     	; 0x650 <__vector_25+0x8c>
	{
		u16_ADC2_reg = (ADCL+(ADCH<<8)); // reading conversion result
     62e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     632:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	98 2f       	mov	r25, r24
     63a:	88 27       	eor	r24, r24
     63c:	82 0f       	add	r24, r18
     63e:	91 1d       	adc	r25, r1
     640:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <u16_ADC2_reg+0x1>
     644:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <u16_ADC2_reg>
		u8_ADC_mux++ ;
     648:	82 e0       	ldi	r24, 0x02	; 2
     64a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <u8_ADC_mux>
     64e:	09 c0       	rjmp	.+18     	; 0x662 <__vector_25+0x9e>
	}
	if (u8_ADC_mux == 0)
     650:	81 11       	cpse	r24, r1
	{
		Set_ADC_Channel(CH_ADC2);
     652:	07 c0       	rjmp	.+14     	; 0x662 <__vector_25+0x9e>
     654:	82 e0       	ldi	r24, 0x02	; 2
		u8_ADC_mux++ ;
     656:	60 d0       	rcall	.+192    	; 0x718 <Set_ADC_Channel>
     658:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <u8_ADC_mux>
     65c:	8f 5f       	subi	r24, 0xFF	; 255
     65e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <u8_ADC_mux>
	}
}
     662:	ff 91       	pop	r31
     664:	ef 91       	pop	r30
     666:	bf 91       	pop	r27
     668:	af 91       	pop	r26
     66a:	9f 91       	pop	r25
     66c:	8f 91       	pop	r24
     66e:	7f 91       	pop	r23
     670:	6f 91       	pop	r22
     672:	5f 91       	pop	r21
     674:	4f 91       	pop	r20
     676:	3f 91       	pop	r19
     678:	2f 91       	pop	r18
     67a:	0f 90       	pop	r0
     67c:	0b be       	out	0x3b, r0	; 59
     67e:	0f 90       	pop	r0
     680:	0f be       	out	0x3f, r0	; 63
     682:	0f 90       	pop	r0
     684:	1f 90       	pop	r1
     686:	18 95       	reti

00000688 <pid_init>:
	output = propGain + intGain + derGain;
	//printf("Out: %d \n", output);
	return output;
}

void pid_init(Pid_t *PID, float t, float p, float i, float d){
     688:	8f 92       	push	r8
     68a:	9f 92       	push	r9
     68c:	af 92       	push	r10
     68e:	bf 92       	push	r11
     690:	cf 92       	push	r12
     692:	df 92       	push	r13
     694:	ef 92       	push	r14
     696:	ff 92       	push	r15
     698:	0f 93       	push	r16
     69a:	1f 93       	push	r17
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	cd b7       	in	r28, 0x3d	; 61
     6a2:	de b7       	in	r29, 0x3e	; 62
     6a4:	fc 01       	movw	r30, r24
	PID->Kp = p;
     6a6:	04 87       	std	Z+12, r16	; 0x0c
     6a8:	15 87       	std	Z+13, r17	; 0x0d
     6aa:	26 87       	std	Z+14, r18	; 0x0e
     6ac:	37 87       	std	Z+15, r19	; 0x0f
	PID->Ki = i;
     6ae:	c4 8a       	std	Z+20, r12	; 0x14
     6b0:	d5 8a       	std	Z+21, r13	; 0x15
     6b2:	e6 8a       	std	Z+22, r14	; 0x16
     6b4:	f7 8a       	std	Z+23, r15	; 0x17
	PID->Kd = d;
     6b6:	80 8a       	std	Z+16, r8	; 0x10
     6b8:	91 8a       	std	Z+17, r9	; 0x11
     6ba:	a2 8a       	std	Z+18, r10	; 0x12
     6bc:	b3 8a       	std	Z+19, r11	; 0x13
	PID->timeStep = t;
     6be:	40 87       	std	Z+8, r20	; 0x08
     6c0:	51 87       	std	Z+9, r21	; 0x09
     6c2:	62 87       	std	Z+10, r22	; 0x0a
     6c4:	73 87       	std	Z+11, r23	; 0x0b
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	1f 91       	pop	r17
     6cc:	0f 91       	pop	r16
     6ce:	ff 90       	pop	r15
     6d0:	ef 90       	pop	r14
     6d2:	df 90       	pop	r13
     6d4:	cf 90       	pop	r12
     6d6:	bf 90       	pop	r11
     6d8:	af 90       	pop	r10
     6da:	9f 90       	pop	r9
     6dc:	8f 90       	pop	r8
     6de:	08 95       	ret

000006e0 <adc_Free_running_init>:
	//Setting channel and type of reading, see enum in adc.h
	ADMUX &= 0b11100000;
	ADMUX |= (int8_t)channel;

	return (ADCL+(ADCH<<8));
}
     6e0:	ec e7       	ldi	r30, 0x7C	; 124
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	80 81       	ld	r24, Z
     6e6:	80 64       	ori	r24, 0x40	; 64
     6e8:	80 83       	st	Z, r24
     6ea:	ea e7       	ldi	r30, 0x7A	; 122
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	80 81       	ld	r24, Z
     6f0:	84 60       	ori	r24, 0x04	; 4
     6f2:	80 83       	st	Z, r24
     6f4:	80 81       	ld	r24, Z
     6f6:	80 62       	ori	r24, 0x20	; 32
     6f8:	80 83       	st	Z, r24
     6fa:	80 81       	ld	r24, Z
     6fc:	88 60       	ori	r24, 0x08	; 8
     6fe:	80 83       	st	Z, r24
     700:	ab e7       	ldi	r26, 0x7B	; 123
     702:	b0 e0       	ldi	r27, 0x00	; 0
     704:	8c 91       	ld	r24, X
     706:	88 7f       	andi	r24, 0xF8	; 248
     708:	8c 93       	st	X, r24
     70a:	80 81       	ld	r24, Z
     70c:	80 68       	ori	r24, 0x80	; 128
     70e:	80 83       	st	Z, r24
     710:	80 81       	ld	r24, Z
     712:	80 64       	ori	r24, 0x40	; 64
     714:	80 83       	st	Z, r24
     716:	08 95       	ret

00000718 <Set_ADC_Channel>:

void Set_ADC_Channel(adc_channel_t channel)
{
	channel &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|channel; // clears the bottom 3 bits before ORing
     718:	ec e7       	ldi	r30, 0x7C	; 124
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	90 81       	ld	r25, Z
     71e:	98 7f       	andi	r25, 0xF8	; 248
     720:	87 70       	andi	r24, 0x07	; 7
     722:	89 2b       	or	r24, r25
     724:	80 83       	st	Z, r24
     726:	08 95       	ret

00000728 <__vector_18>:

/**************************************************************************************************
*   CAN ISR - See 'can.h' Header file for Description
**************************************************************************************************/
ISR(CANIT_vect)
{
     728:	1f 92       	push	r1
     72a:	0f 92       	push	r0
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	0f 92       	push	r0
     730:	11 24       	eor	r1, r1
     732:	0b b6       	in	r0, 0x3b	; 59
     734:	0f 92       	push	r0
     736:	2f 93       	push	r18
     738:	3f 93       	push	r19
     73a:	4f 93       	push	r20
     73c:	5f 93       	push	r21
     73e:	6f 93       	push	r22
     740:	8f 93       	push	r24
     742:	9f 93       	push	r25
     744:	af 93       	push	r26
     746:	bf 93       	push	r27
     748:	ef 93       	push	r30
     74a:	ff 93       	push	r31
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	1f 92       	push	r1
     752:	cd b7       	in	r28, 0x3d	; 61
     754:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t mob_status;

	uint8_t mob_interrupts = CANSIT2;
     756:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>

	// TX
	if ((mob_interrupts & (1 << SIT0)) && (CANIE2 & (1 << ENMOB0))) {
     75a:	80 ff       	sbrs	r24, 0
     75c:	47 c0       	rjmp	.+142    	; 0x7ec <__vector_18+0xc4>
     75e:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     762:	90 ff       	sbrs	r25, 0
     764:	43 c0       	rjmp	.+134    	; 0x7ec <__vector_18+0xc4>
		CANPAGE = (0x0 << MOBNB0); //Select TX Mob (Mob0)
     766:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		mob_status = CANSTMOB;
     76a:	ee ee       	ldi	r30, 0xEE	; 238
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	80 81       	ld	r24, Z
     770:	89 83       	std	Y+1, r24	; 0x01
		CANSTMOB &= ~(1 << TXOK); //clear MB1, TX interrupt
     772:	80 81       	ld	r24, Z
     774:	8f 7b       	andi	r24, 0xBF	; 191
     776:	80 83       	st	Z, r24

		if (tx_on != tx_off) {
     778:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <tx_off>
     77c:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <tx_on>
     780:	98 17       	cp	r25, r24
     782:	89 f1       	breq	.+98     	; 0x7e6 <__vector_18+0xbe>
			unsigned char pos;
			pos = tx_off & (TX_SIZE-1);
			//set ID
			CANIDT4 = tx_frames[pos].array[0];
     784:	8f 70       	andi	r24, 0x0F	; 15
     786:	2b e0       	ldi	r18, 0x0B	; 11
     788:	82 9f       	mul	r24, r18
     78a:	c0 01       	movw	r24, r0
     78c:	11 24       	eor	r1, r1
     78e:	fc 01       	movw	r30, r24
     790:	ec 51       	subi	r30, 0x1C	; 28
     792:	fe 4f       	sbci	r31, 0xFE	; 254
     794:	20 81       	ld	r18, Z
     796:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			CANIDT2 = tx_frames[pos].array[0];
     79a:	20 81       	ld	r18, Z
     79c:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			CANIDT1 = tx_frames[pos].array[1];
     7a0:	21 81       	ldd	r18, Z+1	; 0x01
     7a2:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

			//program data registers - auto increment CANMSG
			CANMSG = tx_frames[pos].data[0];
     7a6:	23 81       	ldd	r18, Z+3	; 0x03
     7a8:	aa ef       	ldi	r26, 0xFA	; 250
     7aa:	b0 e0       	ldi	r27, 0x00	; 0
     7ac:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[1];
     7ae:	24 81       	ldd	r18, Z+4	; 0x04
     7b0:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[2];
     7b2:	25 81       	ldd	r18, Z+5	; 0x05
     7b4:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[3];
     7b6:	26 81       	ldd	r18, Z+6	; 0x06
     7b8:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[4];
     7ba:	27 81       	ldd	r18, Z+7	; 0x07
     7bc:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[5];
     7be:	20 85       	ldd	r18, Z+8	; 0x08
     7c0:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[6];
     7c2:	21 85       	ldd	r18, Z+9	; 0x09
     7c4:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[7];
     7c6:	22 85       	ldd	r18, Z+10	; 0x0a
     7c8:	2c 93       	st	X, r18

			//set length and request send
			CANCDMOB = (1 << CONMOB0) | tx_frames[pos].length;
     7ca:	fc 01       	movw	r30, r24
     7cc:	ea 51       	subi	r30, 0x1A	; 26
     7ce:	fe 4f       	sbci	r31, 0xFE	; 254
     7d0:	80 81       	ld	r24, Z
     7d2:	8f 70       	andi	r24, 0x0F	; 15
     7d4:	80 64       	ori	r24, 0x40	; 64
     7d6:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
			tx_off++;
     7da:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <tx_off>
     7de:	8f 5f       	subi	r24, 0xFF	; 255
     7e0:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <tx_off>
     7e4:	7d c0       	rjmp	.+250    	; 0x8e0 <__vector_18+0x1b8>
		} else {
			tx_busy = 0;
     7e6:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <tx_busy>
     7ea:	7a c0       	rjmp	.+244    	; 0x8e0 <__vector_18+0x1b8>
		}
	}
	// RX
	else if ((mob_interrupts & (1 << SIT1)) && (CANIE2 & (1 << ENMOB1))) {
     7ec:	81 ff       	sbrs	r24, 1
     7ee:	78 c0       	rjmp	.+240    	; 0x8e0 <__vector_18+0x1b8>
     7f0:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     7f4:	81 ff       	sbrs	r24, 1
     7f6:	74 c0       	rjmp	.+232    	; 0x8e0 <__vector_18+0x1b8>
		//Select RX Mob (Mob1)
		CANPAGE = (0x1 << MOBNB0);
     7f8:	80 e1       	ldi	r24, 0x10	; 16
     7fa:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		if (((rx_on - rx_off) & RX_ABS_MASK) < RX_SIZE) {
     7fe:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <rx_on>
     802:	28 2f       	mov	r18, r24
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <rx_off>
     80a:	29 1b       	sub	r18, r25
     80c:	31 09       	sbc	r19, r1
     80e:	2f 77       	andi	r18, 0x7F	; 127
     810:	33 27       	eor	r19, r19
     812:	20 31       	cpi	r18, 0x10	; 16
     814:	31 05       	cpc	r19, r1
     816:	0c f0       	brlt	.+2      	; 0x81a <__vector_18+0xf2>
     818:	58 c0       	rjmp	.+176    	; 0x8ca <__vector_18+0x1a2>
			unsigned char pos;
			pos = rx_on & (RX_SIZE-1);
			//Read length
			rx_frames[pos].length = CANCDMOB & 0x0F;
     81a:	e8 2f       	mov	r30, r24
     81c:	ef 70       	andi	r30, 0x0F	; 15
     81e:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     822:	2e 2f       	mov	r18, r30
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	4b e0       	ldi	r20, 0x0B	; 11
     828:	e4 9f       	mul	r30, r20
     82a:	f0 01       	movw	r30, r0
     82c:	11 24       	eor	r1, r1
     82e:	ec 5c       	subi	r30, 0xCC	; 204
     830:	fe 4f       	sbci	r31, 0xFE	; 254
     832:	9f 70       	andi	r25, 0x0F	; 15
     834:	42 81       	ldd	r20, Z+2	; 0x02
     836:	40 7f       	andi	r20, 0xF0	; 240
     838:	94 2b       	or	r25, r20
     83a:	92 83       	std	Z+2, r25	; 0x02
			//Read ID
			rx_frames[pos].array[0] = (CANIDT2 & 0xE0) | (CANIDT4 & 0x07);
     83c:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     840:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     844:	40 7e       	andi	r20, 0xE0	; 224
     846:	97 70       	andi	r25, 0x07	; 7
     848:	94 2b       	or	r25, r20
     84a:	90 83       	st	Z, r25
			rx_frames[pos].array[1] = CANIDT1;
     84c:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     850:	91 83       	std	Z+1, r25	; 0x01

			//read data registers - auto increment CANMSG
			rx_frames[pos].data[0] = CANMSG;
     852:	aa ef       	ldi	r26, 0xFA	; 250
     854:	b0 e0       	ldi	r27, 0x00	; 0
     856:	9c 91       	ld	r25, X
     858:	93 83       	std	Z+3, r25	; 0x03
			rx_frames[pos].data[1] = CANMSG;
     85a:	9c 91       	ld	r25, X
     85c:	94 83       	std	Z+4, r25	; 0x04
			rx_frames[pos].data[2] = CANMSG;
     85e:	9c 91       	ld	r25, X
     860:	95 83       	std	Z+5, r25	; 0x05
			rx_frames[pos].data[3] = CANMSG;
     862:	9c 91       	ld	r25, X
     864:	96 83       	std	Z+6, r25	; 0x06
			rx_frames[pos].data[4] = CANMSG;
     866:	9c 91       	ld	r25, X
     868:	97 83       	std	Z+7, r25	; 0x07
			rx_frames[pos].data[5] = CANMSG;
     86a:	9c 91       	ld	r25, X
     86c:	90 87       	std	Z+8, r25	; 0x08
			rx_frames[pos].data[6] = CANMSG;
     86e:	9c 91       	ld	r25, X
     870:	91 87       	std	Z+9, r25	; 0x09
			rx_frames[pos].data[7] = CANMSG;
     872:	9c 91       	ld	r25, X
     874:	92 87       	std	Z+10, r25	; 0x0a
			rx_on++;
     876:	8f 5f       	subi	r24, 0xFF	; 255
     878:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <rx_on>

			// Reset if reset can message
			if(rx_frames[pos].id == 0x000 && rx_frames[pos].data[0] == 0x03){
     87c:	40 81       	ld	r20, Z
     87e:	42 95       	swap	r20
     880:	46 95       	lsr	r20
     882:	47 70       	andi	r20, 0x07	; 7
     884:	51 81       	ldd	r21, Z+1	; 0x01
     886:	65 2f       	mov	r22, r21
     888:	66 0f       	add	r22, r22
     88a:	66 0f       	add	r22, r22
     88c:	66 0f       	add	r22, r22
     88e:	86 2f       	mov	r24, r22
     890:	84 2b       	or	r24, r20
     892:	95 2f       	mov	r25, r21
     894:	92 95       	swap	r25
     896:	96 95       	lsr	r25
     898:	97 70       	andi	r25, 0x07	; 7
     89a:	89 2b       	or	r24, r25
     89c:	b1 f4       	brne	.+44     	; 0x8ca <__vector_18+0x1a2>
     89e:	8b e0       	ldi	r24, 0x0B	; 11
     8a0:	82 9f       	mul	r24, r18
     8a2:	f0 01       	movw	r30, r0
     8a4:	83 9f       	mul	r24, r19
     8a6:	f0 0d       	add	r31, r0
     8a8:	11 24       	eor	r1, r1
     8aa:	ec 5c       	subi	r30, 0xCC	; 204
     8ac:	fe 4f       	sbci	r31, 0xFE	; 254
     8ae:	83 81       	ldd	r24, Z+3	; 0x03
     8b0:	83 30       	cpi	r24, 0x03	; 3
     8b2:	59 f4       	brne	.+22     	; 0x8ca <__vector_18+0x1a2>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     8b4:	98 e0       	ldi	r25, 0x08	; 8
     8b6:	88 e1       	ldi	r24, 0x18	; 24
     8b8:	0f b6       	in	r0, 0x3f	; 63
     8ba:	f8 94       	cli
     8bc:	a8 95       	wdr
     8be:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     8c8:	ff cf       	rjmp	.-2      	; 0x8c8 <__vector_18+0x1a0>
				while(1); //wait for watchdog
			}
		}

		// Clear irq
		mob_status = CANSTMOB;
     8ca:	ee ee       	ldi	r30, 0xEE	; 238
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	80 81       	ld	r24, Z
     8d0:	89 83       	std	Y+1, r24	; 0x01
		(void)mob_status;
     8d2:	89 81       	ldd	r24, Y+1	; 0x01

		CANSTMOB &= ~(1 << RXOK);
     8d4:	80 81       	ld	r24, Z
     8d6:	8f 7d       	andi	r24, 0xDF	; 223
     8d8:	80 83       	st	Z, r24
		CANCDMOB = (1 << CONMOB1);			//Set Mob 1 as RX
     8da:	80 e8       	ldi	r24, 0x80	; 128
     8dc:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	}
}
     8e0:	0f 90       	pop	r0
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	ff 91       	pop	r31
     8e8:	ef 91       	pop	r30
     8ea:	bf 91       	pop	r27
     8ec:	af 91       	pop	r26
     8ee:	9f 91       	pop	r25
     8f0:	8f 91       	pop	r24
     8f2:	6f 91       	pop	r22
     8f4:	5f 91       	pop	r21
     8f6:	4f 91       	pop	r20
     8f8:	3f 91       	pop	r19
     8fa:	2f 91       	pop	r18
     8fc:	0f 90       	pop	r0
     8fe:	0b be       	out	0x3b, r0	; 59
     900:	0f 90       	pop	r0
     902:	0f be       	out	0x3f, r0	; 63
     904:	0f 90       	pop	r0
     906:	1f 90       	pop	r1
     908:	18 95       	reti

0000090a <can_init>:


void can_init(uint16_t accept_mask_id, uint16_t accept_tag_id) {
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
	// Reset CAN controller
	CANGCON = (1 << SWRES);
     90e:	e8 ed       	ldi	r30, 0xD8	; 216
     910:	f0 e0       	ldi	r31, 0x00	; 0
     912:	21 e0       	ldi	r18, 0x01	; 1
     914:	20 83       	st	Z, r18

	CANBT1 = (BRP_VALUE - 1) << 1;
     916:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = ((SJW_VALUE - 1) << 5) | ((PROP_SEG - 1) << 1);
     91a:	2c e0       	ldi	r18, 0x0C	; 12
     91c:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = ((PHASE_SEG_2 - 1) << 4) | ((PHASE_SEG_1 - 1) << 1) | 1;
     920:	27 e3       	ldi	r18, 0x37	; 55
     922:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	CANTIM = 0;
     926:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
     92a:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	CANTTC = 0;
     92e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     932:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	CANHPMOB = 0;
     936:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	CANTCON = 0;
     93a:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	// Switch to Mob 0 access
	CANPAGE = (0x0 << MOBNB0);
     93e:	cd ee       	ldi	r28, 0xED	; 237
     940:	d0 e0       	ldi	r29, 0x00	; 0
     942:	18 82       	st	Y, r1
	CANSTMOB = 0;
     944:	ae ee       	ldi	r26, 0xEE	; 238
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	1c 92       	st	X, r1

	// Switch to Mob 1 access
	CANPAGE = (0x1 << MOBNB0);
     94a:	20 e1       	ldi	r18, 0x10	; 16
     94c:	28 83       	st	Y, r18
	CANSTMOB = 0;
     94e:	1c 92       	st	X, r1
	CANIDM4 = 0;
     950:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANIDM2 = (accept_mask_id << 5) & 0xFF;
     954:	28 2f       	mov	r18, r24
     956:	22 95       	swap	r18
     958:	22 0f       	add	r18, r18
     95a:	20 7e       	andi	r18, 0xE0	; 224
     95c:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = (accept_mask_id >> 3) & 0xFF;
     960:	96 95       	lsr	r25
     962:	87 95       	ror	r24
     964:	96 95       	lsr	r25
     966:	87 95       	ror	r24
     968:	96 95       	lsr	r25
     96a:	87 95       	ror	r24
     96c:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDT4 = 0;
     970:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT2 = (accept_tag_id << 5) & 0xFF;
     974:	86 2f       	mov	r24, r22
     976:	82 95       	swap	r24
     978:	88 0f       	add	r24, r24
     97a:	80 7e       	andi	r24, 0xE0	; 224
     97c:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (accept_tag_id >> 3) & 0xFF;
     980:	76 95       	lsr	r23
     982:	67 95       	ror	r22
     984:	76 95       	lsr	r23
     986:	67 95       	ror	r22
     988:	76 95       	lsr	r23
     98a:	67 95       	ror	r22
     98c:	60 93 f3 00 	sts	0x00F3, r22	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

	// Set Mob 1 as RX
	CANCDMOB = (1 << CONMOB1);
     990:	80 e8       	ldi	r24, 0x80	; 128
     992:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	// Enable Mob 0 and 1
	CANEN2 = (1 << ENMOB1) | (1 << ENMOB0);
     996:	83 e0       	ldi	r24, 0x03	; 3
     998:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	// Enable Mob 0 and 1 Interrupt
	CANIE2 = (1 << ENMOB1) | (1 << ENMOB0);
     99c:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	// Enable TX and RX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);	
     9a0:	80 eb       	ldi	r24, 0xB0	; 176
     9a2:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>

	// Enable CAN controller
	CANGCON = (1 << ENASTB);
     9a6:	82 e0       	ldi	r24, 0x02	; 2
     9a8:	80 83       	st	Z, r24

	reset = 0;
     9aa:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <reset>
}
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	08 95       	ret

000009b4 <can_read_message_if_new>:

bool can_read_message_if_new(CanMessage_t* message) {
     9b4:	cf 93       	push	r28
     9b6:	df 93       	push	r29
     9b8:	ec 01       	movw	r28, r24
	// Check if there is a new message
	if (rx_on == rx_off) {
     9ba:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <rx_off>
     9be:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <rx_on>
     9c2:	24 17       	cp	r18, r20
     9c4:	89 f1       	breq	.+98     	; 0xa28 <can_read_message_if_new+0x74>
     9c6:	a4 2f       	mov	r26, r20
     9c8:	af 70       	andi	r26, 0x0F	; 15
	}

	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
     9ca:	8b e0       	ldi	r24, 0x0B	; 11
     9cc:	a8 9f       	mul	r26, r24
     9ce:	b0 01       	movw	r22, r0
     9d0:	11 24       	eor	r1, r1
     9d2:	fb 01       	movw	r30, r22
     9d4:	ec 5c       	subi	r30, 0xCC	; 204
     9d6:	fe 4f       	sbci	r31, 0xFE	; 254
     9d8:	20 81       	ld	r18, Z
     9da:	22 95       	swap	r18
     9dc:	26 95       	lsr	r18
     9de:	27 70       	andi	r18, 0x07	; 7
     9e0:	31 81       	ldd	r19, Z+1	; 0x01
     9e2:	53 2f       	mov	r21, r19
     9e4:	55 0f       	add	r21, r21
     9e6:	55 0f       	add	r21, r21
     9e8:	55 0f       	add	r21, r21
     9ea:	25 2b       	or	r18, r21
     9ec:	32 95       	swap	r19
     9ee:	36 95       	lsr	r19
     9f0:	37 70       	andi	r19, 0x07	; 7
     9f2:	28 83       	st	Y, r18
     9f4:	39 83       	std	Y+1, r19	; 0x01
	message->length = frame->length;
     9f6:	fb 01       	movw	r30, r22
     9f8:	ea 5c       	subi	r30, 0xCA	; 202
     9fa:	fe 4f       	sbci	r31, 0xFE	; 254
     9fc:	20 81       	ld	r18, Z
     9fe:	2f 70       	andi	r18, 0x0F	; 15
     a00:	2a 83       	std	Y+2, r18	; 0x02
	for (int i = 0; i < message->length; i++) {
     a02:	22 23       	and	r18, r18
     a04:	99 f0       	breq	.+38     	; 0xa2c <can_read_message_if_new+0x78>
     a06:	db 01       	movw	r26, r22
     a08:	a9 5c       	subi	r26, 0xC9	; 201
     a0a:	be 4f       	sbci	r27, 0xFE	; 254
     a0c:	fe 01       	movw	r30, r28
     a0e:	33 96       	adiw	r30, 0x03	; 3
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	2d 5f       	subi	r18, 0xFD	; 253
     a14:	3f 4f       	sbci	r19, 0xFF	; 255
     a16:	ce 01       	movw	r24, r28
     a18:	82 0f       	add	r24, r18
     a1a:	93 1f       	adc	r25, r19
		message->data.u8[i] = frame->data[i];
     a1c:	2d 91       	ld	r18, X+
     a1e:	21 93       	st	Z+, r18
	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
	message->length = frame->length;
	for (int i = 0; i < message->length; i++) {
     a20:	e8 17       	cp	r30, r24
     a22:	f9 07       	cpc	r31, r25
     a24:	d9 f7       	brne	.-10     	; 0xa1c <can_read_message_if_new+0x68>
     a26:	02 c0       	rjmp	.+4      	; 0xa2c <can_read_message_if_new+0x78>
}

bool can_read_message_if_new(CanMessage_t* message) {
	// Check if there is a new message
	if (rx_on == rx_off) {
		return false;
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	04 c0       	rjmp	.+8      	; 0xa34 <can_read_message_if_new+0x80>
		message->data.u8[i] = frame->data[i];
	}

	// Advance to next can message
	if (rx_on != rx_off) {
		rx_off++;
     a2c:	4f 5f       	subi	r20, 0xFF	; 255
     a2e:	40 93 30 01 	sts	0x0130, r20	; 0x800130 <rx_off>
	}

	return true;
     a32:	81 e0       	ldi	r24, 0x01	; 1
}
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	08 95       	ret

00000a3a <can_send_message>:

bool can_send_message(CanMessage_t* message) {
     a3a:	cf 93       	push	r28
     a3c:	df 93       	push	r29
     a3e:	fc 01       	movw	r30, r24
	bool result = false;

	CANGIE &= ~(1 << ENIT);
     a40:	ab ed       	ldi	r26, 0xDB	; 219
     a42:	b0 e0       	ldi	r27, 0x00	; 0
     a44:	8c 91       	ld	r24, X
     a46:	8f 77       	andi	r24, 0x7F	; 127
     a48:	8c 93       	st	X, r24

	if (!tx_busy) {
     a4a:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <tx_busy>
     a4e:	81 11       	cpse	r24, r1
     a50:	27 c0       	rjmp	.+78     	; 0xaa0 <can_send_message+0x66>
		// Switch to Mob 0 access
		CANPAGE = 0 << 4;
     a52:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		// Set ID
		CANIDT2 = message->id << 5;
     a56:	80 81       	ld	r24, Z
     a58:	82 95       	swap	r24
     a5a:	88 0f       	add	r24, r24
     a5c:	80 7e       	andi	r24, 0xE0	; 224
     a5e:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT1 = message->id >> 3;
     a62:	80 81       	ld	r24, Z
     a64:	91 81       	ldd	r25, Z+1	; 0x01
     a66:	96 95       	lsr	r25
     a68:	87 95       	ror	r24
     a6a:	96 95       	lsr	r25
     a6c:	87 95       	ror	r24
     a6e:	96 95       	lsr	r25
     a70:	87 95       	ror	r24
     a72:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     a76:	df 01       	movw	r26, r30
     a78:	13 96       	adiw	r26, 0x03	; 3
     a7a:	9f 01       	movw	r18, r30
     a7c:	25 5f       	subi	r18, 0xF5	; 245
     a7e:	3f 4f       	sbci	r19, 0xFF	; 255

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
     a80:	ca ef       	ldi	r28, 0xFA	; 250
     a82:	d0 e0       	ldi	r29, 0x00	; 0
     a84:	9d 91       	ld	r25, X+
     a86:	98 83       	st	Y, r25
		// Set ID
		CANIDT2 = message->id << 5;
		CANIDT1 = message->id >> 3;

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
     a88:	a2 17       	cp	r26, r18
     a8a:	b3 07       	cpc	r27, r19
     a8c:	d9 f7       	brne	.-10     	; 0xa84 <can_send_message+0x4a>
			CANMSG = message->data.u8[i];
		}
		
		result = true;
		tx_busy = 1;
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <tx_busy>

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
     a94:	82 81       	ldd	r24, Z+2	; 0x02
     a96:	80 64       	ori	r24, 0x40	; 64
     a98:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
		}
		
		result = true;
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	43 c0       	rjmp	.+134    	; 0xb26 <can_send_message+0xec>
		tx_busy = 1;

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
	}
	else if (TX_SIZE - ((tx_on - tx_off) & TX_ABS_MASK)) {
     aa0:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <tx_on>
     aa4:	82 2f       	mov	r24, r18
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <tx_off>
     aac:	83 1b       	sub	r24, r19
     aae:	91 09       	sbc	r25, r1
     ab0:	8f 77       	andi	r24, 0x7F	; 127
     ab2:	99 27       	eor	r25, r25
     ab4:	40 97       	sbiw	r24, 0x10	; 16
     ab6:	b1 f1       	breq	.+108    	; 0xb24 <can_send_message+0xea>
		// Copy data into TX buffer
		tx_frames[tx_on & (TX_SIZE-1)].id = message->id;
     ab8:	a2 2f       	mov	r26, r18
     aba:	af 70       	andi	r26, 0x0F	; 15
     abc:	8b e0       	ldi	r24, 0x0B	; 11
     abe:	a8 9f       	mul	r26, r24
     ac0:	d0 01       	movw	r26, r0
     ac2:	11 24       	eor	r1, r1
     ac4:	ed 01       	movw	r28, r26
     ac6:	cc 51       	subi	r28, 0x1C	; 28
     ac8:	de 4f       	sbci	r29, 0xFE	; 254
     aca:	80 81       	ld	r24, Z
     acc:	98 2f       	mov	r25, r24
     ace:	92 95       	swap	r25
     ad0:	99 0f       	add	r25, r25
     ad2:	90 7e       	andi	r25, 0xE0	; 224
     ad4:	88 81       	ld	r24, Y
     ad6:	8f 71       	andi	r24, 0x1F	; 31
     ad8:	89 2b       	or	r24, r25
     ada:	88 83       	st	Y, r24
     adc:	80 81       	ld	r24, Z
     ade:	98 2f       	mov	r25, r24
     ae0:	96 95       	lsr	r25
     ae2:	96 95       	lsr	r25
     ae4:	96 95       	lsr	r25
     ae6:	89 81       	ldd	r24, Y+1	; 0x01
     ae8:	80 7e       	andi	r24, 0xE0	; 224
     aea:	89 2b       	or	r24, r25
     aec:	89 83       	std	Y+1, r24	; 0x01
     aee:	91 81       	ldd	r25, Z+1	; 0x01
     af0:	92 95       	swap	r25
     af2:	99 0f       	add	r25, r25
     af4:	90 7e       	andi	r25, 0xE0	; 224
     af6:	8f 71       	andi	r24, 0x1F	; 31
     af8:	89 2b       	or	r24, r25
     afa:	89 83       	std	Y+1, r24	; 0x01
		tx_frames[tx_on & (TX_SIZE-1)].length = message->length;
     afc:	82 81       	ldd	r24, Z+2	; 0x02
     afe:	98 2f       	mov	r25, r24
     b00:	9f 70       	andi	r25, 0x0F	; 15
     b02:	8a 81       	ldd	r24, Y+2	; 0x02
     b04:	80 7f       	andi	r24, 0xF0	; 240
     b06:	89 2b       	or	r24, r25
     b08:	8a 83       	std	Y+2, r24	; 0x02
		memcpy(tx_frames[tx_on & (TX_SIZE-1)].data, &message->data, CAN_FRAME_DATA_MAX_LENGTH);
     b0a:	a9 51       	subi	r26, 0x19	; 25
     b0c:	be 4f       	sbci	r27, 0xFE	; 254
     b0e:	33 96       	adiw	r30, 0x03	; 3
     b10:	88 e0       	ldi	r24, 0x08	; 8
     b12:	01 90       	ld	r0, Z+
     b14:	0d 92       	st	X+, r0
     b16:	8a 95       	dec	r24
     b18:	e1 f7       	brne	.-8      	; 0xb12 <can_send_message+0xd8>

		/*for (int i = 0; i < 8; i++) {
			tx_frames[tx_on & (TX_SIZE-1)].data[i] = message->data.u8[i];
		}*/

		tx_on++;
     b1a:	2f 5f       	subi	r18, 0xFF	; 255
     b1c:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <tx_on>
		result = true;
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	01 c0       	rjmp	.+2      	; 0xb26 <can_send_message+0xec>

	return true;
}

bool can_send_message(CanMessage_t* message) {
	bool result = false;
     b24:	80 e0       	ldi	r24, 0x00	; 0

		tx_on++;
		result = true;
	}

	CANGIE |= (1 << ENIT);
     b26:	eb ed       	ldi	r30, 0xDB	; 219
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	90 81       	ld	r25, Z
     b2c:	90 68       	ori	r25, 0x80	; 128
     b2e:	90 83       	st	Z, r25

	return result;
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	08 95       	ret

00000b36 <pwm_init>:
#include "pwm.h"

#include <avr/interrupt.h>
#include <avr/io.h>

void pwm_init(void){
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
	
	//Set pwm_pins as output;
	PORTE &= ~((1<<PE3)|(1<<PE4)|(1<<PE5));
     b3e:	8e b1       	in	r24, 0x0e	; 14
     b40:	87 7c       	andi	r24, 0xC7	; 199
     b42:	8e b9       	out	0x0e, r24	; 14
	DDRE |= (1<<PE3)|(1<<PE4)|(1<<PE5);
     b44:	8d b1       	in	r24, 0x0d	; 13
     b46:	88 63       	ori	r24, 0x38	; 56
     b48:	8d b9       	out	0x0d, r24	; 13
	
	PORTB &= ~(1<<PB4);
     b4a:	2c 98       	cbi	0x05, 4	; 5
	DDRB |= (1<<PB4);
     b4c:	24 9a       	sbi	0x04, 4	; 4
	
	//Timer 3 fast pwm, mode 14, TOP at ICR
	TCCR3B |= (1<<WGM33)|(1<<WGM32);
     b4e:	a1 e9       	ldi	r26, 0x91	; 145
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	8c 91       	ld	r24, X
     b54:	88 61       	ori	r24, 0x18	; 24
     b56:	8c 93       	st	X, r24
	TCCR3A |= (1<<WGM31);
     b58:	e0 e9       	ldi	r30, 0x90	; 144
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	80 81       	ld	r24, Z
     b5e:	82 60       	ori	r24, 0x02	; 2
     b60:	80 83       	st	Z, r24
	TCCR3A &= ~(1<<WGM30);
     b62:	80 81       	ld	r24, Z
     b64:	8e 7f       	andi	r24, 0xFE	; 254
     b66:	80 83       	st	Z, r24
	
	//Timer 2 fast pwm, mode 3, Top at 0xFF
	TCCR2A |= (1<<WGM21)|(1<<WGM20);
     b68:	c0 eb       	ldi	r28, 0xB0	; 176
     b6a:	d0 e0       	ldi	r29, 0x00	; 0
     b6c:	88 81       	ld	r24, Y
     b6e:	88 64       	ori	r24, 0x48	; 72
     b70:	88 83       	st	Y, r24

	// Non inverted PWM for A
	TCCR3A |= (1<<COM3A1);
     b72:	80 81       	ld	r24, Z
     b74:	80 68       	ori	r24, 0x80	; 128
     b76:	80 83       	st	Z, r24
	TCCR3A &= ~(1<<COM3A0);
     b78:	80 81       	ld	r24, Z
     b7a:	8f 7b       	andi	r24, 0xBF	; 191
     b7c:	80 83       	st	Z, r24
	
	// Inverted PWM for B
	TCCR3A |= (1<<COM3B1);
     b7e:	80 81       	ld	r24, Z
     b80:	80 62       	ori	r24, 0x20	; 32
     b82:	80 83       	st	Z, r24
	TCCR3A |= (1<<COM3B0);
     b84:	80 81       	ld	r24, Z
     b86:	80 61       	ori	r24, 0x10	; 16
     b88:	80 83       	st	Z, r24
	
	TCCR2A |= (1<<COM2A1);
     b8a:	88 81       	ld	r24, Y
     b8c:	80 62       	ori	r24, 0x20	; 32
     b8e:	88 83       	st	Y, r24
	TCCR2A &=  ~((1<<COM2A0));
     b90:	88 81       	ld	r24, Y
     b92:	8f 7e       	andi	r24, 0xEF	; 239
     b94:	88 83       	st	Y, r24
	
	//Set prescale clk/1 for timer 3
	
	TCCR3B |= (1<<CS30);
     b96:	8c 91       	ld	r24, X
     b98:	81 60       	ori	r24, 0x01	; 1
     b9a:	8c 93       	st	X, r24
	TCCR3B &= ~((1<<CS32)|(1<<CS31));
     b9c:	8c 91       	ld	r24, X
     b9e:	89 7f       	andi	r24, 0xF9	; 249
     ba0:	8c 93       	st	X, r24
	
	//Set top value for timer 3
	ICR3 = 0x199; //20kHz
     ba2:	e6 e9       	ldi	r30, 0x96	; 150
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	89 e9       	ldi	r24, 0x99	; 153
     ba8:	91 e0       	ldi	r25, 0x01	; 1
     baa:	91 83       	std	Z+1, r25	; 0x01
     bac:	80 83       	st	Z, r24
	
	//Set off 
	OCR3A = 0;
     bae:	c8 e9       	ldi	r28, 0x98	; 152
     bb0:	d0 e0       	ldi	r29, 0x00	; 0
     bb2:	19 82       	std	Y+1, r1	; 0x01
     bb4:	18 82       	st	Y, r1
	OCR3B = 0;
     bb6:	0a e9       	ldi	r16, 0x9A	; 154
     bb8:	10 e0       	ldi	r17, 0x00	; 0
     bba:	d8 01       	movw	r26, r16
     bbc:	11 96       	adiw	r26, 0x01	; 1
     bbe:	1c 92       	st	X, r1
     bc0:	1e 92       	st	-X, r1
	OCR3C = 0;
     bc2:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
     bc6:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	OCR2A = 0;	
     bca:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	
	OCR3A = (int)((0.5)*ICR3) ; //PWM_PE3 (non inverted)
     bce:	60 81       	ld	r22, Z
     bd0:	71 81       	ldd	r23, Z+1	; 0x01
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	7d d1       	rcall	.+762    	; 0xed2 <__floatunsisf>
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	40 e0       	ldi	r20, 0x00	; 0
     bde:	5f e3       	ldi	r21, 0x3F	; 63
     be0:	2e d2       	rcall	.+1116   	; 0x103e <__mulsf3>
     be2:	46 d1       	rcall	.+652    	; 0xe70 <__fixsfsi>
     be4:	79 83       	std	Y+1, r23	; 0x01
     be6:	68 83       	st	Y, r22
	OCR3B = OCR3A ; //PWM_PE4 (inverted)
     be8:	88 81       	ld	r24, Y
     bea:	99 81       	ldd	r25, Y+1	; 0x01
     bec:	f8 01       	movw	r30, r16
     bee:	91 83       	std	Z+1, r25	; 0x01
     bf0:	80 83       	st	Z, r24
}
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	1f 91       	pop	r17
     bf8:	0f 91       	pop	r16
     bfa:	08 95       	ret

00000bfc <rgbled_turn_off>:
	DDRB |= LED_ALL;
	rgbled_turn_off(LED_ALL);
}

void rgbled_turn_off(RgbLedColor_t color) {
	PORTB |= color;
     bfc:	95 b1       	in	r25, 0x05	; 5
     bfe:	89 2b       	or	r24, r25
     c00:	85 b9       	out	0x05, r24	; 5
     c02:	08 95       	ret

00000c04 <rgbled_init>:
#include "rgbled.h"
#include <avr/io.h>


void rgbled_init() {
	DDRB |= LED_ALL;
     c04:	84 b1       	in	r24, 0x04	; 4
     c06:	80 6e       	ori	r24, 0xE0	; 224
     c08:	84 b9       	out	0x04, r24	; 4
	rgbled_turn_off(LED_ALL);
     c0a:	80 ee       	ldi	r24, 0xE0	; 224
     c0c:	f7 cf       	rjmp	.-18     	; 0xbfc <rgbled_turn_off>
     c0e:	08 95       	ret

00000c10 <rgbled_turn_on>:
void rgbled_turn_off(RgbLedColor_t color) {
	PORTB |= color;
}

void rgbled_turn_on(RgbLedColor_t color) {
	PORTB &= ~color;
     c10:	95 b1       	in	r25, 0x05	; 5
     c12:	80 95       	com	r24
     c14:	98 23       	and	r25, r24
     c16:	95 b9       	out	0x05, r25	; 5
     c18:	08 95       	ret

00000c1a <__vector_17>:

uint16_t timer_elapsed_ms(timer_t timer) {
	return elapsed_microseconds[timer] / 1000;
}

ISR(TIMER0_OVF_vect) {
     c1a:	1f 92       	push	r1
     c1c:	0f 92       	push	r0
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	0f 92       	push	r0
     c22:	11 24       	eor	r1, r1
     c24:	0b b6       	in	r0, 0x3b	; 59
     c26:	0f 92       	push	r0
     c28:	2f 93       	push	r18
     c2a:	3f 93       	push	r19
     c2c:	4f 93       	push	r20
     c2e:	5f 93       	push	r21
     c30:	6f 93       	push	r22
     c32:	7f 93       	push	r23
     c34:	8f 93       	push	r24
     c36:	af 93       	push	r26
     c38:	bf 93       	push	r27
     c3a:	ef 93       	push	r30
     c3c:	ff 93       	push	r31
     c3e:	a4 eb       	ldi	r26, 0xB4	; 180
     c40:	b2 e0       	ldi	r27, 0x02	; 2
     c42:	e4 e9       	ldi	r30, 0x94	; 148
     c44:	f2 e0       	ldi	r31, 0x02	; 2
     c46:	24 eb       	ldi	r18, 0xB4	; 180
     c48:	32 e0       	ldi	r19, 0x02	; 2
	for (int t = 0; t < NUMBER_OF_TIMERS; t++) {
		if (timer_enabled[t]){
     c4a:	8d 91       	ld	r24, X+
     c4c:	88 23       	and	r24, r24
     c4e:	59 f0       	breq	.+22     	; 0xc66 <__vector_17+0x4c>
			elapsed_microseconds[t] += (1000000ULL * 256 * 256) / F_CPU;
     c50:	40 81       	ld	r20, Z
     c52:	51 81       	ldd	r21, Z+1	; 0x01
     c54:	62 81       	ldd	r22, Z+2	; 0x02
     c56:	73 81       	ldd	r23, Z+3	; 0x03
     c58:	50 5e       	subi	r21, 0xE0	; 224
     c5a:	6f 4f       	sbci	r22, 0xFF	; 255
     c5c:	7f 4f       	sbci	r23, 0xFF	; 255
     c5e:	40 83       	st	Z, r20
     c60:	51 83       	std	Z+1, r21	; 0x01
     c62:	62 83       	std	Z+2, r22	; 0x02
     c64:	73 83       	std	Z+3, r23	; 0x03
     c66:	34 96       	adiw	r30, 0x04	; 4
uint16_t timer_elapsed_ms(timer_t timer) {
	return elapsed_microseconds[timer] / 1000;
}

ISR(TIMER0_OVF_vect) {
	for (int t = 0; t < NUMBER_OF_TIMERS; t++) {
     c68:	e2 17       	cp	r30, r18
     c6a:	f3 07       	cpc	r31, r19
     c6c:	71 f7       	brne	.-36     	; 0xc4a <__vector_17+0x30>
		if (timer_enabled[t]){
			elapsed_microseconds[t] += (1000000ULL * 256 * 256) / F_CPU;
		}
	}
}
     c6e:	ff 91       	pop	r31
     c70:	ef 91       	pop	r30
     c72:	bf 91       	pop	r27
     c74:	af 91       	pop	r26
     c76:	8f 91       	pop	r24
     c78:	7f 91       	pop	r23
     c7a:	6f 91       	pop	r22
     c7c:	5f 91       	pop	r21
     c7e:	4f 91       	pop	r20
     c80:	3f 91       	pop	r19
     c82:	2f 91       	pop	r18
     c84:	0f 90       	pop	r0
     c86:	0b be       	out	0x3b, r0	; 59
     c88:	0f 90       	pop	r0
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	0f 90       	pop	r0
     c8e:	1f 90       	pop	r1
     c90:	18 95       	reti

00000c92 <usbdbg_tx_char>:
	fdevopen(usbdbg_tx_char, NULL);
}

int usbdbg_tx_char(char c, FILE* stream)
{
	while (!(UCSR0A & (1 << UDRE0))) { }; // Wait until data register is empty
     c92:	e0 ec       	ldi	r30, 0xC0	; 192
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	90 81       	ld	r25, Z
     c98:	95 ff       	sbrs	r25, 5
     c9a:	fd cf       	rjmp	.-6      	; 0xc96 <usbdbg_tx_char+0x4>
	UDR0 = c;
     c9c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 1;
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	08 95       	ret

00000ca6 <usbdbg_init>:
#include <stdlib.h>

void usbdbg_init()
{
	const uint32_t baud_rate = 9600;
	UBRR0 = (F_CPU / 16) / baud_rate - 1;
     ca6:	83 e3       	ldi	r24, 0x33	; 51
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     cae:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C = (3 << UCSZ0);	// 8 bit transfer
     cb2:	86 e0       	ldi	r24, 0x06	; 6
     cb4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B |= (1 << TXEN0); // Enable transmit
     cb8:	e1 ec       	ldi	r30, 0xC1	; 193
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	88 60       	ori	r24, 0x08	; 8
     cc0:	80 83       	st	Z, r24
	
	fdevopen(usbdbg_tx_char, NULL);
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	89 e4       	ldi	r24, 0x49	; 73
     cc8:	96 e0       	ldi	r25, 0x06	; 6
     cca:	3f c2       	rjmp	.+1150   	; 0x114a <fdevopen>
     ccc:	08 95       	ret

00000cce <__subsf3>:
     cce:	50 58       	subi	r21, 0x80	; 128

00000cd0 <__addsf3>:
     cd0:	bb 27       	eor	r27, r27
     cd2:	aa 27       	eor	r26, r26
     cd4:	0e d0       	rcall	.+28     	; 0xcf2 <__addsf3x>
     cd6:	75 c1       	rjmp	.+746    	; 0xfc2 <__fp_round>
     cd8:	66 d1       	rcall	.+716    	; 0xfa6 <__fp_pscA>
     cda:	30 f0       	brcs	.+12     	; 0xce8 <__addsf3+0x18>
     cdc:	6b d1       	rcall	.+726    	; 0xfb4 <__fp_pscB>
     cde:	20 f0       	brcs	.+8      	; 0xce8 <__addsf3+0x18>
     ce0:	31 f4       	brne	.+12     	; 0xcee <__addsf3+0x1e>
     ce2:	9f 3f       	cpi	r25, 0xFF	; 255
     ce4:	11 f4       	brne	.+4      	; 0xcea <__addsf3+0x1a>
     ce6:	1e f4       	brtc	.+6      	; 0xcee <__addsf3+0x1e>
     ce8:	5b c1       	rjmp	.+694    	; 0xfa0 <__fp_nan>
     cea:	0e f4       	brtc	.+2      	; 0xcee <__addsf3+0x1e>
     cec:	e0 95       	com	r30
     cee:	e7 fb       	bst	r30, 7
     cf0:	51 c1       	rjmp	.+674    	; 0xf94 <__fp_inf>

00000cf2 <__addsf3x>:
     cf2:	e9 2f       	mov	r30, r25
     cf4:	77 d1       	rcall	.+750    	; 0xfe4 <__fp_split3>
     cf6:	80 f3       	brcs	.-32     	; 0xcd8 <__addsf3+0x8>
     cf8:	ba 17       	cp	r27, r26
     cfa:	62 07       	cpc	r22, r18
     cfc:	73 07       	cpc	r23, r19
     cfe:	84 07       	cpc	r24, r20
     d00:	95 07       	cpc	r25, r21
     d02:	18 f0       	brcs	.+6      	; 0xd0a <__addsf3x+0x18>
     d04:	71 f4       	brne	.+28     	; 0xd22 <__addsf3x+0x30>
     d06:	9e f5       	brtc	.+102    	; 0xd6e <__addsf3x+0x7c>
     d08:	8f c1       	rjmp	.+798    	; 0x1028 <__fp_zero>
     d0a:	0e f4       	brtc	.+2      	; 0xd0e <__addsf3x+0x1c>
     d0c:	e0 95       	com	r30
     d0e:	0b 2e       	mov	r0, r27
     d10:	ba 2f       	mov	r27, r26
     d12:	a0 2d       	mov	r26, r0
     d14:	0b 01       	movw	r0, r22
     d16:	b9 01       	movw	r22, r18
     d18:	90 01       	movw	r18, r0
     d1a:	0c 01       	movw	r0, r24
     d1c:	ca 01       	movw	r24, r20
     d1e:	a0 01       	movw	r20, r0
     d20:	11 24       	eor	r1, r1
     d22:	ff 27       	eor	r31, r31
     d24:	59 1b       	sub	r21, r25
     d26:	99 f0       	breq	.+38     	; 0xd4e <__addsf3x+0x5c>
     d28:	59 3f       	cpi	r21, 0xF9	; 249
     d2a:	50 f4       	brcc	.+20     	; 0xd40 <__addsf3x+0x4e>
     d2c:	50 3e       	cpi	r21, 0xE0	; 224
     d2e:	68 f1       	brcs	.+90     	; 0xd8a <__addsf3x+0x98>
     d30:	1a 16       	cp	r1, r26
     d32:	f0 40       	sbci	r31, 0x00	; 0
     d34:	a2 2f       	mov	r26, r18
     d36:	23 2f       	mov	r18, r19
     d38:	34 2f       	mov	r19, r20
     d3a:	44 27       	eor	r20, r20
     d3c:	58 5f       	subi	r21, 0xF8	; 248
     d3e:	f3 cf       	rjmp	.-26     	; 0xd26 <__addsf3x+0x34>
     d40:	46 95       	lsr	r20
     d42:	37 95       	ror	r19
     d44:	27 95       	ror	r18
     d46:	a7 95       	ror	r26
     d48:	f0 40       	sbci	r31, 0x00	; 0
     d4a:	53 95       	inc	r21
     d4c:	c9 f7       	brne	.-14     	; 0xd40 <__addsf3x+0x4e>
     d4e:	7e f4       	brtc	.+30     	; 0xd6e <__addsf3x+0x7c>
     d50:	1f 16       	cp	r1, r31
     d52:	ba 0b       	sbc	r27, r26
     d54:	62 0b       	sbc	r22, r18
     d56:	73 0b       	sbc	r23, r19
     d58:	84 0b       	sbc	r24, r20
     d5a:	ba f0       	brmi	.+46     	; 0xd8a <__addsf3x+0x98>
     d5c:	91 50       	subi	r25, 0x01	; 1
     d5e:	a1 f0       	breq	.+40     	; 0xd88 <__addsf3x+0x96>
     d60:	ff 0f       	add	r31, r31
     d62:	bb 1f       	adc	r27, r27
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	88 1f       	adc	r24, r24
     d6a:	c2 f7       	brpl	.-16     	; 0xd5c <__addsf3x+0x6a>
     d6c:	0e c0       	rjmp	.+28     	; 0xd8a <__addsf3x+0x98>
     d6e:	ba 0f       	add	r27, r26
     d70:	62 1f       	adc	r22, r18
     d72:	73 1f       	adc	r23, r19
     d74:	84 1f       	adc	r24, r20
     d76:	48 f4       	brcc	.+18     	; 0xd8a <__addsf3x+0x98>
     d78:	87 95       	ror	r24
     d7a:	77 95       	ror	r23
     d7c:	67 95       	ror	r22
     d7e:	b7 95       	ror	r27
     d80:	f7 95       	ror	r31
     d82:	9e 3f       	cpi	r25, 0xFE	; 254
     d84:	08 f0       	brcs	.+2      	; 0xd88 <__addsf3x+0x96>
     d86:	b3 cf       	rjmp	.-154    	; 0xcee <__addsf3+0x1e>
     d88:	93 95       	inc	r25
     d8a:	88 0f       	add	r24, r24
     d8c:	08 f0       	brcs	.+2      	; 0xd90 <__addsf3x+0x9e>
     d8e:	99 27       	eor	r25, r25
     d90:	ee 0f       	add	r30, r30
     d92:	97 95       	ror	r25
     d94:	87 95       	ror	r24
     d96:	08 95       	ret

00000d98 <__cmpsf2>:
     d98:	d9 d0       	rcall	.+434    	; 0xf4c <__fp_cmp>
     d9a:	08 f4       	brcc	.+2      	; 0xd9e <__cmpsf2+0x6>
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	08 95       	ret

00000da0 <__divsf3>:
     da0:	0c d0       	rcall	.+24     	; 0xdba <__divsf3x>
     da2:	0f c1       	rjmp	.+542    	; 0xfc2 <__fp_round>
     da4:	07 d1       	rcall	.+526    	; 0xfb4 <__fp_pscB>
     da6:	40 f0       	brcs	.+16     	; 0xdb8 <__divsf3+0x18>
     da8:	fe d0       	rcall	.+508    	; 0xfa6 <__fp_pscA>
     daa:	30 f0       	brcs	.+12     	; 0xdb8 <__divsf3+0x18>
     dac:	21 f4       	brne	.+8      	; 0xdb6 <__divsf3+0x16>
     dae:	5f 3f       	cpi	r21, 0xFF	; 255
     db0:	19 f0       	breq	.+6      	; 0xdb8 <__divsf3+0x18>
     db2:	f0 c0       	rjmp	.+480    	; 0xf94 <__fp_inf>
     db4:	51 11       	cpse	r21, r1
     db6:	39 c1       	rjmp	.+626    	; 0x102a <__fp_szero>
     db8:	f3 c0       	rjmp	.+486    	; 0xfa0 <__fp_nan>

00000dba <__divsf3x>:
     dba:	14 d1       	rcall	.+552    	; 0xfe4 <__fp_split3>
     dbc:	98 f3       	brcs	.-26     	; 0xda4 <__divsf3+0x4>

00000dbe <__divsf3_pse>:
     dbe:	99 23       	and	r25, r25
     dc0:	c9 f3       	breq	.-14     	; 0xdb4 <__divsf3+0x14>
     dc2:	55 23       	and	r21, r21
     dc4:	b1 f3       	breq	.-20     	; 0xdb2 <__divsf3+0x12>
     dc6:	95 1b       	sub	r25, r21
     dc8:	55 0b       	sbc	r21, r21
     dca:	bb 27       	eor	r27, r27
     dcc:	aa 27       	eor	r26, r26
     dce:	62 17       	cp	r22, r18
     dd0:	73 07       	cpc	r23, r19
     dd2:	84 07       	cpc	r24, r20
     dd4:	38 f0       	brcs	.+14     	; 0xde4 <__divsf3_pse+0x26>
     dd6:	9f 5f       	subi	r25, 0xFF	; 255
     dd8:	5f 4f       	sbci	r21, 0xFF	; 255
     dda:	22 0f       	add	r18, r18
     ddc:	33 1f       	adc	r19, r19
     dde:	44 1f       	adc	r20, r20
     de0:	aa 1f       	adc	r26, r26
     de2:	a9 f3       	breq	.-22     	; 0xdce <__divsf3_pse+0x10>
     de4:	33 d0       	rcall	.+102    	; 0xe4c <__divsf3_pse+0x8e>
     de6:	0e 2e       	mov	r0, r30
     de8:	3a f0       	brmi	.+14     	; 0xdf8 <__divsf3_pse+0x3a>
     dea:	e0 e8       	ldi	r30, 0x80	; 128
     dec:	30 d0       	rcall	.+96     	; 0xe4e <__divsf3_pse+0x90>
     dee:	91 50       	subi	r25, 0x01	; 1
     df0:	50 40       	sbci	r21, 0x00	; 0
     df2:	e6 95       	lsr	r30
     df4:	00 1c       	adc	r0, r0
     df6:	ca f7       	brpl	.-14     	; 0xdea <__divsf3_pse+0x2c>
     df8:	29 d0       	rcall	.+82     	; 0xe4c <__divsf3_pse+0x8e>
     dfa:	fe 2f       	mov	r31, r30
     dfc:	27 d0       	rcall	.+78     	; 0xe4c <__divsf3_pse+0x8e>
     dfe:	66 0f       	add	r22, r22
     e00:	77 1f       	adc	r23, r23
     e02:	88 1f       	adc	r24, r24
     e04:	bb 1f       	adc	r27, r27
     e06:	26 17       	cp	r18, r22
     e08:	37 07       	cpc	r19, r23
     e0a:	48 07       	cpc	r20, r24
     e0c:	ab 07       	cpc	r26, r27
     e0e:	b0 e8       	ldi	r27, 0x80	; 128
     e10:	09 f0       	breq	.+2      	; 0xe14 <__divsf3_pse+0x56>
     e12:	bb 0b       	sbc	r27, r27
     e14:	80 2d       	mov	r24, r0
     e16:	bf 01       	movw	r22, r30
     e18:	ff 27       	eor	r31, r31
     e1a:	93 58       	subi	r25, 0x83	; 131
     e1c:	5f 4f       	sbci	r21, 0xFF	; 255
     e1e:	2a f0       	brmi	.+10     	; 0xe2a <__divsf3_pse+0x6c>
     e20:	9e 3f       	cpi	r25, 0xFE	; 254
     e22:	51 05       	cpc	r21, r1
     e24:	68 f0       	brcs	.+26     	; 0xe40 <__divsf3_pse+0x82>
     e26:	b6 c0       	rjmp	.+364    	; 0xf94 <__fp_inf>
     e28:	00 c1       	rjmp	.+512    	; 0x102a <__fp_szero>
     e2a:	5f 3f       	cpi	r21, 0xFF	; 255
     e2c:	ec f3       	brlt	.-6      	; 0xe28 <__divsf3_pse+0x6a>
     e2e:	98 3e       	cpi	r25, 0xE8	; 232
     e30:	dc f3       	brlt	.-10     	; 0xe28 <__divsf3_pse+0x6a>
     e32:	86 95       	lsr	r24
     e34:	77 95       	ror	r23
     e36:	67 95       	ror	r22
     e38:	b7 95       	ror	r27
     e3a:	f7 95       	ror	r31
     e3c:	9f 5f       	subi	r25, 0xFF	; 255
     e3e:	c9 f7       	brne	.-14     	; 0xe32 <__divsf3_pse+0x74>
     e40:	88 0f       	add	r24, r24
     e42:	91 1d       	adc	r25, r1
     e44:	96 95       	lsr	r25
     e46:	87 95       	ror	r24
     e48:	97 f9       	bld	r25, 7
     e4a:	08 95       	ret
     e4c:	e1 e0       	ldi	r30, 0x01	; 1
     e4e:	66 0f       	add	r22, r22
     e50:	77 1f       	adc	r23, r23
     e52:	88 1f       	adc	r24, r24
     e54:	bb 1f       	adc	r27, r27
     e56:	62 17       	cp	r22, r18
     e58:	73 07       	cpc	r23, r19
     e5a:	84 07       	cpc	r24, r20
     e5c:	ba 07       	cpc	r27, r26
     e5e:	20 f0       	brcs	.+8      	; 0xe68 <__divsf3_pse+0xaa>
     e60:	62 1b       	sub	r22, r18
     e62:	73 0b       	sbc	r23, r19
     e64:	84 0b       	sbc	r24, r20
     e66:	ba 0b       	sbc	r27, r26
     e68:	ee 1f       	adc	r30, r30
     e6a:	88 f7       	brcc	.-30     	; 0xe4e <__divsf3_pse+0x90>
     e6c:	e0 95       	com	r30
     e6e:	08 95       	ret

00000e70 <__fixsfsi>:
     e70:	04 d0       	rcall	.+8      	; 0xe7a <__fixunssfsi>
     e72:	68 94       	set
     e74:	b1 11       	cpse	r27, r1
     e76:	d9 c0       	rjmp	.+434    	; 0x102a <__fp_szero>
     e78:	08 95       	ret

00000e7a <__fixunssfsi>:
     e7a:	bc d0       	rcall	.+376    	; 0xff4 <__fp_splitA>
     e7c:	88 f0       	brcs	.+34     	; 0xea0 <__fixunssfsi+0x26>
     e7e:	9f 57       	subi	r25, 0x7F	; 127
     e80:	90 f0       	brcs	.+36     	; 0xea6 <__fixunssfsi+0x2c>
     e82:	b9 2f       	mov	r27, r25
     e84:	99 27       	eor	r25, r25
     e86:	b7 51       	subi	r27, 0x17	; 23
     e88:	a0 f0       	brcs	.+40     	; 0xeb2 <__fixunssfsi+0x38>
     e8a:	d1 f0       	breq	.+52     	; 0xec0 <__fixunssfsi+0x46>
     e8c:	66 0f       	add	r22, r22
     e8e:	77 1f       	adc	r23, r23
     e90:	88 1f       	adc	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	1a f0       	brmi	.+6      	; 0xe9c <__fixunssfsi+0x22>
     e96:	ba 95       	dec	r27
     e98:	c9 f7       	brne	.-14     	; 0xe8c <__fixunssfsi+0x12>
     e9a:	12 c0       	rjmp	.+36     	; 0xec0 <__fixunssfsi+0x46>
     e9c:	b1 30       	cpi	r27, 0x01	; 1
     e9e:	81 f0       	breq	.+32     	; 0xec0 <__fixunssfsi+0x46>
     ea0:	c3 d0       	rcall	.+390    	; 0x1028 <__fp_zero>
     ea2:	b1 e0       	ldi	r27, 0x01	; 1
     ea4:	08 95       	ret
     ea6:	c0 c0       	rjmp	.+384    	; 0x1028 <__fp_zero>
     ea8:	67 2f       	mov	r22, r23
     eaa:	78 2f       	mov	r23, r24
     eac:	88 27       	eor	r24, r24
     eae:	b8 5f       	subi	r27, 0xF8	; 248
     eb0:	39 f0       	breq	.+14     	; 0xec0 <__fixunssfsi+0x46>
     eb2:	b9 3f       	cpi	r27, 0xF9	; 249
     eb4:	cc f3       	brlt	.-14     	; 0xea8 <__fixunssfsi+0x2e>
     eb6:	86 95       	lsr	r24
     eb8:	77 95       	ror	r23
     eba:	67 95       	ror	r22
     ebc:	b3 95       	inc	r27
     ebe:	d9 f7       	brne	.-10     	; 0xeb6 <__fixunssfsi+0x3c>
     ec0:	3e f4       	brtc	.+14     	; 0xed0 <__fixunssfsi+0x56>
     ec2:	90 95       	com	r25
     ec4:	80 95       	com	r24
     ec6:	70 95       	com	r23
     ec8:	61 95       	neg	r22
     eca:	7f 4f       	sbci	r23, 0xFF	; 255
     ecc:	8f 4f       	sbci	r24, 0xFF	; 255
     ece:	9f 4f       	sbci	r25, 0xFF	; 255
     ed0:	08 95       	ret

00000ed2 <__floatunsisf>:
     ed2:	e8 94       	clt
     ed4:	09 c0       	rjmp	.+18     	; 0xee8 <__floatsisf+0x12>

00000ed6 <__floatsisf>:
     ed6:	97 fb       	bst	r25, 7
     ed8:	3e f4       	brtc	.+14     	; 0xee8 <__floatsisf+0x12>
     eda:	90 95       	com	r25
     edc:	80 95       	com	r24
     ede:	70 95       	com	r23
     ee0:	61 95       	neg	r22
     ee2:	7f 4f       	sbci	r23, 0xFF	; 255
     ee4:	8f 4f       	sbci	r24, 0xFF	; 255
     ee6:	9f 4f       	sbci	r25, 0xFF	; 255
     ee8:	99 23       	and	r25, r25
     eea:	a9 f0       	breq	.+42     	; 0xf16 <__floatsisf+0x40>
     eec:	f9 2f       	mov	r31, r25
     eee:	96 e9       	ldi	r25, 0x96	; 150
     ef0:	bb 27       	eor	r27, r27
     ef2:	93 95       	inc	r25
     ef4:	f6 95       	lsr	r31
     ef6:	87 95       	ror	r24
     ef8:	77 95       	ror	r23
     efa:	67 95       	ror	r22
     efc:	b7 95       	ror	r27
     efe:	f1 11       	cpse	r31, r1
     f00:	f8 cf       	rjmp	.-16     	; 0xef2 <__floatsisf+0x1c>
     f02:	fa f4       	brpl	.+62     	; 0xf42 <__floatsisf+0x6c>
     f04:	bb 0f       	add	r27, r27
     f06:	11 f4       	brne	.+4      	; 0xf0c <__floatsisf+0x36>
     f08:	60 ff       	sbrs	r22, 0
     f0a:	1b c0       	rjmp	.+54     	; 0xf42 <__floatsisf+0x6c>
     f0c:	6f 5f       	subi	r22, 0xFF	; 255
     f0e:	7f 4f       	sbci	r23, 0xFF	; 255
     f10:	8f 4f       	sbci	r24, 0xFF	; 255
     f12:	9f 4f       	sbci	r25, 0xFF	; 255
     f14:	16 c0       	rjmp	.+44     	; 0xf42 <__floatsisf+0x6c>
     f16:	88 23       	and	r24, r24
     f18:	11 f0       	breq	.+4      	; 0xf1e <__floatsisf+0x48>
     f1a:	96 e9       	ldi	r25, 0x96	; 150
     f1c:	11 c0       	rjmp	.+34     	; 0xf40 <__floatsisf+0x6a>
     f1e:	77 23       	and	r23, r23
     f20:	21 f0       	breq	.+8      	; 0xf2a <__floatsisf+0x54>
     f22:	9e e8       	ldi	r25, 0x8E	; 142
     f24:	87 2f       	mov	r24, r23
     f26:	76 2f       	mov	r23, r22
     f28:	05 c0       	rjmp	.+10     	; 0xf34 <__floatsisf+0x5e>
     f2a:	66 23       	and	r22, r22
     f2c:	71 f0       	breq	.+28     	; 0xf4a <__floatsisf+0x74>
     f2e:	96 e8       	ldi	r25, 0x86	; 134
     f30:	86 2f       	mov	r24, r22
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	60 e0       	ldi	r22, 0x00	; 0
     f36:	2a f0       	brmi	.+10     	; 0xf42 <__floatsisf+0x6c>
     f38:	9a 95       	dec	r25
     f3a:	66 0f       	add	r22, r22
     f3c:	77 1f       	adc	r23, r23
     f3e:	88 1f       	adc	r24, r24
     f40:	da f7       	brpl	.-10     	; 0xf38 <__floatsisf+0x62>
     f42:	88 0f       	add	r24, r24
     f44:	96 95       	lsr	r25
     f46:	87 95       	ror	r24
     f48:	97 f9       	bld	r25, 7
     f4a:	08 95       	ret

00000f4c <__fp_cmp>:
     f4c:	99 0f       	add	r25, r25
     f4e:	00 08       	sbc	r0, r0
     f50:	55 0f       	add	r21, r21
     f52:	aa 0b       	sbc	r26, r26
     f54:	e0 e8       	ldi	r30, 0x80	; 128
     f56:	fe ef       	ldi	r31, 0xFE	; 254
     f58:	16 16       	cp	r1, r22
     f5a:	17 06       	cpc	r1, r23
     f5c:	e8 07       	cpc	r30, r24
     f5e:	f9 07       	cpc	r31, r25
     f60:	c0 f0       	brcs	.+48     	; 0xf92 <__fp_cmp+0x46>
     f62:	12 16       	cp	r1, r18
     f64:	13 06       	cpc	r1, r19
     f66:	e4 07       	cpc	r30, r20
     f68:	f5 07       	cpc	r31, r21
     f6a:	98 f0       	brcs	.+38     	; 0xf92 <__fp_cmp+0x46>
     f6c:	62 1b       	sub	r22, r18
     f6e:	73 0b       	sbc	r23, r19
     f70:	84 0b       	sbc	r24, r20
     f72:	95 0b       	sbc	r25, r21
     f74:	39 f4       	brne	.+14     	; 0xf84 <__fp_cmp+0x38>
     f76:	0a 26       	eor	r0, r26
     f78:	61 f0       	breq	.+24     	; 0xf92 <__fp_cmp+0x46>
     f7a:	23 2b       	or	r18, r19
     f7c:	24 2b       	or	r18, r20
     f7e:	25 2b       	or	r18, r21
     f80:	21 f4       	brne	.+8      	; 0xf8a <__fp_cmp+0x3e>
     f82:	08 95       	ret
     f84:	0a 26       	eor	r0, r26
     f86:	09 f4       	brne	.+2      	; 0xf8a <__fp_cmp+0x3e>
     f88:	a1 40       	sbci	r26, 0x01	; 1
     f8a:	a6 95       	lsr	r26
     f8c:	8f ef       	ldi	r24, 0xFF	; 255
     f8e:	81 1d       	adc	r24, r1
     f90:	81 1d       	adc	r24, r1
     f92:	08 95       	ret

00000f94 <__fp_inf>:
     f94:	97 f9       	bld	r25, 7
     f96:	9f 67       	ori	r25, 0x7F	; 127
     f98:	80 e8       	ldi	r24, 0x80	; 128
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	08 95       	ret

00000fa0 <__fp_nan>:
     fa0:	9f ef       	ldi	r25, 0xFF	; 255
     fa2:	80 ec       	ldi	r24, 0xC0	; 192
     fa4:	08 95       	ret

00000fa6 <__fp_pscA>:
     fa6:	00 24       	eor	r0, r0
     fa8:	0a 94       	dec	r0
     faa:	16 16       	cp	r1, r22
     fac:	17 06       	cpc	r1, r23
     fae:	18 06       	cpc	r1, r24
     fb0:	09 06       	cpc	r0, r25
     fb2:	08 95       	ret

00000fb4 <__fp_pscB>:
     fb4:	00 24       	eor	r0, r0
     fb6:	0a 94       	dec	r0
     fb8:	12 16       	cp	r1, r18
     fba:	13 06       	cpc	r1, r19
     fbc:	14 06       	cpc	r1, r20
     fbe:	05 06       	cpc	r0, r21
     fc0:	08 95       	ret

00000fc2 <__fp_round>:
     fc2:	09 2e       	mov	r0, r25
     fc4:	03 94       	inc	r0
     fc6:	00 0c       	add	r0, r0
     fc8:	11 f4       	brne	.+4      	; 0xfce <__fp_round+0xc>
     fca:	88 23       	and	r24, r24
     fcc:	52 f0       	brmi	.+20     	; 0xfe2 <__fp_round+0x20>
     fce:	bb 0f       	add	r27, r27
     fd0:	40 f4       	brcc	.+16     	; 0xfe2 <__fp_round+0x20>
     fd2:	bf 2b       	or	r27, r31
     fd4:	11 f4       	brne	.+4      	; 0xfda <__fp_round+0x18>
     fd6:	60 ff       	sbrs	r22, 0
     fd8:	04 c0       	rjmp	.+8      	; 0xfe2 <__fp_round+0x20>
     fda:	6f 5f       	subi	r22, 0xFF	; 255
     fdc:	7f 4f       	sbci	r23, 0xFF	; 255
     fde:	8f 4f       	sbci	r24, 0xFF	; 255
     fe0:	9f 4f       	sbci	r25, 0xFF	; 255
     fe2:	08 95       	ret

00000fe4 <__fp_split3>:
     fe4:	57 fd       	sbrc	r21, 7
     fe6:	90 58       	subi	r25, 0x80	; 128
     fe8:	44 0f       	add	r20, r20
     fea:	55 1f       	adc	r21, r21
     fec:	59 f0       	breq	.+22     	; 0x1004 <__fp_splitA+0x10>
     fee:	5f 3f       	cpi	r21, 0xFF	; 255
     ff0:	71 f0       	breq	.+28     	; 0x100e <__fp_splitA+0x1a>
     ff2:	47 95       	ror	r20

00000ff4 <__fp_splitA>:
     ff4:	88 0f       	add	r24, r24
     ff6:	97 fb       	bst	r25, 7
     ff8:	99 1f       	adc	r25, r25
     ffa:	61 f0       	breq	.+24     	; 0x1014 <__fp_splitA+0x20>
     ffc:	9f 3f       	cpi	r25, 0xFF	; 255
     ffe:	79 f0       	breq	.+30     	; 0x101e <__fp_splitA+0x2a>
    1000:	87 95       	ror	r24
    1002:	08 95       	ret
    1004:	12 16       	cp	r1, r18
    1006:	13 06       	cpc	r1, r19
    1008:	14 06       	cpc	r1, r20
    100a:	55 1f       	adc	r21, r21
    100c:	f2 cf       	rjmp	.-28     	; 0xff2 <__fp_split3+0xe>
    100e:	46 95       	lsr	r20
    1010:	f1 df       	rcall	.-30     	; 0xff4 <__fp_splitA>
    1012:	08 c0       	rjmp	.+16     	; 0x1024 <__fp_splitA+0x30>
    1014:	16 16       	cp	r1, r22
    1016:	17 06       	cpc	r1, r23
    1018:	18 06       	cpc	r1, r24
    101a:	99 1f       	adc	r25, r25
    101c:	f1 cf       	rjmp	.-30     	; 0x1000 <__fp_splitA+0xc>
    101e:	86 95       	lsr	r24
    1020:	71 05       	cpc	r23, r1
    1022:	61 05       	cpc	r22, r1
    1024:	08 94       	sec
    1026:	08 95       	ret

00001028 <__fp_zero>:
    1028:	e8 94       	clt

0000102a <__fp_szero>:
    102a:	bb 27       	eor	r27, r27
    102c:	66 27       	eor	r22, r22
    102e:	77 27       	eor	r23, r23
    1030:	cb 01       	movw	r24, r22
    1032:	97 f9       	bld	r25, 7
    1034:	08 95       	ret

00001036 <__gesf2>:
    1036:	8a df       	rcall	.-236    	; 0xf4c <__fp_cmp>
    1038:	08 f4       	brcc	.+2      	; 0x103c <__gesf2+0x6>
    103a:	8f ef       	ldi	r24, 0xFF	; 255
    103c:	08 95       	ret

0000103e <__mulsf3>:
    103e:	0b d0       	rcall	.+22     	; 0x1056 <__mulsf3x>
    1040:	c0 cf       	rjmp	.-128    	; 0xfc2 <__fp_round>
    1042:	b1 df       	rcall	.-158    	; 0xfa6 <__fp_pscA>
    1044:	28 f0       	brcs	.+10     	; 0x1050 <__mulsf3+0x12>
    1046:	b6 df       	rcall	.-148    	; 0xfb4 <__fp_pscB>
    1048:	18 f0       	brcs	.+6      	; 0x1050 <__mulsf3+0x12>
    104a:	95 23       	and	r25, r21
    104c:	09 f0       	breq	.+2      	; 0x1050 <__mulsf3+0x12>
    104e:	a2 cf       	rjmp	.-188    	; 0xf94 <__fp_inf>
    1050:	a7 cf       	rjmp	.-178    	; 0xfa0 <__fp_nan>
    1052:	11 24       	eor	r1, r1
    1054:	ea cf       	rjmp	.-44     	; 0x102a <__fp_szero>

00001056 <__mulsf3x>:
    1056:	c6 df       	rcall	.-116    	; 0xfe4 <__fp_split3>
    1058:	a0 f3       	brcs	.-24     	; 0x1042 <__mulsf3+0x4>

0000105a <__mulsf3_pse>:
    105a:	95 9f       	mul	r25, r21
    105c:	d1 f3       	breq	.-12     	; 0x1052 <__mulsf3+0x14>
    105e:	95 0f       	add	r25, r21
    1060:	50 e0       	ldi	r21, 0x00	; 0
    1062:	55 1f       	adc	r21, r21
    1064:	62 9f       	mul	r22, r18
    1066:	f0 01       	movw	r30, r0
    1068:	72 9f       	mul	r23, r18
    106a:	bb 27       	eor	r27, r27
    106c:	f0 0d       	add	r31, r0
    106e:	b1 1d       	adc	r27, r1
    1070:	63 9f       	mul	r22, r19
    1072:	aa 27       	eor	r26, r26
    1074:	f0 0d       	add	r31, r0
    1076:	b1 1d       	adc	r27, r1
    1078:	aa 1f       	adc	r26, r26
    107a:	64 9f       	mul	r22, r20
    107c:	66 27       	eor	r22, r22
    107e:	b0 0d       	add	r27, r0
    1080:	a1 1d       	adc	r26, r1
    1082:	66 1f       	adc	r22, r22
    1084:	82 9f       	mul	r24, r18
    1086:	22 27       	eor	r18, r18
    1088:	b0 0d       	add	r27, r0
    108a:	a1 1d       	adc	r26, r1
    108c:	62 1f       	adc	r22, r18
    108e:	73 9f       	mul	r23, r19
    1090:	b0 0d       	add	r27, r0
    1092:	a1 1d       	adc	r26, r1
    1094:	62 1f       	adc	r22, r18
    1096:	83 9f       	mul	r24, r19
    1098:	a0 0d       	add	r26, r0
    109a:	61 1d       	adc	r22, r1
    109c:	22 1f       	adc	r18, r18
    109e:	74 9f       	mul	r23, r20
    10a0:	33 27       	eor	r19, r19
    10a2:	a0 0d       	add	r26, r0
    10a4:	61 1d       	adc	r22, r1
    10a6:	23 1f       	adc	r18, r19
    10a8:	84 9f       	mul	r24, r20
    10aa:	60 0d       	add	r22, r0
    10ac:	21 1d       	adc	r18, r1
    10ae:	82 2f       	mov	r24, r18
    10b0:	76 2f       	mov	r23, r22
    10b2:	6a 2f       	mov	r22, r26
    10b4:	11 24       	eor	r1, r1
    10b6:	9f 57       	subi	r25, 0x7F	; 127
    10b8:	50 40       	sbci	r21, 0x00	; 0
    10ba:	8a f0       	brmi	.+34     	; 0x10de <__mulsf3_pse+0x84>
    10bc:	e1 f0       	breq	.+56     	; 0x10f6 <__mulsf3_pse+0x9c>
    10be:	88 23       	and	r24, r24
    10c0:	4a f0       	brmi	.+18     	; 0x10d4 <__mulsf3_pse+0x7a>
    10c2:	ee 0f       	add	r30, r30
    10c4:	ff 1f       	adc	r31, r31
    10c6:	bb 1f       	adc	r27, r27
    10c8:	66 1f       	adc	r22, r22
    10ca:	77 1f       	adc	r23, r23
    10cc:	88 1f       	adc	r24, r24
    10ce:	91 50       	subi	r25, 0x01	; 1
    10d0:	50 40       	sbci	r21, 0x00	; 0
    10d2:	a9 f7       	brne	.-22     	; 0x10be <__mulsf3_pse+0x64>
    10d4:	9e 3f       	cpi	r25, 0xFE	; 254
    10d6:	51 05       	cpc	r21, r1
    10d8:	70 f0       	brcs	.+28     	; 0x10f6 <__mulsf3_pse+0x9c>
    10da:	5c cf       	rjmp	.-328    	; 0xf94 <__fp_inf>
    10dc:	a6 cf       	rjmp	.-180    	; 0x102a <__fp_szero>
    10de:	5f 3f       	cpi	r21, 0xFF	; 255
    10e0:	ec f3       	brlt	.-6      	; 0x10dc <__mulsf3_pse+0x82>
    10e2:	98 3e       	cpi	r25, 0xE8	; 232
    10e4:	dc f3       	brlt	.-10     	; 0x10dc <__mulsf3_pse+0x82>
    10e6:	86 95       	lsr	r24
    10e8:	77 95       	ror	r23
    10ea:	67 95       	ror	r22
    10ec:	b7 95       	ror	r27
    10ee:	f7 95       	ror	r31
    10f0:	e7 95       	ror	r30
    10f2:	9f 5f       	subi	r25, 0xFF	; 255
    10f4:	c1 f7       	brne	.-16     	; 0x10e6 <__mulsf3_pse+0x8c>
    10f6:	fe 2b       	or	r31, r30
    10f8:	88 0f       	add	r24, r24
    10fa:	91 1d       	adc	r25, r1
    10fc:	96 95       	lsr	r25
    10fe:	87 95       	ror	r24
    1100:	97 f9       	bld	r25, 7
    1102:	08 95       	ret

00001104 <__itoa_ncheck>:
    1104:	bb 27       	eor	r27, r27
    1106:	4a 30       	cpi	r20, 0x0A	; 10
    1108:	31 f4       	brne	.+12     	; 0x1116 <__itoa_ncheck+0x12>
    110a:	99 23       	and	r25, r25
    110c:	22 f4       	brpl	.+8      	; 0x1116 <__itoa_ncheck+0x12>
    110e:	bd e2       	ldi	r27, 0x2D	; 45
    1110:	90 95       	com	r25
    1112:	81 95       	neg	r24
    1114:	9f 4f       	sbci	r25, 0xFF	; 255
    1116:	01 c0       	rjmp	.+2      	; 0x111a <__utoa_common>

00001118 <__utoa_ncheck>:
    1118:	bb 27       	eor	r27, r27

0000111a <__utoa_common>:
    111a:	fb 01       	movw	r30, r22
    111c:	55 27       	eor	r21, r21
    111e:	aa 27       	eor	r26, r26
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	aa 1f       	adc	r26, r26
    1126:	a4 17       	cp	r26, r20
    1128:	10 f0       	brcs	.+4      	; 0x112e <__utoa_common+0x14>
    112a:	a4 1b       	sub	r26, r20
    112c:	83 95       	inc	r24
    112e:	50 51       	subi	r21, 0x10	; 16
    1130:	b9 f7       	brne	.-18     	; 0x1120 <__utoa_common+0x6>
    1132:	a0 5d       	subi	r26, 0xD0	; 208
    1134:	aa 33       	cpi	r26, 0x3A	; 58
    1136:	08 f0       	brcs	.+2      	; 0x113a <__utoa_common+0x20>
    1138:	a9 5d       	subi	r26, 0xD9	; 217
    113a:	a1 93       	st	Z+, r26
    113c:	00 97       	sbiw	r24, 0x00	; 0
    113e:	79 f7       	brne	.-34     	; 0x111e <__utoa_common+0x4>
    1140:	b1 11       	cpse	r27, r1
    1142:	b1 93       	st	Z+, r27
    1144:	11 92       	st	Z+, r1
    1146:	cb 01       	movw	r24, r22
    1148:	b2 c3       	rjmp	.+1892   	; 0x18ae <strrev>

0000114a <fdevopen>:
    114a:	0f 93       	push	r16
    114c:	1f 93       	push	r17
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	00 97       	sbiw	r24, 0x00	; 0
    1154:	31 f4       	brne	.+12     	; 0x1162 <fdevopen+0x18>
    1156:	61 15       	cp	r22, r1
    1158:	71 05       	cpc	r23, r1
    115a:	19 f4       	brne	.+6      	; 0x1162 <fdevopen+0x18>
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	39 c0       	rjmp	.+114    	; 0x11d4 <fdevopen+0x8a>
    1162:	8b 01       	movw	r16, r22
    1164:	ec 01       	movw	r28, r24
    1166:	6e e0       	ldi	r22, 0x0E	; 14
    1168:	70 e0       	ldi	r23, 0x00	; 0
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	47 d2       	rcall	.+1166   	; 0x15fe <calloc>
    1170:	fc 01       	movw	r30, r24
    1172:	89 2b       	or	r24, r25
    1174:	99 f3       	breq	.-26     	; 0x115c <fdevopen+0x12>
    1176:	80 e8       	ldi	r24, 0x80	; 128
    1178:	83 83       	std	Z+3, r24	; 0x03
    117a:	01 15       	cp	r16, r1
    117c:	11 05       	cpc	r17, r1
    117e:	71 f0       	breq	.+28     	; 0x119c <fdevopen+0x52>
    1180:	13 87       	std	Z+11, r17	; 0x0b
    1182:	02 87       	std	Z+10, r16	; 0x0a
    1184:	81 e8       	ldi	r24, 0x81	; 129
    1186:	83 83       	std	Z+3, r24	; 0x03
    1188:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <__iob>
    118c:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <__iob+0x1>
    1190:	89 2b       	or	r24, r25
    1192:	21 f4       	brne	.+8      	; 0x119c <fdevopen+0x52>
    1194:	f0 93 03 03 	sts	0x0303, r31	; 0x800303 <__iob+0x1>
    1198:	e0 93 02 03 	sts	0x0302, r30	; 0x800302 <__iob>
    119c:	20 97       	sbiw	r28, 0x00	; 0
    119e:	c9 f0       	breq	.+50     	; 0x11d2 <fdevopen+0x88>
    11a0:	d1 87       	std	Z+9, r29	; 0x09
    11a2:	c0 87       	std	Z+8, r28	; 0x08
    11a4:	83 81       	ldd	r24, Z+3	; 0x03
    11a6:	82 60       	ori	r24, 0x02	; 2
    11a8:	83 83       	std	Z+3, r24	; 0x03
    11aa:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <__iob+0x2>
    11ae:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <__iob+0x3>
    11b2:	89 2b       	or	r24, r25
    11b4:	71 f4       	brne	.+28     	; 0x11d2 <fdevopen+0x88>
    11b6:	f0 93 05 03 	sts	0x0305, r31	; 0x800305 <__iob+0x3>
    11ba:	e0 93 04 03 	sts	0x0304, r30	; 0x800304 <__iob+0x2>
    11be:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <__iob+0x4>
    11c2:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <__iob+0x5>
    11c6:	89 2b       	or	r24, r25
    11c8:	21 f4       	brne	.+8      	; 0x11d2 <fdevopen+0x88>
    11ca:	f0 93 07 03 	sts	0x0307, r31	; 0x800307 <__iob+0x5>
    11ce:	e0 93 06 03 	sts	0x0306, r30	; 0x800306 <__iob+0x4>
    11d2:	cf 01       	movw	r24, r30
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	1f 91       	pop	r17
    11da:	0f 91       	pop	r16
    11dc:	08 95       	ret

000011de <printf>:
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	ae 01       	movw	r20, r28
    11e8:	4b 5f       	subi	r20, 0xFB	; 251
    11ea:	5f 4f       	sbci	r21, 0xFF	; 255
    11ec:	fa 01       	movw	r30, r20
    11ee:	61 91       	ld	r22, Z+
    11f0:	71 91       	ld	r23, Z+
    11f2:	af 01       	movw	r20, r30
    11f4:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <__iob+0x2>
    11f8:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <__iob+0x3>
    11fc:	03 d0       	rcall	.+6      	; 0x1204 <vfprintf>
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	08 95       	ret

00001204 <vfprintf>:
    1204:	2f 92       	push	r2
    1206:	3f 92       	push	r3
    1208:	4f 92       	push	r4
    120a:	5f 92       	push	r5
    120c:	6f 92       	push	r6
    120e:	7f 92       	push	r7
    1210:	8f 92       	push	r8
    1212:	9f 92       	push	r9
    1214:	af 92       	push	r10
    1216:	bf 92       	push	r11
    1218:	cf 92       	push	r12
    121a:	df 92       	push	r13
    121c:	ef 92       	push	r14
    121e:	ff 92       	push	r15
    1220:	0f 93       	push	r16
    1222:	1f 93       	push	r17
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	2b 97       	sbiw	r28, 0x0b	; 11
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	f8 94       	cli
    1232:	de bf       	out	0x3e, r29	; 62
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	cd bf       	out	0x3d, r28	; 61
    1238:	6c 01       	movw	r12, r24
    123a:	7b 01       	movw	r14, r22
    123c:	8a 01       	movw	r16, r20
    123e:	fc 01       	movw	r30, r24
    1240:	17 82       	std	Z+7, r1	; 0x07
    1242:	16 82       	std	Z+6, r1	; 0x06
    1244:	83 81       	ldd	r24, Z+3	; 0x03
    1246:	81 ff       	sbrs	r24, 1
    1248:	bf c1       	rjmp	.+894    	; 0x15c8 <vfprintf+0x3c4>
    124a:	ce 01       	movw	r24, r28
    124c:	01 96       	adiw	r24, 0x01	; 1
    124e:	3c 01       	movw	r6, r24
    1250:	f6 01       	movw	r30, r12
    1252:	93 81       	ldd	r25, Z+3	; 0x03
    1254:	f7 01       	movw	r30, r14
    1256:	93 fd       	sbrc	r25, 3
    1258:	85 91       	lpm	r24, Z+
    125a:	93 ff       	sbrs	r25, 3
    125c:	81 91       	ld	r24, Z+
    125e:	7f 01       	movw	r14, r30
    1260:	88 23       	and	r24, r24
    1262:	09 f4       	brne	.+2      	; 0x1266 <vfprintf+0x62>
    1264:	ad c1       	rjmp	.+858    	; 0x15c0 <vfprintf+0x3bc>
    1266:	85 32       	cpi	r24, 0x25	; 37
    1268:	39 f4       	brne	.+14     	; 0x1278 <vfprintf+0x74>
    126a:	93 fd       	sbrc	r25, 3
    126c:	85 91       	lpm	r24, Z+
    126e:	93 ff       	sbrs	r25, 3
    1270:	81 91       	ld	r24, Z+
    1272:	7f 01       	movw	r14, r30
    1274:	85 32       	cpi	r24, 0x25	; 37
    1276:	21 f4       	brne	.+8      	; 0x1280 <vfprintf+0x7c>
    1278:	b6 01       	movw	r22, r12
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	28 d3       	rcall	.+1616   	; 0x18ce <fputc>
    127e:	e8 cf       	rjmp	.-48     	; 0x1250 <vfprintf+0x4c>
    1280:	91 2c       	mov	r9, r1
    1282:	21 2c       	mov	r2, r1
    1284:	31 2c       	mov	r3, r1
    1286:	ff e1       	ldi	r31, 0x1F	; 31
    1288:	f3 15       	cp	r31, r3
    128a:	d8 f0       	brcs	.+54     	; 0x12c2 <vfprintf+0xbe>
    128c:	8b 32       	cpi	r24, 0x2B	; 43
    128e:	79 f0       	breq	.+30     	; 0x12ae <vfprintf+0xaa>
    1290:	38 f4       	brcc	.+14     	; 0x12a0 <vfprintf+0x9c>
    1292:	80 32       	cpi	r24, 0x20	; 32
    1294:	79 f0       	breq	.+30     	; 0x12b4 <vfprintf+0xb0>
    1296:	83 32       	cpi	r24, 0x23	; 35
    1298:	a1 f4       	brne	.+40     	; 0x12c2 <vfprintf+0xbe>
    129a:	23 2d       	mov	r18, r3
    129c:	20 61       	ori	r18, 0x10	; 16
    129e:	1d c0       	rjmp	.+58     	; 0x12da <vfprintf+0xd6>
    12a0:	8d 32       	cpi	r24, 0x2D	; 45
    12a2:	61 f0       	breq	.+24     	; 0x12bc <vfprintf+0xb8>
    12a4:	80 33       	cpi	r24, 0x30	; 48
    12a6:	69 f4       	brne	.+26     	; 0x12c2 <vfprintf+0xbe>
    12a8:	23 2d       	mov	r18, r3
    12aa:	21 60       	ori	r18, 0x01	; 1
    12ac:	16 c0       	rjmp	.+44     	; 0x12da <vfprintf+0xd6>
    12ae:	83 2d       	mov	r24, r3
    12b0:	82 60       	ori	r24, 0x02	; 2
    12b2:	38 2e       	mov	r3, r24
    12b4:	e3 2d       	mov	r30, r3
    12b6:	e4 60       	ori	r30, 0x04	; 4
    12b8:	3e 2e       	mov	r3, r30
    12ba:	2a c0       	rjmp	.+84     	; 0x1310 <vfprintf+0x10c>
    12bc:	f3 2d       	mov	r31, r3
    12be:	f8 60       	ori	r31, 0x08	; 8
    12c0:	1d c0       	rjmp	.+58     	; 0x12fc <vfprintf+0xf8>
    12c2:	37 fc       	sbrc	r3, 7
    12c4:	2d c0       	rjmp	.+90     	; 0x1320 <vfprintf+0x11c>
    12c6:	20 ed       	ldi	r18, 0xD0	; 208
    12c8:	28 0f       	add	r18, r24
    12ca:	2a 30       	cpi	r18, 0x0A	; 10
    12cc:	40 f0       	brcs	.+16     	; 0x12de <vfprintf+0xda>
    12ce:	8e 32       	cpi	r24, 0x2E	; 46
    12d0:	b9 f4       	brne	.+46     	; 0x1300 <vfprintf+0xfc>
    12d2:	36 fc       	sbrc	r3, 6
    12d4:	75 c1       	rjmp	.+746    	; 0x15c0 <vfprintf+0x3bc>
    12d6:	23 2d       	mov	r18, r3
    12d8:	20 64       	ori	r18, 0x40	; 64
    12da:	32 2e       	mov	r3, r18
    12dc:	19 c0       	rjmp	.+50     	; 0x1310 <vfprintf+0x10c>
    12de:	36 fe       	sbrs	r3, 6
    12e0:	06 c0       	rjmp	.+12     	; 0x12ee <vfprintf+0xea>
    12e2:	8a e0       	ldi	r24, 0x0A	; 10
    12e4:	98 9e       	mul	r9, r24
    12e6:	20 0d       	add	r18, r0
    12e8:	11 24       	eor	r1, r1
    12ea:	92 2e       	mov	r9, r18
    12ec:	11 c0       	rjmp	.+34     	; 0x1310 <vfprintf+0x10c>
    12ee:	ea e0       	ldi	r30, 0x0A	; 10
    12f0:	2e 9e       	mul	r2, r30
    12f2:	20 0d       	add	r18, r0
    12f4:	11 24       	eor	r1, r1
    12f6:	22 2e       	mov	r2, r18
    12f8:	f3 2d       	mov	r31, r3
    12fa:	f0 62       	ori	r31, 0x20	; 32
    12fc:	3f 2e       	mov	r3, r31
    12fe:	08 c0       	rjmp	.+16     	; 0x1310 <vfprintf+0x10c>
    1300:	8c 36       	cpi	r24, 0x6C	; 108
    1302:	21 f4       	brne	.+8      	; 0x130c <vfprintf+0x108>
    1304:	83 2d       	mov	r24, r3
    1306:	80 68       	ori	r24, 0x80	; 128
    1308:	38 2e       	mov	r3, r24
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <vfprintf+0x10c>
    130c:	88 36       	cpi	r24, 0x68	; 104
    130e:	41 f4       	brne	.+16     	; 0x1320 <vfprintf+0x11c>
    1310:	f7 01       	movw	r30, r14
    1312:	93 fd       	sbrc	r25, 3
    1314:	85 91       	lpm	r24, Z+
    1316:	93 ff       	sbrs	r25, 3
    1318:	81 91       	ld	r24, Z+
    131a:	7f 01       	movw	r14, r30
    131c:	81 11       	cpse	r24, r1
    131e:	b3 cf       	rjmp	.-154    	; 0x1286 <vfprintf+0x82>
    1320:	98 2f       	mov	r25, r24
    1322:	9f 7d       	andi	r25, 0xDF	; 223
    1324:	95 54       	subi	r25, 0x45	; 69
    1326:	93 30       	cpi	r25, 0x03	; 3
    1328:	28 f4       	brcc	.+10     	; 0x1334 <vfprintf+0x130>
    132a:	0c 5f       	subi	r16, 0xFC	; 252
    132c:	1f 4f       	sbci	r17, 0xFF	; 255
    132e:	9f e3       	ldi	r25, 0x3F	; 63
    1330:	99 83       	std	Y+1, r25	; 0x01
    1332:	0d c0       	rjmp	.+26     	; 0x134e <vfprintf+0x14a>
    1334:	83 36       	cpi	r24, 0x63	; 99
    1336:	31 f0       	breq	.+12     	; 0x1344 <vfprintf+0x140>
    1338:	83 37       	cpi	r24, 0x73	; 115
    133a:	71 f0       	breq	.+28     	; 0x1358 <vfprintf+0x154>
    133c:	83 35       	cpi	r24, 0x53	; 83
    133e:	09 f0       	breq	.+2      	; 0x1342 <vfprintf+0x13e>
    1340:	55 c0       	rjmp	.+170    	; 0x13ec <vfprintf+0x1e8>
    1342:	20 c0       	rjmp	.+64     	; 0x1384 <vfprintf+0x180>
    1344:	f8 01       	movw	r30, r16
    1346:	80 81       	ld	r24, Z
    1348:	89 83       	std	Y+1, r24	; 0x01
    134a:	0e 5f       	subi	r16, 0xFE	; 254
    134c:	1f 4f       	sbci	r17, 0xFF	; 255
    134e:	88 24       	eor	r8, r8
    1350:	83 94       	inc	r8
    1352:	91 2c       	mov	r9, r1
    1354:	53 01       	movw	r10, r6
    1356:	12 c0       	rjmp	.+36     	; 0x137c <vfprintf+0x178>
    1358:	28 01       	movw	r4, r16
    135a:	f2 e0       	ldi	r31, 0x02	; 2
    135c:	4f 0e       	add	r4, r31
    135e:	51 1c       	adc	r5, r1
    1360:	f8 01       	movw	r30, r16
    1362:	a0 80       	ld	r10, Z
    1364:	b1 80       	ldd	r11, Z+1	; 0x01
    1366:	36 fe       	sbrs	r3, 6
    1368:	03 c0       	rjmp	.+6      	; 0x1370 <vfprintf+0x16c>
    136a:	69 2d       	mov	r22, r9
    136c:	70 e0       	ldi	r23, 0x00	; 0
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <vfprintf+0x170>
    1370:	6f ef       	ldi	r22, 0xFF	; 255
    1372:	7f ef       	ldi	r23, 0xFF	; 255
    1374:	c5 01       	movw	r24, r10
    1376:	90 d2       	rcall	.+1312   	; 0x1898 <strnlen>
    1378:	4c 01       	movw	r8, r24
    137a:	82 01       	movw	r16, r4
    137c:	f3 2d       	mov	r31, r3
    137e:	ff 77       	andi	r31, 0x7F	; 127
    1380:	3f 2e       	mov	r3, r31
    1382:	15 c0       	rjmp	.+42     	; 0x13ae <vfprintf+0x1aa>
    1384:	28 01       	movw	r4, r16
    1386:	22 e0       	ldi	r18, 0x02	; 2
    1388:	42 0e       	add	r4, r18
    138a:	51 1c       	adc	r5, r1
    138c:	f8 01       	movw	r30, r16
    138e:	a0 80       	ld	r10, Z
    1390:	b1 80       	ldd	r11, Z+1	; 0x01
    1392:	36 fe       	sbrs	r3, 6
    1394:	03 c0       	rjmp	.+6      	; 0x139c <vfprintf+0x198>
    1396:	69 2d       	mov	r22, r9
    1398:	70 e0       	ldi	r23, 0x00	; 0
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <vfprintf+0x19c>
    139c:	6f ef       	ldi	r22, 0xFF	; 255
    139e:	7f ef       	ldi	r23, 0xFF	; 255
    13a0:	c5 01       	movw	r24, r10
    13a2:	68 d2       	rcall	.+1232   	; 0x1874 <strnlen_P>
    13a4:	4c 01       	movw	r8, r24
    13a6:	f3 2d       	mov	r31, r3
    13a8:	f0 68       	ori	r31, 0x80	; 128
    13aa:	3f 2e       	mov	r3, r31
    13ac:	82 01       	movw	r16, r4
    13ae:	33 fc       	sbrc	r3, 3
    13b0:	19 c0       	rjmp	.+50     	; 0x13e4 <vfprintf+0x1e0>
    13b2:	82 2d       	mov	r24, r2
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	88 16       	cp	r8, r24
    13b8:	99 06       	cpc	r9, r25
    13ba:	a0 f4       	brcc	.+40     	; 0x13e4 <vfprintf+0x1e0>
    13bc:	b6 01       	movw	r22, r12
    13be:	80 e2       	ldi	r24, 0x20	; 32
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	85 d2       	rcall	.+1290   	; 0x18ce <fputc>
    13c4:	2a 94       	dec	r2
    13c6:	f5 cf       	rjmp	.-22     	; 0x13b2 <vfprintf+0x1ae>
    13c8:	f5 01       	movw	r30, r10
    13ca:	37 fc       	sbrc	r3, 7
    13cc:	85 91       	lpm	r24, Z+
    13ce:	37 fe       	sbrs	r3, 7
    13d0:	81 91       	ld	r24, Z+
    13d2:	5f 01       	movw	r10, r30
    13d4:	b6 01       	movw	r22, r12
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	7a d2       	rcall	.+1268   	; 0x18ce <fputc>
    13da:	21 10       	cpse	r2, r1
    13dc:	2a 94       	dec	r2
    13de:	21 e0       	ldi	r18, 0x01	; 1
    13e0:	82 1a       	sub	r8, r18
    13e2:	91 08       	sbc	r9, r1
    13e4:	81 14       	cp	r8, r1
    13e6:	91 04       	cpc	r9, r1
    13e8:	79 f7       	brne	.-34     	; 0x13c8 <vfprintf+0x1c4>
    13ea:	e1 c0       	rjmp	.+450    	; 0x15ae <vfprintf+0x3aa>
    13ec:	84 36       	cpi	r24, 0x64	; 100
    13ee:	11 f0       	breq	.+4      	; 0x13f4 <vfprintf+0x1f0>
    13f0:	89 36       	cpi	r24, 0x69	; 105
    13f2:	39 f5       	brne	.+78     	; 0x1442 <vfprintf+0x23e>
    13f4:	f8 01       	movw	r30, r16
    13f6:	37 fe       	sbrs	r3, 7
    13f8:	07 c0       	rjmp	.+14     	; 0x1408 <vfprintf+0x204>
    13fa:	60 81       	ld	r22, Z
    13fc:	71 81       	ldd	r23, Z+1	; 0x01
    13fe:	82 81       	ldd	r24, Z+2	; 0x02
    1400:	93 81       	ldd	r25, Z+3	; 0x03
    1402:	0c 5f       	subi	r16, 0xFC	; 252
    1404:	1f 4f       	sbci	r17, 0xFF	; 255
    1406:	08 c0       	rjmp	.+16     	; 0x1418 <vfprintf+0x214>
    1408:	60 81       	ld	r22, Z
    140a:	71 81       	ldd	r23, Z+1	; 0x01
    140c:	07 2e       	mov	r0, r23
    140e:	00 0c       	add	r0, r0
    1410:	88 0b       	sbc	r24, r24
    1412:	99 0b       	sbc	r25, r25
    1414:	0e 5f       	subi	r16, 0xFE	; 254
    1416:	1f 4f       	sbci	r17, 0xFF	; 255
    1418:	f3 2d       	mov	r31, r3
    141a:	ff 76       	andi	r31, 0x6F	; 111
    141c:	3f 2e       	mov	r3, r31
    141e:	97 ff       	sbrs	r25, 7
    1420:	09 c0       	rjmp	.+18     	; 0x1434 <vfprintf+0x230>
    1422:	90 95       	com	r25
    1424:	80 95       	com	r24
    1426:	70 95       	com	r23
    1428:	61 95       	neg	r22
    142a:	7f 4f       	sbci	r23, 0xFF	; 255
    142c:	8f 4f       	sbci	r24, 0xFF	; 255
    142e:	9f 4f       	sbci	r25, 0xFF	; 255
    1430:	f0 68       	ori	r31, 0x80	; 128
    1432:	3f 2e       	mov	r3, r31
    1434:	2a e0       	ldi	r18, 0x0A	; 10
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	a3 01       	movw	r20, r6
    143a:	85 d2       	rcall	.+1290   	; 0x1946 <__ultoa_invert>
    143c:	88 2e       	mov	r8, r24
    143e:	86 18       	sub	r8, r6
    1440:	44 c0       	rjmp	.+136    	; 0x14ca <vfprintf+0x2c6>
    1442:	85 37       	cpi	r24, 0x75	; 117
    1444:	31 f4       	brne	.+12     	; 0x1452 <vfprintf+0x24e>
    1446:	23 2d       	mov	r18, r3
    1448:	2f 7e       	andi	r18, 0xEF	; 239
    144a:	b2 2e       	mov	r11, r18
    144c:	2a e0       	ldi	r18, 0x0A	; 10
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	25 c0       	rjmp	.+74     	; 0x149c <vfprintf+0x298>
    1452:	93 2d       	mov	r25, r3
    1454:	99 7f       	andi	r25, 0xF9	; 249
    1456:	b9 2e       	mov	r11, r25
    1458:	8f 36       	cpi	r24, 0x6F	; 111
    145a:	c1 f0       	breq	.+48     	; 0x148c <vfprintf+0x288>
    145c:	18 f4       	brcc	.+6      	; 0x1464 <vfprintf+0x260>
    145e:	88 35       	cpi	r24, 0x58	; 88
    1460:	79 f0       	breq	.+30     	; 0x1480 <vfprintf+0x27c>
    1462:	ae c0       	rjmp	.+348    	; 0x15c0 <vfprintf+0x3bc>
    1464:	80 37       	cpi	r24, 0x70	; 112
    1466:	19 f0       	breq	.+6      	; 0x146e <vfprintf+0x26a>
    1468:	88 37       	cpi	r24, 0x78	; 120
    146a:	21 f0       	breq	.+8      	; 0x1474 <vfprintf+0x270>
    146c:	a9 c0       	rjmp	.+338    	; 0x15c0 <vfprintf+0x3bc>
    146e:	e9 2f       	mov	r30, r25
    1470:	e0 61       	ori	r30, 0x10	; 16
    1472:	be 2e       	mov	r11, r30
    1474:	b4 fe       	sbrs	r11, 4
    1476:	0d c0       	rjmp	.+26     	; 0x1492 <vfprintf+0x28e>
    1478:	fb 2d       	mov	r31, r11
    147a:	f4 60       	ori	r31, 0x04	; 4
    147c:	bf 2e       	mov	r11, r31
    147e:	09 c0       	rjmp	.+18     	; 0x1492 <vfprintf+0x28e>
    1480:	34 fe       	sbrs	r3, 4
    1482:	0a c0       	rjmp	.+20     	; 0x1498 <vfprintf+0x294>
    1484:	29 2f       	mov	r18, r25
    1486:	26 60       	ori	r18, 0x06	; 6
    1488:	b2 2e       	mov	r11, r18
    148a:	06 c0       	rjmp	.+12     	; 0x1498 <vfprintf+0x294>
    148c:	28 e0       	ldi	r18, 0x08	; 8
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	05 c0       	rjmp	.+10     	; 0x149c <vfprintf+0x298>
    1492:	20 e1       	ldi	r18, 0x10	; 16
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	02 c0       	rjmp	.+4      	; 0x149c <vfprintf+0x298>
    1498:	20 e1       	ldi	r18, 0x10	; 16
    149a:	32 e0       	ldi	r19, 0x02	; 2
    149c:	f8 01       	movw	r30, r16
    149e:	b7 fe       	sbrs	r11, 7
    14a0:	07 c0       	rjmp	.+14     	; 0x14b0 <vfprintf+0x2ac>
    14a2:	60 81       	ld	r22, Z
    14a4:	71 81       	ldd	r23, Z+1	; 0x01
    14a6:	82 81       	ldd	r24, Z+2	; 0x02
    14a8:	93 81       	ldd	r25, Z+3	; 0x03
    14aa:	0c 5f       	subi	r16, 0xFC	; 252
    14ac:	1f 4f       	sbci	r17, 0xFF	; 255
    14ae:	06 c0       	rjmp	.+12     	; 0x14bc <vfprintf+0x2b8>
    14b0:	60 81       	ld	r22, Z
    14b2:	71 81       	ldd	r23, Z+1	; 0x01
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	0e 5f       	subi	r16, 0xFE	; 254
    14ba:	1f 4f       	sbci	r17, 0xFF	; 255
    14bc:	a3 01       	movw	r20, r6
    14be:	43 d2       	rcall	.+1158   	; 0x1946 <__ultoa_invert>
    14c0:	88 2e       	mov	r8, r24
    14c2:	86 18       	sub	r8, r6
    14c4:	fb 2d       	mov	r31, r11
    14c6:	ff 77       	andi	r31, 0x7F	; 127
    14c8:	3f 2e       	mov	r3, r31
    14ca:	36 fe       	sbrs	r3, 6
    14cc:	0d c0       	rjmp	.+26     	; 0x14e8 <vfprintf+0x2e4>
    14ce:	23 2d       	mov	r18, r3
    14d0:	2e 7f       	andi	r18, 0xFE	; 254
    14d2:	a2 2e       	mov	r10, r18
    14d4:	89 14       	cp	r8, r9
    14d6:	58 f4       	brcc	.+22     	; 0x14ee <vfprintf+0x2ea>
    14d8:	34 fe       	sbrs	r3, 4
    14da:	0b c0       	rjmp	.+22     	; 0x14f2 <vfprintf+0x2ee>
    14dc:	32 fc       	sbrc	r3, 2
    14de:	09 c0       	rjmp	.+18     	; 0x14f2 <vfprintf+0x2ee>
    14e0:	83 2d       	mov	r24, r3
    14e2:	8e 7e       	andi	r24, 0xEE	; 238
    14e4:	a8 2e       	mov	r10, r24
    14e6:	05 c0       	rjmp	.+10     	; 0x14f2 <vfprintf+0x2ee>
    14e8:	b8 2c       	mov	r11, r8
    14ea:	a3 2c       	mov	r10, r3
    14ec:	03 c0       	rjmp	.+6      	; 0x14f4 <vfprintf+0x2f0>
    14ee:	b8 2c       	mov	r11, r8
    14f0:	01 c0       	rjmp	.+2      	; 0x14f4 <vfprintf+0x2f0>
    14f2:	b9 2c       	mov	r11, r9
    14f4:	a4 fe       	sbrs	r10, 4
    14f6:	0f c0       	rjmp	.+30     	; 0x1516 <vfprintf+0x312>
    14f8:	fe 01       	movw	r30, r28
    14fa:	e8 0d       	add	r30, r8
    14fc:	f1 1d       	adc	r31, r1
    14fe:	80 81       	ld	r24, Z
    1500:	80 33       	cpi	r24, 0x30	; 48
    1502:	21 f4       	brne	.+8      	; 0x150c <vfprintf+0x308>
    1504:	9a 2d       	mov	r25, r10
    1506:	99 7e       	andi	r25, 0xE9	; 233
    1508:	a9 2e       	mov	r10, r25
    150a:	09 c0       	rjmp	.+18     	; 0x151e <vfprintf+0x31a>
    150c:	a2 fe       	sbrs	r10, 2
    150e:	06 c0       	rjmp	.+12     	; 0x151c <vfprintf+0x318>
    1510:	b3 94       	inc	r11
    1512:	b3 94       	inc	r11
    1514:	04 c0       	rjmp	.+8      	; 0x151e <vfprintf+0x31a>
    1516:	8a 2d       	mov	r24, r10
    1518:	86 78       	andi	r24, 0x86	; 134
    151a:	09 f0       	breq	.+2      	; 0x151e <vfprintf+0x31a>
    151c:	b3 94       	inc	r11
    151e:	a3 fc       	sbrc	r10, 3
    1520:	10 c0       	rjmp	.+32     	; 0x1542 <vfprintf+0x33e>
    1522:	a0 fe       	sbrs	r10, 0
    1524:	06 c0       	rjmp	.+12     	; 0x1532 <vfprintf+0x32e>
    1526:	b2 14       	cp	r11, r2
    1528:	80 f4       	brcc	.+32     	; 0x154a <vfprintf+0x346>
    152a:	28 0c       	add	r2, r8
    152c:	92 2c       	mov	r9, r2
    152e:	9b 18       	sub	r9, r11
    1530:	0d c0       	rjmp	.+26     	; 0x154c <vfprintf+0x348>
    1532:	b2 14       	cp	r11, r2
    1534:	58 f4       	brcc	.+22     	; 0x154c <vfprintf+0x348>
    1536:	b6 01       	movw	r22, r12
    1538:	80 e2       	ldi	r24, 0x20	; 32
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	c8 d1       	rcall	.+912    	; 0x18ce <fputc>
    153e:	b3 94       	inc	r11
    1540:	f8 cf       	rjmp	.-16     	; 0x1532 <vfprintf+0x32e>
    1542:	b2 14       	cp	r11, r2
    1544:	18 f4       	brcc	.+6      	; 0x154c <vfprintf+0x348>
    1546:	2b 18       	sub	r2, r11
    1548:	02 c0       	rjmp	.+4      	; 0x154e <vfprintf+0x34a>
    154a:	98 2c       	mov	r9, r8
    154c:	21 2c       	mov	r2, r1
    154e:	a4 fe       	sbrs	r10, 4
    1550:	0f c0       	rjmp	.+30     	; 0x1570 <vfprintf+0x36c>
    1552:	b6 01       	movw	r22, r12
    1554:	80 e3       	ldi	r24, 0x30	; 48
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	ba d1       	rcall	.+884    	; 0x18ce <fputc>
    155a:	a2 fe       	sbrs	r10, 2
    155c:	16 c0       	rjmp	.+44     	; 0x158a <vfprintf+0x386>
    155e:	a1 fc       	sbrc	r10, 1
    1560:	03 c0       	rjmp	.+6      	; 0x1568 <vfprintf+0x364>
    1562:	88 e7       	ldi	r24, 0x78	; 120
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	02 c0       	rjmp	.+4      	; 0x156c <vfprintf+0x368>
    1568:	88 e5       	ldi	r24, 0x58	; 88
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	b6 01       	movw	r22, r12
    156e:	0c c0       	rjmp	.+24     	; 0x1588 <vfprintf+0x384>
    1570:	8a 2d       	mov	r24, r10
    1572:	86 78       	andi	r24, 0x86	; 134
    1574:	51 f0       	breq	.+20     	; 0x158a <vfprintf+0x386>
    1576:	a1 fe       	sbrs	r10, 1
    1578:	02 c0       	rjmp	.+4      	; 0x157e <vfprintf+0x37a>
    157a:	8b e2       	ldi	r24, 0x2B	; 43
    157c:	01 c0       	rjmp	.+2      	; 0x1580 <vfprintf+0x37c>
    157e:	80 e2       	ldi	r24, 0x20	; 32
    1580:	a7 fc       	sbrc	r10, 7
    1582:	8d e2       	ldi	r24, 0x2D	; 45
    1584:	b6 01       	movw	r22, r12
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	a2 d1       	rcall	.+836    	; 0x18ce <fputc>
    158a:	89 14       	cp	r8, r9
    158c:	30 f4       	brcc	.+12     	; 0x159a <vfprintf+0x396>
    158e:	b6 01       	movw	r22, r12
    1590:	80 e3       	ldi	r24, 0x30	; 48
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	9c d1       	rcall	.+824    	; 0x18ce <fputc>
    1596:	9a 94       	dec	r9
    1598:	f8 cf       	rjmp	.-16     	; 0x158a <vfprintf+0x386>
    159a:	8a 94       	dec	r8
    159c:	f3 01       	movw	r30, r6
    159e:	e8 0d       	add	r30, r8
    15a0:	f1 1d       	adc	r31, r1
    15a2:	80 81       	ld	r24, Z
    15a4:	b6 01       	movw	r22, r12
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	92 d1       	rcall	.+804    	; 0x18ce <fputc>
    15aa:	81 10       	cpse	r8, r1
    15ac:	f6 cf       	rjmp	.-20     	; 0x159a <vfprintf+0x396>
    15ae:	22 20       	and	r2, r2
    15b0:	09 f4       	brne	.+2      	; 0x15b4 <vfprintf+0x3b0>
    15b2:	4e ce       	rjmp	.-868    	; 0x1250 <vfprintf+0x4c>
    15b4:	b6 01       	movw	r22, r12
    15b6:	80 e2       	ldi	r24, 0x20	; 32
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	89 d1       	rcall	.+786    	; 0x18ce <fputc>
    15bc:	2a 94       	dec	r2
    15be:	f7 cf       	rjmp	.-18     	; 0x15ae <vfprintf+0x3aa>
    15c0:	f6 01       	movw	r30, r12
    15c2:	86 81       	ldd	r24, Z+6	; 0x06
    15c4:	97 81       	ldd	r25, Z+7	; 0x07
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <vfprintf+0x3c8>
    15c8:	8f ef       	ldi	r24, 0xFF	; 255
    15ca:	9f ef       	ldi	r25, 0xFF	; 255
    15cc:	2b 96       	adiw	r28, 0x0b	; 11
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	f8 94       	cli
    15d2:	de bf       	out	0x3e, r29	; 62
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	cd bf       	out	0x3d, r28	; 61
    15d8:	df 91       	pop	r29
    15da:	cf 91       	pop	r28
    15dc:	1f 91       	pop	r17
    15de:	0f 91       	pop	r16
    15e0:	ff 90       	pop	r15
    15e2:	ef 90       	pop	r14
    15e4:	df 90       	pop	r13
    15e6:	cf 90       	pop	r12
    15e8:	bf 90       	pop	r11
    15ea:	af 90       	pop	r10
    15ec:	9f 90       	pop	r9
    15ee:	8f 90       	pop	r8
    15f0:	7f 90       	pop	r7
    15f2:	6f 90       	pop	r6
    15f4:	5f 90       	pop	r5
    15f6:	4f 90       	pop	r4
    15f8:	3f 90       	pop	r3
    15fa:	2f 90       	pop	r2
    15fc:	08 95       	ret

000015fe <calloc>:
    15fe:	0f 93       	push	r16
    1600:	1f 93       	push	r17
    1602:	cf 93       	push	r28
    1604:	df 93       	push	r29
    1606:	86 9f       	mul	r24, r22
    1608:	80 01       	movw	r16, r0
    160a:	87 9f       	mul	r24, r23
    160c:	10 0d       	add	r17, r0
    160e:	96 9f       	mul	r25, r22
    1610:	10 0d       	add	r17, r0
    1612:	11 24       	eor	r1, r1
    1614:	c8 01       	movw	r24, r16
    1616:	0d d0       	rcall	.+26     	; 0x1632 <malloc>
    1618:	ec 01       	movw	r28, r24
    161a:	00 97       	sbiw	r24, 0x00	; 0
    161c:	21 f0       	breq	.+8      	; 0x1626 <calloc+0x28>
    161e:	a8 01       	movw	r20, r16
    1620:	60 e0       	ldi	r22, 0x00	; 0
    1622:	70 e0       	ldi	r23, 0x00	; 0
    1624:	32 d1       	rcall	.+612    	; 0x188a <memset>
    1626:	ce 01       	movw	r24, r28
    1628:	df 91       	pop	r29
    162a:	cf 91       	pop	r28
    162c:	1f 91       	pop	r17
    162e:	0f 91       	pop	r16
    1630:	08 95       	ret

00001632 <malloc>:
    1632:	0f 93       	push	r16
    1634:	1f 93       	push	r17
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
    163a:	82 30       	cpi	r24, 0x02	; 2
    163c:	91 05       	cpc	r25, r1
    163e:	10 f4       	brcc	.+4      	; 0x1644 <malloc+0x12>
    1640:	82 e0       	ldi	r24, 0x02	; 2
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	e0 91 0a 03 	lds	r30, 0x030A	; 0x80030a <__flp>
    1648:	f0 91 0b 03 	lds	r31, 0x030B	; 0x80030b <__flp+0x1>
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	a0 e0       	ldi	r26, 0x00	; 0
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	30 97       	sbiw	r30, 0x00	; 0
    1656:	19 f1       	breq	.+70     	; 0x169e <malloc+0x6c>
    1658:	40 81       	ld	r20, Z
    165a:	51 81       	ldd	r21, Z+1	; 0x01
    165c:	02 81       	ldd	r16, Z+2	; 0x02
    165e:	13 81       	ldd	r17, Z+3	; 0x03
    1660:	48 17       	cp	r20, r24
    1662:	59 07       	cpc	r21, r25
    1664:	c8 f0       	brcs	.+50     	; 0x1698 <malloc+0x66>
    1666:	84 17       	cp	r24, r20
    1668:	95 07       	cpc	r25, r21
    166a:	69 f4       	brne	.+26     	; 0x1686 <malloc+0x54>
    166c:	10 97       	sbiw	r26, 0x00	; 0
    166e:	31 f0       	breq	.+12     	; 0x167c <malloc+0x4a>
    1670:	12 96       	adiw	r26, 0x02	; 2
    1672:	0c 93       	st	X, r16
    1674:	12 97       	sbiw	r26, 0x02	; 2
    1676:	13 96       	adiw	r26, 0x03	; 3
    1678:	1c 93       	st	X, r17
    167a:	27 c0       	rjmp	.+78     	; 0x16ca <malloc+0x98>
    167c:	00 93 0a 03 	sts	0x030A, r16	; 0x80030a <__flp>
    1680:	10 93 0b 03 	sts	0x030B, r17	; 0x80030b <__flp+0x1>
    1684:	22 c0       	rjmp	.+68     	; 0x16ca <malloc+0x98>
    1686:	21 15       	cp	r18, r1
    1688:	31 05       	cpc	r19, r1
    168a:	19 f0       	breq	.+6      	; 0x1692 <malloc+0x60>
    168c:	42 17       	cp	r20, r18
    168e:	53 07       	cpc	r21, r19
    1690:	18 f4       	brcc	.+6      	; 0x1698 <malloc+0x66>
    1692:	9a 01       	movw	r18, r20
    1694:	bd 01       	movw	r22, r26
    1696:	ef 01       	movw	r28, r30
    1698:	df 01       	movw	r26, r30
    169a:	f8 01       	movw	r30, r16
    169c:	db cf       	rjmp	.-74     	; 0x1654 <malloc+0x22>
    169e:	21 15       	cp	r18, r1
    16a0:	31 05       	cpc	r19, r1
    16a2:	f9 f0       	breq	.+62     	; 0x16e2 <malloc+0xb0>
    16a4:	28 1b       	sub	r18, r24
    16a6:	39 0b       	sbc	r19, r25
    16a8:	24 30       	cpi	r18, 0x04	; 4
    16aa:	31 05       	cpc	r19, r1
    16ac:	80 f4       	brcc	.+32     	; 0x16ce <malloc+0x9c>
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	9b 81       	ldd	r25, Y+3	; 0x03
    16b2:	61 15       	cp	r22, r1
    16b4:	71 05       	cpc	r23, r1
    16b6:	21 f0       	breq	.+8      	; 0x16c0 <malloc+0x8e>
    16b8:	fb 01       	movw	r30, r22
    16ba:	93 83       	std	Z+3, r25	; 0x03
    16bc:	82 83       	std	Z+2, r24	; 0x02
    16be:	04 c0       	rjmp	.+8      	; 0x16c8 <malloc+0x96>
    16c0:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <__flp+0x1>
    16c4:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <__flp>
    16c8:	fe 01       	movw	r30, r28
    16ca:	32 96       	adiw	r30, 0x02	; 2
    16cc:	44 c0       	rjmp	.+136    	; 0x1756 <malloc+0x124>
    16ce:	fe 01       	movw	r30, r28
    16d0:	e2 0f       	add	r30, r18
    16d2:	f3 1f       	adc	r31, r19
    16d4:	81 93       	st	Z+, r24
    16d6:	91 93       	st	Z+, r25
    16d8:	22 50       	subi	r18, 0x02	; 2
    16da:	31 09       	sbc	r19, r1
    16dc:	39 83       	std	Y+1, r19	; 0x01
    16de:	28 83       	st	Y, r18
    16e0:	3a c0       	rjmp	.+116    	; 0x1756 <malloc+0x124>
    16e2:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <__brkval>
    16e6:	30 91 09 03 	lds	r19, 0x0309	; 0x800309 <__brkval+0x1>
    16ea:	23 2b       	or	r18, r19
    16ec:	41 f4       	brne	.+16     	; 0x16fe <malloc+0xcc>
    16ee:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    16f2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    16f6:	30 93 09 03 	sts	0x0309, r19	; 0x800309 <__brkval+0x1>
    16fa:	20 93 08 03 	sts	0x0308, r18	; 0x800308 <__brkval>
    16fe:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1702:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1706:	21 15       	cp	r18, r1
    1708:	31 05       	cpc	r19, r1
    170a:	41 f4       	brne	.+16     	; 0x171c <malloc+0xea>
    170c:	2d b7       	in	r18, 0x3d	; 61
    170e:	3e b7       	in	r19, 0x3e	; 62
    1710:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1714:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1718:	24 1b       	sub	r18, r20
    171a:	35 0b       	sbc	r19, r21
    171c:	e0 91 08 03 	lds	r30, 0x0308	; 0x800308 <__brkval>
    1720:	f0 91 09 03 	lds	r31, 0x0309	; 0x800309 <__brkval+0x1>
    1724:	e2 17       	cp	r30, r18
    1726:	f3 07       	cpc	r31, r19
    1728:	a0 f4       	brcc	.+40     	; 0x1752 <malloc+0x120>
    172a:	2e 1b       	sub	r18, r30
    172c:	3f 0b       	sbc	r19, r31
    172e:	28 17       	cp	r18, r24
    1730:	39 07       	cpc	r19, r25
    1732:	78 f0       	brcs	.+30     	; 0x1752 <malloc+0x120>
    1734:	ac 01       	movw	r20, r24
    1736:	4e 5f       	subi	r20, 0xFE	; 254
    1738:	5f 4f       	sbci	r21, 0xFF	; 255
    173a:	24 17       	cp	r18, r20
    173c:	35 07       	cpc	r19, r21
    173e:	48 f0       	brcs	.+18     	; 0x1752 <malloc+0x120>
    1740:	4e 0f       	add	r20, r30
    1742:	5f 1f       	adc	r21, r31
    1744:	50 93 09 03 	sts	0x0309, r21	; 0x800309 <__brkval+0x1>
    1748:	40 93 08 03 	sts	0x0308, r20	; 0x800308 <__brkval>
    174c:	81 93       	st	Z+, r24
    174e:	91 93       	st	Z+, r25
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <malloc+0x124>
    1752:	e0 e0       	ldi	r30, 0x00	; 0
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	cf 01       	movw	r24, r30
    1758:	df 91       	pop	r29
    175a:	cf 91       	pop	r28
    175c:	1f 91       	pop	r17
    175e:	0f 91       	pop	r16
    1760:	08 95       	ret

00001762 <free>:
    1762:	cf 93       	push	r28
    1764:	df 93       	push	r29
    1766:	00 97       	sbiw	r24, 0x00	; 0
    1768:	09 f4       	brne	.+2      	; 0x176c <free+0xa>
    176a:	81 c0       	rjmp	.+258    	; 0x186e <free+0x10c>
    176c:	fc 01       	movw	r30, r24
    176e:	32 97       	sbiw	r30, 0x02	; 2
    1770:	13 82       	std	Z+3, r1	; 0x03
    1772:	12 82       	std	Z+2, r1	; 0x02
    1774:	a0 91 0a 03 	lds	r26, 0x030A	; 0x80030a <__flp>
    1778:	b0 91 0b 03 	lds	r27, 0x030B	; 0x80030b <__flp+0x1>
    177c:	10 97       	sbiw	r26, 0x00	; 0
    177e:	81 f4       	brne	.+32     	; 0x17a0 <free+0x3e>
    1780:	20 81       	ld	r18, Z
    1782:	31 81       	ldd	r19, Z+1	; 0x01
    1784:	82 0f       	add	r24, r18
    1786:	93 1f       	adc	r25, r19
    1788:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <__brkval>
    178c:	30 91 09 03 	lds	r19, 0x0309	; 0x800309 <__brkval+0x1>
    1790:	28 17       	cp	r18, r24
    1792:	39 07       	cpc	r19, r25
    1794:	51 f5       	brne	.+84     	; 0x17ea <free+0x88>
    1796:	f0 93 09 03 	sts	0x0309, r31	; 0x800309 <__brkval+0x1>
    179a:	e0 93 08 03 	sts	0x0308, r30	; 0x800308 <__brkval>
    179e:	67 c0       	rjmp	.+206    	; 0x186e <free+0x10c>
    17a0:	ed 01       	movw	r28, r26
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	ce 17       	cp	r28, r30
    17a8:	df 07       	cpc	r29, r31
    17aa:	40 f4       	brcc	.+16     	; 0x17bc <free+0x5a>
    17ac:	4a 81       	ldd	r20, Y+2	; 0x02
    17ae:	5b 81       	ldd	r21, Y+3	; 0x03
    17b0:	9e 01       	movw	r18, r28
    17b2:	41 15       	cp	r20, r1
    17b4:	51 05       	cpc	r21, r1
    17b6:	f1 f0       	breq	.+60     	; 0x17f4 <free+0x92>
    17b8:	ea 01       	movw	r28, r20
    17ba:	f5 cf       	rjmp	.-22     	; 0x17a6 <free+0x44>
    17bc:	d3 83       	std	Z+3, r29	; 0x03
    17be:	c2 83       	std	Z+2, r28	; 0x02
    17c0:	40 81       	ld	r20, Z
    17c2:	51 81       	ldd	r21, Z+1	; 0x01
    17c4:	84 0f       	add	r24, r20
    17c6:	95 1f       	adc	r25, r21
    17c8:	c8 17       	cp	r28, r24
    17ca:	d9 07       	cpc	r29, r25
    17cc:	59 f4       	brne	.+22     	; 0x17e4 <free+0x82>
    17ce:	88 81       	ld	r24, Y
    17d0:	99 81       	ldd	r25, Y+1	; 0x01
    17d2:	84 0f       	add	r24, r20
    17d4:	95 1f       	adc	r25, r21
    17d6:	02 96       	adiw	r24, 0x02	; 2
    17d8:	91 83       	std	Z+1, r25	; 0x01
    17da:	80 83       	st	Z, r24
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	9b 81       	ldd	r25, Y+3	; 0x03
    17e0:	93 83       	std	Z+3, r25	; 0x03
    17e2:	82 83       	std	Z+2, r24	; 0x02
    17e4:	21 15       	cp	r18, r1
    17e6:	31 05       	cpc	r19, r1
    17e8:	29 f4       	brne	.+10     	; 0x17f4 <free+0x92>
    17ea:	f0 93 0b 03 	sts	0x030B, r31	; 0x80030b <__flp+0x1>
    17ee:	e0 93 0a 03 	sts	0x030A, r30	; 0x80030a <__flp>
    17f2:	3d c0       	rjmp	.+122    	; 0x186e <free+0x10c>
    17f4:	e9 01       	movw	r28, r18
    17f6:	fb 83       	std	Y+3, r31	; 0x03
    17f8:	ea 83       	std	Y+2, r30	; 0x02
    17fa:	49 91       	ld	r20, Y+
    17fc:	59 91       	ld	r21, Y+
    17fe:	c4 0f       	add	r28, r20
    1800:	d5 1f       	adc	r29, r21
    1802:	ec 17       	cp	r30, r28
    1804:	fd 07       	cpc	r31, r29
    1806:	61 f4       	brne	.+24     	; 0x1820 <free+0xbe>
    1808:	80 81       	ld	r24, Z
    180a:	91 81       	ldd	r25, Z+1	; 0x01
    180c:	84 0f       	add	r24, r20
    180e:	95 1f       	adc	r25, r21
    1810:	02 96       	adiw	r24, 0x02	; 2
    1812:	e9 01       	movw	r28, r18
    1814:	99 83       	std	Y+1, r25	; 0x01
    1816:	88 83       	st	Y, r24
    1818:	82 81       	ldd	r24, Z+2	; 0x02
    181a:	93 81       	ldd	r25, Z+3	; 0x03
    181c:	9b 83       	std	Y+3, r25	; 0x03
    181e:	8a 83       	std	Y+2, r24	; 0x02
    1820:	e0 e0       	ldi	r30, 0x00	; 0
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	12 96       	adiw	r26, 0x02	; 2
    1826:	8d 91       	ld	r24, X+
    1828:	9c 91       	ld	r25, X
    182a:	13 97       	sbiw	r26, 0x03	; 3
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	19 f0       	breq	.+6      	; 0x1836 <free+0xd4>
    1830:	fd 01       	movw	r30, r26
    1832:	dc 01       	movw	r26, r24
    1834:	f7 cf       	rjmp	.-18     	; 0x1824 <free+0xc2>
    1836:	8d 91       	ld	r24, X+
    1838:	9c 91       	ld	r25, X
    183a:	11 97       	sbiw	r26, 0x01	; 1
    183c:	9d 01       	movw	r18, r26
    183e:	2e 5f       	subi	r18, 0xFE	; 254
    1840:	3f 4f       	sbci	r19, 0xFF	; 255
    1842:	82 0f       	add	r24, r18
    1844:	93 1f       	adc	r25, r19
    1846:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <__brkval>
    184a:	30 91 09 03 	lds	r19, 0x0309	; 0x800309 <__brkval+0x1>
    184e:	28 17       	cp	r18, r24
    1850:	39 07       	cpc	r19, r25
    1852:	69 f4       	brne	.+26     	; 0x186e <free+0x10c>
    1854:	30 97       	sbiw	r30, 0x00	; 0
    1856:	29 f4       	brne	.+10     	; 0x1862 <free+0x100>
    1858:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <__flp+0x1>
    185c:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <__flp>
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <free+0x104>
    1862:	13 82       	std	Z+3, r1	; 0x03
    1864:	12 82       	std	Z+2, r1	; 0x02
    1866:	b0 93 09 03 	sts	0x0309, r27	; 0x800309 <__brkval+0x1>
    186a:	a0 93 08 03 	sts	0x0308, r26	; 0x800308 <__brkval>
    186e:	df 91       	pop	r29
    1870:	cf 91       	pop	r28
    1872:	08 95       	ret

00001874 <strnlen_P>:
    1874:	fc 01       	movw	r30, r24
    1876:	05 90       	lpm	r0, Z+
    1878:	61 50       	subi	r22, 0x01	; 1
    187a:	70 40       	sbci	r23, 0x00	; 0
    187c:	01 10       	cpse	r0, r1
    187e:	d8 f7       	brcc	.-10     	; 0x1876 <strnlen_P+0x2>
    1880:	80 95       	com	r24
    1882:	90 95       	com	r25
    1884:	8e 0f       	add	r24, r30
    1886:	9f 1f       	adc	r25, r31
    1888:	08 95       	ret

0000188a <memset>:
    188a:	dc 01       	movw	r26, r24
    188c:	01 c0       	rjmp	.+2      	; 0x1890 <memset+0x6>
    188e:	6d 93       	st	X+, r22
    1890:	41 50       	subi	r20, 0x01	; 1
    1892:	50 40       	sbci	r21, 0x00	; 0
    1894:	e0 f7       	brcc	.-8      	; 0x188e <memset+0x4>
    1896:	08 95       	ret

00001898 <strnlen>:
    1898:	fc 01       	movw	r30, r24
    189a:	61 50       	subi	r22, 0x01	; 1
    189c:	70 40       	sbci	r23, 0x00	; 0
    189e:	01 90       	ld	r0, Z+
    18a0:	01 10       	cpse	r0, r1
    18a2:	d8 f7       	brcc	.-10     	; 0x189a <strnlen+0x2>
    18a4:	80 95       	com	r24
    18a6:	90 95       	com	r25
    18a8:	8e 0f       	add	r24, r30
    18aa:	9f 1f       	adc	r25, r31
    18ac:	08 95       	ret

000018ae <strrev>:
    18ae:	dc 01       	movw	r26, r24
    18b0:	fc 01       	movw	r30, r24
    18b2:	67 2f       	mov	r22, r23
    18b4:	71 91       	ld	r23, Z+
    18b6:	77 23       	and	r23, r23
    18b8:	e1 f7       	brne	.-8      	; 0x18b2 <strrev+0x4>
    18ba:	32 97       	sbiw	r30, 0x02	; 2
    18bc:	04 c0       	rjmp	.+8      	; 0x18c6 <strrev+0x18>
    18be:	7c 91       	ld	r23, X
    18c0:	6d 93       	st	X+, r22
    18c2:	70 83       	st	Z, r23
    18c4:	62 91       	ld	r22, -Z
    18c6:	ae 17       	cp	r26, r30
    18c8:	bf 07       	cpc	r27, r31
    18ca:	c8 f3       	brcs	.-14     	; 0x18be <strrev+0x10>
    18cc:	08 95       	ret

000018ce <fputc>:
    18ce:	0f 93       	push	r16
    18d0:	1f 93       	push	r17
    18d2:	cf 93       	push	r28
    18d4:	df 93       	push	r29
    18d6:	fb 01       	movw	r30, r22
    18d8:	23 81       	ldd	r18, Z+3	; 0x03
    18da:	21 fd       	sbrc	r18, 1
    18dc:	03 c0       	rjmp	.+6      	; 0x18e4 <fputc+0x16>
    18de:	8f ef       	ldi	r24, 0xFF	; 255
    18e0:	9f ef       	ldi	r25, 0xFF	; 255
    18e2:	2c c0       	rjmp	.+88     	; 0x193c <fputc+0x6e>
    18e4:	22 ff       	sbrs	r18, 2
    18e6:	16 c0       	rjmp	.+44     	; 0x1914 <fputc+0x46>
    18e8:	46 81       	ldd	r20, Z+6	; 0x06
    18ea:	57 81       	ldd	r21, Z+7	; 0x07
    18ec:	24 81       	ldd	r18, Z+4	; 0x04
    18ee:	35 81       	ldd	r19, Z+5	; 0x05
    18f0:	42 17       	cp	r20, r18
    18f2:	53 07       	cpc	r21, r19
    18f4:	44 f4       	brge	.+16     	; 0x1906 <fputc+0x38>
    18f6:	a0 81       	ld	r26, Z
    18f8:	b1 81       	ldd	r27, Z+1	; 0x01
    18fa:	9d 01       	movw	r18, r26
    18fc:	2f 5f       	subi	r18, 0xFF	; 255
    18fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1900:	31 83       	std	Z+1, r19	; 0x01
    1902:	20 83       	st	Z, r18
    1904:	8c 93       	st	X, r24
    1906:	26 81       	ldd	r18, Z+6	; 0x06
    1908:	37 81       	ldd	r19, Z+7	; 0x07
    190a:	2f 5f       	subi	r18, 0xFF	; 255
    190c:	3f 4f       	sbci	r19, 0xFF	; 255
    190e:	37 83       	std	Z+7, r19	; 0x07
    1910:	26 83       	std	Z+6, r18	; 0x06
    1912:	14 c0       	rjmp	.+40     	; 0x193c <fputc+0x6e>
    1914:	8b 01       	movw	r16, r22
    1916:	ec 01       	movw	r28, r24
    1918:	fb 01       	movw	r30, r22
    191a:	00 84       	ldd	r0, Z+8	; 0x08
    191c:	f1 85       	ldd	r31, Z+9	; 0x09
    191e:	e0 2d       	mov	r30, r0
    1920:	09 95       	icall
    1922:	89 2b       	or	r24, r25
    1924:	e1 f6       	brne	.-72     	; 0x18de <fputc+0x10>
    1926:	d8 01       	movw	r26, r16
    1928:	16 96       	adiw	r26, 0x06	; 6
    192a:	8d 91       	ld	r24, X+
    192c:	9c 91       	ld	r25, X
    192e:	17 97       	sbiw	r26, 0x07	; 7
    1930:	01 96       	adiw	r24, 0x01	; 1
    1932:	17 96       	adiw	r26, 0x07	; 7
    1934:	9c 93       	st	X, r25
    1936:	8e 93       	st	-X, r24
    1938:	16 97       	sbiw	r26, 0x06	; 6
    193a:	ce 01       	movw	r24, r28
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	1f 91       	pop	r17
    1942:	0f 91       	pop	r16
    1944:	08 95       	ret

00001946 <__ultoa_invert>:
    1946:	fa 01       	movw	r30, r20
    1948:	aa 27       	eor	r26, r26
    194a:	28 30       	cpi	r18, 0x08	; 8
    194c:	51 f1       	breq	.+84     	; 0x19a2 <__ultoa_invert+0x5c>
    194e:	20 31       	cpi	r18, 0x10	; 16
    1950:	81 f1       	breq	.+96     	; 0x19b2 <__ultoa_invert+0x6c>
    1952:	e8 94       	clt
    1954:	6f 93       	push	r22
    1956:	6e 7f       	andi	r22, 0xFE	; 254
    1958:	6e 5f       	subi	r22, 0xFE	; 254
    195a:	7f 4f       	sbci	r23, 0xFF	; 255
    195c:	8f 4f       	sbci	r24, 0xFF	; 255
    195e:	9f 4f       	sbci	r25, 0xFF	; 255
    1960:	af 4f       	sbci	r26, 0xFF	; 255
    1962:	b1 e0       	ldi	r27, 0x01	; 1
    1964:	3e d0       	rcall	.+124    	; 0x19e2 <__ultoa_invert+0x9c>
    1966:	b4 e0       	ldi	r27, 0x04	; 4
    1968:	3c d0       	rcall	.+120    	; 0x19e2 <__ultoa_invert+0x9c>
    196a:	67 0f       	add	r22, r23
    196c:	78 1f       	adc	r23, r24
    196e:	89 1f       	adc	r24, r25
    1970:	9a 1f       	adc	r25, r26
    1972:	a1 1d       	adc	r26, r1
    1974:	68 0f       	add	r22, r24
    1976:	79 1f       	adc	r23, r25
    1978:	8a 1f       	adc	r24, r26
    197a:	91 1d       	adc	r25, r1
    197c:	a1 1d       	adc	r26, r1
    197e:	6a 0f       	add	r22, r26
    1980:	71 1d       	adc	r23, r1
    1982:	81 1d       	adc	r24, r1
    1984:	91 1d       	adc	r25, r1
    1986:	a1 1d       	adc	r26, r1
    1988:	20 d0       	rcall	.+64     	; 0x19ca <__ultoa_invert+0x84>
    198a:	09 f4       	brne	.+2      	; 0x198e <__ultoa_invert+0x48>
    198c:	68 94       	set
    198e:	3f 91       	pop	r19
    1990:	2a e0       	ldi	r18, 0x0A	; 10
    1992:	26 9f       	mul	r18, r22
    1994:	11 24       	eor	r1, r1
    1996:	30 19       	sub	r19, r0
    1998:	30 5d       	subi	r19, 0xD0	; 208
    199a:	31 93       	st	Z+, r19
    199c:	de f6       	brtc	.-74     	; 0x1954 <__ultoa_invert+0xe>
    199e:	cf 01       	movw	r24, r30
    19a0:	08 95       	ret
    19a2:	46 2f       	mov	r20, r22
    19a4:	47 70       	andi	r20, 0x07	; 7
    19a6:	40 5d       	subi	r20, 0xD0	; 208
    19a8:	41 93       	st	Z+, r20
    19aa:	b3 e0       	ldi	r27, 0x03	; 3
    19ac:	0f d0       	rcall	.+30     	; 0x19cc <__ultoa_invert+0x86>
    19ae:	c9 f7       	brne	.-14     	; 0x19a2 <__ultoa_invert+0x5c>
    19b0:	f6 cf       	rjmp	.-20     	; 0x199e <__ultoa_invert+0x58>
    19b2:	46 2f       	mov	r20, r22
    19b4:	4f 70       	andi	r20, 0x0F	; 15
    19b6:	40 5d       	subi	r20, 0xD0	; 208
    19b8:	4a 33       	cpi	r20, 0x3A	; 58
    19ba:	18 f0       	brcs	.+6      	; 0x19c2 <__ultoa_invert+0x7c>
    19bc:	49 5d       	subi	r20, 0xD9	; 217
    19be:	31 fd       	sbrc	r19, 1
    19c0:	40 52       	subi	r20, 0x20	; 32
    19c2:	41 93       	st	Z+, r20
    19c4:	02 d0       	rcall	.+4      	; 0x19ca <__ultoa_invert+0x84>
    19c6:	a9 f7       	brne	.-22     	; 0x19b2 <__ultoa_invert+0x6c>
    19c8:	ea cf       	rjmp	.-44     	; 0x199e <__ultoa_invert+0x58>
    19ca:	b4 e0       	ldi	r27, 0x04	; 4
    19cc:	a6 95       	lsr	r26
    19ce:	97 95       	ror	r25
    19d0:	87 95       	ror	r24
    19d2:	77 95       	ror	r23
    19d4:	67 95       	ror	r22
    19d6:	ba 95       	dec	r27
    19d8:	c9 f7       	brne	.-14     	; 0x19cc <__ultoa_invert+0x86>
    19da:	00 97       	sbiw	r24, 0x00	; 0
    19dc:	61 05       	cpc	r22, r1
    19de:	71 05       	cpc	r23, r1
    19e0:	08 95       	ret
    19e2:	9b 01       	movw	r18, r22
    19e4:	ac 01       	movw	r20, r24
    19e6:	0a 2e       	mov	r0, r26
    19e8:	06 94       	lsr	r0
    19ea:	57 95       	ror	r21
    19ec:	47 95       	ror	r20
    19ee:	37 95       	ror	r19
    19f0:	27 95       	ror	r18
    19f2:	ba 95       	dec	r27
    19f4:	c9 f7       	brne	.-14     	; 0x19e8 <__ultoa_invert+0xa2>
    19f6:	62 0f       	add	r22, r18
    19f8:	73 1f       	adc	r23, r19
    19fa:	84 1f       	adc	r24, r20
    19fc:	95 1f       	adc	r25, r21
    19fe:	a0 1d       	adc	r26, r0
    1a00:	08 95       	ret

00001a02 <_exit>:
    1a02:	f8 94       	cli

00001a04 <__stop_program>:
    1a04:	ff cf       	rjmp	.-2      	; 0x1a04 <__stop_program>
