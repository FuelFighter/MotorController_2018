
MotorController_2018.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000011ac  00001240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f5  00800106  00800106  00001246  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001246  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001278  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  000012b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023ba  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000132e  00000000  00000000  00003832  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010b8  00000000  00000000  00004b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000474  00000000  00000000  00005c18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d1d  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000df4  00000000  00000000  00006da9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00007b9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d9 c1       	rjmp	.+946    	; 0x3e4 <__vector_12>
      32:	00 00       	nop
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	b2 c4       	rjmp	.+2404   	; 0x9aa <__vector_17>
      46:	00 00       	nop
      48:	4a c2       	rjmp	.+1172   	; 0x4de <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	3d c0       	rjmp	.+122    	; 0xd0 <__bad_interrupt>
      56:	00 00       	nop
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	39 c0       	rjmp	.+114    	; 0xd0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c0       	rjmp	.+78     	; 0xd0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c0       	rjmp	.+70     	; 0xd0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ec ea       	ldi	r30, 0xAC	; 172
      a8:	f1 e1       	ldi	r31, 0x11	; 17
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a6 30       	cpi	r26, 0x06	; 6
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	22 e0       	ldi	r18, 0x02	; 2
      bc:	a6 e0       	ldi	r26, 0x06	; 6
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	ab 3f       	cpi	r26, 0xFB	; 251
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	ec d0       	rcall	.+472    	; 0x2a4 <main>
      cc:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <timer_init_ts>:




void timer_init_ts(){
	TCCR1B |= (1<<CS10)|(1<<CS11);
      d2:	e1 e8       	ldi	r30, 0x81	; 129
      d4:	f0 e0       	ldi	r31, 0x00	; 0
      d6:	80 81       	ld	r24, Z
      d8:	83 60       	ori	r24, 0x03	; 3
      da:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12); //CTC
      dc:	80 81       	ld	r24, Z
      de:	88 60       	ori	r24, 0x08	; 8
      e0:	80 83       	st	Z, r24
	TCNT1 = 0;
      e2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
      e6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIMSK1 |= (1<<OCIE1A);
      ea:	ef e6       	ldi	r30, 0x6F	; 111
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	80 81       	ld	r24, Z
      f0:	82 60       	ori	r24, 0x02	; 2
      f2:	80 83       	st	Z, r24
	OCR1A = 12500 - 1;
      f4:	83 ed       	ldi	r24, 0xD3	; 211
      f6:	90 e3       	ldi	r25, 0x30	; 48
      f8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
      fc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     100:	08 95       	ret

00000102 <toggle_DCDC>:
};



void toggle_DCDC(uint8_t OnOff){
	if (OnOff){
     102:	88 23       	and	r24, r24
     104:	11 f0       	breq	.+4      	; 0x10a <toggle_DCDC+0x8>
		PORTB &= ~(1 << PB3);
     106:	2b 98       	cbi	0x05, 3	; 5
     108:	08 95       	ret
	}else{
		PORTB |= (1 << PB3);
     10a:	2b 9a       	sbi	0x05, 3	; 5
     10c:	08 95       	ret

0000010e <handle_can>:
	}
}

void handle_can(ModuleValues_t *vals, CanMessage_t *rx){
     10e:	0f 93       	push	r16
     110:	1f 93       	push	r17
     112:	cf 93       	push	r28
     114:	df 93       	push	r29
     116:	8c 01       	movw	r16, r24
     118:	eb 01       	movw	r28, r22
	if (can_read_message_if_new(rx)){
     11a:	cb 01       	movw	r24, r22
     11c:	26 d3       	rcall	.+1612   	; 0x76a <can_read_message_if_new>
     11e:	88 23       	and	r24, r24
     120:	49 f1       	breq	.+82     	; 0x174 <handle_can+0x66>
		switch (rx->id){
     122:	88 81       	ld	r24, Y
     124:	99 81       	ldd	r25, Y+1	; 0x01
     126:	80 32       	cpi	r24, 0x20	; 32
     128:	22 e0       	ldi	r18, 0x02	; 2
     12a:	92 07       	cpc	r25, r18
     12c:	f1 f0       	breq	.+60     	; 0x16a <handle_can+0x5c>
     12e:	20 f4       	brcc	.+8      	; 0x138 <handle_can+0x2a>
     130:	80 31       	cpi	r24, 0x10	; 16
     132:	91 40       	sbci	r25, 0x01	; 1
     134:	49 f0       	breq	.+18     	; 0x148 <handle_can+0x3a>
     136:	1e c0       	rjmp	.+60     	; 0x174 <handle_can+0x66>
     138:	80 33       	cpi	r24, 0x30	; 48
     13a:	22 e0       	ldi	r18, 0x02	; 2
     13c:	92 07       	cpc	r25, r18
     13e:	61 f0       	breq	.+24     	; 0x158 <handle_can+0x4a>
     140:	88 34       	cpi	r24, 0x48	; 72
     142:	94 40       	sbci	r25, 0x04	; 4
     144:	29 f0       	breq	.+10     	; 0x150 <handle_can+0x42>
     146:	16 c0       	rjmp	.+44     	; 0x174 <handle_can+0x66>
			case BRAKE_CAN_ID:
				vals->braking = rx->data.u8[0];
     148:	8b 81       	ldd	r24, Y+3	; 0x03
     14a:	f8 01       	movw	r30, r16
     14c:	85 83       	std	Z+5, r24	; 0x05
				break;
     14e:	12 c0       	rjmp	.+36     	; 0x174 <handle_can+0x66>
			case BMS_STATUS_CAN_ID:
				vals->BMS_status = rx->data.u8[0];
     150:	8b 81       	ldd	r24, Y+3	; 0x03
     152:	f8 01       	movw	r30, r16
     154:	80 83       	st	Z, r24
				break;
     156:	0e c0       	rjmp	.+28     	; 0x174 <handle_can+0x66>
			case STEERING_WHEEL_CAN_ID:
				vals->throttle_cmd = rx->data.u8[3];
     158:	8e 81       	ldd	r24, Y+6	; 0x06
     15a:	f8 01       	movw	r30, r16
     15c:	81 83       	std	Z+1, r24	; 0x01
				vals->restart_overload = rx->data.u8[1] & HORN;
     15e:	8c 81       	ldd	r24, Y+4	; 0x04
     160:	82 70       	andi	r24, 0x02	; 2
     162:	82 83       	std	Z+2, r24	; 0x02
				vals->deadman = rx->data.u8[2];
     164:	8d 81       	ldd	r24, Y+5	; 0x05
     166:	83 87       	std	Z+11, r24	; 0x0b
				break;
     168:	05 c0       	rjmp	.+10     	; 0x174 <handle_can+0x66>
			case ENCODER_CAN_ID:
				vals->rpm = rx->data.u16[ENCODER_CHANNEL];
     16a:	8b 81       	ldd	r24, Y+3	; 0x03
     16c:	9c 81       	ldd	r25, Y+4	; 0x04
     16e:	f8 01       	movw	r30, r16
     170:	94 83       	std	Z+4, r25	; 0x04
     172:	83 83       	std	Z+3, r24	; 0x03
				break;
		}
	}
}
     174:	df 91       	pop	r29
     176:	cf 91       	pop	r28
     178:	1f 91       	pop	r17
     17a:	0f 91       	pop	r16
     17c:	08 95       	ret

0000017e <handle_motor_status_can_msg>:

void handle_motor_status_can_msg(uint8_t *send, ModuleValues_t *vals){
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
	if(*send){
     182:	fc 01       	movw	r30, r24
     184:	20 81       	ld	r18, Z
     186:	22 23       	and	r18, r18
     188:	19 f1       	breq	.+70     	; 0x1d0 <handle_motor_status_can_msg+0x52>
     18a:	fb 01       	movw	r30, r22
     18c:	ec 01       	movw	r28, r24
		txFrame.data.u8[0] = vals->motor_status;
     18e:	a6 ee       	ldi	r26, 0xE6	; 230
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	82 85       	ldd	r24, Z+10	; 0x0a
     194:	13 96       	adiw	r26, 0x03	; 3
     196:	8c 93       	st	X, r24
     198:	13 97       	sbiw	r26, 0x03	; 3
		txFrame.data.u8[1] = vals->throttle_cmd;
     19a:	81 81       	ldd	r24, Z+1	; 0x01
     19c:	14 96       	adiw	r26, 0x04	; 4
     19e:	8c 93       	st	X, r24
     1a0:	14 97       	sbiw	r26, 0x04	; 4
		txFrame.data.u16[1] = vals->mamp;
     1a2:	86 81       	ldd	r24, Z+6	; 0x06
     1a4:	97 81       	ldd	r25, Z+7	; 0x07
     1a6:	16 96       	adiw	r26, 0x06	; 6
     1a8:	9c 93       	st	X, r25
     1aa:	8e 93       	st	-X, r24
     1ac:	15 97       	sbiw	r26, 0x05	; 5
		txFrame.data.u16[2] = OCR3B;
     1ae:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
     1b2:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     1b6:	18 96       	adiw	r26, 0x08	; 8
     1b8:	9c 93       	st	X, r25
     1ba:	8e 93       	st	-X, r24
     1bc:	17 97       	sbiw	r26, 0x07	; 7
		txFrame.data.u16[3] = vals->rpm;
     1be:	83 81       	ldd	r24, Z+3	; 0x03
     1c0:	94 81       	ldd	r25, Z+4	; 0x04
     1c2:	1a 96       	adiw	r26, 0x0a	; 10
     1c4:	9c 93       	st	X, r25
     1c6:	8e 93       	st	-X, r24
     1c8:	19 97       	sbiw	r26, 0x09	; 9
		
		can_send_message(&txFrame);
     1ca:	cd 01       	movw	r24, r26
     1cc:	11 d3       	rcall	.+1570   	; 0x7f0 <can_send_message>
		*send = 0;
     1ce:	18 82       	st	Y, r1
	}
}
     1d0:	df 91       	pop	r29
     1d2:	cf 91       	pop	r28
     1d4:	08 95       	ret

000001d6 <handle_current_sensor>:

void handle_current_sensor(float *f32_prev_current){ //----------------------------------------------------------------------------TODO test if ok with uint32, otherwise use float
     1d6:	8f 92       	push	r8
     1d8:	9f 92       	push	r9
     1da:	af 92       	push	r10
     1dc:	bf 92       	push	r11
     1de:	cf 92       	push	r12
     1e0:	df 92       	push	r13
     1e2:	ef 92       	push	r14
     1e4:	ff 92       	push	r15
     1e6:	0f 93       	push	r16
     1e8:	1f 93       	push	r17
     1ea:	cf 93       	push	r28
     1ec:	df 93       	push	r29
     1ee:	00 d0       	rcall	.+0      	; 0x1f0 <handle_current_sensor+0x1a>
     1f0:	00 d0       	rcall	.+0      	; 0x1f2 <handle_current_sensor+0x1c>
     1f2:	cd b7       	in	r28, 0x3d	; 61
     1f4:	de b7       	in	r29, 0x3e	; 62
     1f6:	8c 01       	movw	r16, r24
	
	volatile float f_new_current = ((((float)u16_ADC2_reg*5/1024) - TRANSDUCER_OFFSET)/TRANSDUCER_SENSIBILITY)/3 ;// /3 because current passes 3x in transducer for more precision.
     1f8:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <u16_ADC2_reg>
     1fc:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <u16_ADC2_reg+0x1>
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	2c d5       	rcall	.+2648   	; 0xc5e <__floatunsisf>
     206:	20 e0       	ldi	r18, 0x00	; 0
     208:	30 e0       	ldi	r19, 0x00	; 0
     20a:	40 ea       	ldi	r20, 0xA0	; 160
     20c:	50 e4       	ldi	r21, 0x40	; 64
     20e:	dd d5       	rcall	.+3002   	; 0xdca <__mulsf3>
     210:	20 e0       	ldi	r18, 0x00	; 0
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e8       	ldi	r20, 0x80	; 128
     216:	5a e3       	ldi	r21, 0x3A	; 58
     218:	d8 d5       	rcall	.+2992   	; 0xdca <__mulsf3>
     21a:	20 e0       	ldi	r18, 0x00	; 0
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	40 e2       	ldi	r20, 0x20	; 32
     220:	50 e4       	ldi	r21, 0x40	; 64
     222:	1b d4       	rcall	.+2102   	; 0xa5a <__subsf3>
     224:	23 ec       	ldi	r18, 0xC3	; 195
     226:	34 e6       	ldi	r19, 0x64	; 100
     228:	4a e2       	ldi	r20, 0x2A	; 42
     22a:	5d e3       	ldi	r21, 0x3D	; 61
     22c:	7f d4       	rcall	.+2302   	; 0xb2c <__divsf3>
     22e:	20 e0       	ldi	r18, 0x00	; 0
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	40 e4       	ldi	r20, 0x40	; 64
     234:	50 e4       	ldi	r21, 0x40	; 64
     236:	7a d4       	rcall	.+2292   	; 0xb2c <__divsf3>
     238:	69 83       	std	Y+1, r22	; 0x01
     23a:	7a 83       	std	Y+2, r23	; 0x02
     23c:	8b 83       	std	Y+3, r24	; 0x03
     23e:	9c 83       	std	Y+4, r25	; 0x04
	*f32_prev_current = (*f32_prev_current)*(1-LOWPASS_CONSTANT) + LOWPASS_CONSTANT*f_new_current ;// low pass filter ---------------------TODO test
     240:	89 80       	ldd	r8, Y+1	; 0x01
     242:	9a 80       	ldd	r9, Y+2	; 0x02
     244:	ab 80       	ldd	r10, Y+3	; 0x03
     246:	bc 80       	ldd	r11, Y+4	; 0x04
     248:	26 e6       	ldi	r18, 0x66	; 102
     24a:	36 e6       	ldi	r19, 0x66	; 102
     24c:	46 e6       	ldi	r20, 0x66	; 102
     24e:	5f e3       	ldi	r21, 0x3F	; 63
     250:	f8 01       	movw	r30, r16
     252:	60 81       	ld	r22, Z
     254:	71 81       	ldd	r23, Z+1	; 0x01
     256:	82 81       	ldd	r24, Z+2	; 0x02
     258:	93 81       	ldd	r25, Z+3	; 0x03
     25a:	b7 d5       	rcall	.+2926   	; 0xdca <__mulsf3>
     25c:	6b 01       	movw	r12, r22
     25e:	7c 01       	movw	r14, r24
     260:	2d ec       	ldi	r18, 0xCD	; 205
     262:	3c ec       	ldi	r19, 0xCC	; 204
     264:	4c ec       	ldi	r20, 0xCC	; 204
     266:	5d e3       	ldi	r21, 0x3D	; 61
     268:	c5 01       	movw	r24, r10
     26a:	b4 01       	movw	r22, r8
     26c:	ae d5       	rcall	.+2908   	; 0xdca <__mulsf3>
     26e:	9b 01       	movw	r18, r22
     270:	ac 01       	movw	r20, r24
     272:	c7 01       	movw	r24, r14
     274:	b6 01       	movw	r22, r12
     276:	f2 d3       	rcall	.+2020   	; 0xa5c <__addsf3>
     278:	f8 01       	movw	r30, r16
     27a:	60 83       	st	Z, r22
     27c:	71 83       	std	Z+1, r23	; 0x01
     27e:	82 83       	std	Z+2, r24	; 0x02
     280:	93 83       	std	Z+3, r25	; 0x03
}
     282:	0f 90       	pop	r0
     284:	0f 90       	pop	r0
     286:	0f 90       	pop	r0
     288:	0f 90       	pop	r0
     28a:	df 91       	pop	r29
     28c:	cf 91       	pop	r28
     28e:	1f 91       	pop	r17
     290:	0f 91       	pop	r16
     292:	ff 90       	pop	r15
     294:	ef 90       	pop	r14
     296:	df 90       	pop	r13
     298:	cf 90       	pop	r12
     29a:	bf 90       	pop	r11
     29c:	af 90       	pop	r10
     29e:	9f 90       	pop	r9
     2a0:	8f 90       	pop	r8
     2a2:	08 95       	ret

000002a4 <main>:

int main(void)	
{
	cli();
     2a4:	f8 94       	cli
	pid_init(&Current, 0.1, 0.05, 0, 0);
     2a6:	81 2c       	mov	r8, r1
     2a8:	91 2c       	mov	r9, r1
     2aa:	54 01       	movw	r10, r8
     2ac:	75 01       	movw	r14, r10
     2ae:	64 01       	movw	r12, r8
     2b0:	0d ec       	ldi	r16, 0xCD	; 205
     2b2:	1c ec       	ldi	r17, 0xCC	; 204
     2b4:	2c e4       	ldi	r18, 0x4C	; 76
     2b6:	3d e3       	ldi	r19, 0x3D	; 61
     2b8:	4d ec       	ldi	r20, 0xCD	; 205
     2ba:	5c ec       	ldi	r21, 0xCC	; 204
     2bc:	6c ec       	ldi	r22, 0xCC	; 204
     2be:	7d e3       	ldi	r23, 0x3D	; 61
     2c0:	8e ec       	ldi	r24, 0xCE	; 206
	usbdbg_init();
     2c2:	92 e0       	ldi	r25, 0x02	; 2
	pwm_init();
     2c4:	9e d0       	rcall	.+316    	; 0x402 <pid_init>
	pwm_set_top_t3(0x319);
     2c6:	b7 d3       	rcall	.+1902   	; 0xa36 <usbdbg_init>
     2c8:	11 d3       	rcall	.+1570   	; 0x8ec <pwm_init>
     2ca:	89 e1       	ldi	r24, 0x19	; 25
	can_init(0,0);
     2cc:	93 e0       	ldi	r25, 0x03	; 3
     2ce:	59 d3       	rcall	.+1714   	; 0x982 <pwm_set_top_t3>
	timer_init_ts();
     2d0:	60 e0       	ldi	r22, 0x00	; 0
     2d2:	70 e0       	ldi	r23, 0x00	; 0
	//adc_init();
	adc_Free_running_init();
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	90 e0       	ldi	r25, 0x00	; 0
	rgbled_init();
     2d8:	f3 d1       	rcall	.+998    	; 0x6c0 <can_init>
     2da:	fb de       	rcall	.-522    	; 0xd2 <timer_init_ts>
	txFrame.id = MOTOR_CAN_ID;
     2dc:	be d0       	rcall	.+380    	; 0x45a <adc_Free_running_init>
     2de:	5a d3       	rcall	.+1716   	; 0x994 <rgbled_init>
     2e0:	e6 ee       	ldi	r30, 0xE6	; 230
     2e2:	f2 e0       	ldi	r31, 0x02	; 2
	txFrame.length = 8;
     2e4:	80 e5       	ldi	r24, 0x50	; 80
     2e6:	94 e0       	ldi	r25, 0x04	; 4
	sei();
     2e8:	91 83       	std	Z+1, r25	; 0x01
	
	// Output pin to turn off DCDC
	DDRB |= (1 << PB3);
     2ea:	80 83       	st	Z, r24
	toggle_DCDC(OFF);
     2ec:	88 e0       	ldi	r24, 0x08	; 8
     2ee:	82 83       	std	Z+2, r24	; 0x02
     2f0:	78 94       	sei
	
	rgbled_turn_on(LED_BLUE);
     2f2:	23 9a       	sbi	0x04, 3	; 4
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	05 df       	rcall	.-502    	; 0x102 <toggle_DCDC>
		{
			pot_voltage = 0.05;
		}
		
		//set_pwm(pot_voltage);
		OCR3A = (int)(pot_voltage*ICR3) ; //PWM_PE3 (non inverted)
     2f8:	80 e8       	ldi	r24, 0x80	; 128
     2fa:	52 d3       	rcall	.+1700   	; 0x9a0 <rgbled_turn_on>
     2fc:	0f 2e       	mov	r0, r31
     2fe:	f6 e9       	ldi	r31, 0x96	; 150
     300:	af 2e       	mov	r10, r31
     302:	b1 2c       	mov	r11, r1
		OCR3B = OCR3A ; //PWM_PE4 (inverted)
     304:	f0 2d       	mov	r31, r0
	toggle_DCDC(OFF);
	
	rgbled_turn_on(LED_BLUE);
	
    while (1){
		adc_Free_running_read(CH_ADC2, &u16_ADC2_reg, CH_ADC3, &u16_ADC2_reg) ;
     306:	c8 e9       	ldi	r28, 0x98	; 152
     308:	d0 e0       	ldi	r29, 0x00	; 0
     30a:	0a e9       	ldi	r16, 0x9A	; 154
     30c:	10 e0       	ldi	r17, 0x00	; 0
     30e:	26 e1       	ldi	r18, 0x16	; 22
		handle_motor_status_can_msg(&send_can, &ComValues);
     310:	31 e0       	ldi	r19, 0x01	; 1
     312:	43 e0       	ldi	r20, 0x03	; 3
     314:	b9 01       	movw	r22, r18
     316:	82 e0       	ldi	r24, 0x02	; 2
     318:	b9 d0       	rcall	.+370    	; 0x48c <adc_Free_running_read>
		handle_can(&ComValues, &rxFrame);
     31a:	66 e0       	ldi	r22, 0x06	; 6
     31c:	71 e0       	ldi	r23, 0x01	; 1
     31e:	88 e1       	ldi	r24, 0x18	; 24
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	2d df       	rcall	.-422    	; 0x17e <handle_motor_status_can_msg>
     324:	63 ec       	ldi	r22, 0xC3	; 195
		handle_current_sensor(&f32_prev_current);
     326:	72 e0       	ldi	r23, 0x02	; 2
     328:	86 e0       	ldi	r24, 0x06	; 6
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	f0 de       	rcall	.-544    	; 0x10e <handle_can>
		
		//simple mode with pwm controlled by potentiometer /
		
		pot_voltage = (float)u16_ADC3_reg/1024 ;
     32e:	89 e1       	ldi	r24, 0x19	; 25
     330:	91 e0       	ldi	r25, 0x01	; 1
     332:	51 df       	rcall	.-350    	; 0x1d6 <handle_current_sensor>
     334:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <pot_voltage>
     338:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <pot_voltage+0x1>
		
		//bounding of duty cycle for well function of bootstrap capacitors
		if (pot_voltage > 0.95)
     33c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <pot_voltage+0x2>
     340:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <pot_voltage+0x3>
     344:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <pot_voltage>
     348:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <pot_voltage+0x1>
     34c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pot_voltage+0x2>
     350:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <pot_voltage+0x3>
     354:	23 e3       	ldi	r18, 0x33	; 51
     356:	33 e3       	ldi	r19, 0x33	; 51
     358:	43 e7       	ldi	r20, 0x73	; 115
     35a:	5f e3       	ldi	r21, 0x3F	; 63
		{
			pot_voltage = 0.95;
     35c:	32 d5       	rcall	.+2660   	; 0xdc2 <__gesf2>
     35e:	18 16       	cp	r1, r24
     360:	64 f4       	brge	.+24     	; 0x37a <main+0xd6>
     362:	83 e3       	ldi	r24, 0x33	; 51
     364:	93 e3       	ldi	r25, 0x33	; 51
     366:	a3 e7       	ldi	r26, 0x73	; 115
     368:	bf e3       	ldi	r27, 0x3F	; 63
     36a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <pot_voltage>
     36e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <pot_voltage+0x1>
		}
		
		if (pot_voltage < 0.05)
     372:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <pot_voltage+0x2>
     376:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <pot_voltage+0x3>
     37a:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <pot_voltage>
     37e:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <pot_voltage+0x1>
     382:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pot_voltage+0x2>
     386:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <pot_voltage+0x3>
     38a:	2d ec       	ldi	r18, 0xCD	; 205
     38c:	3c ec       	ldi	r19, 0xCC	; 204
     38e:	4c e4       	ldi	r20, 0x4C	; 76
     390:	5d e3       	ldi	r21, 0x3D	; 61
		{
			pot_voltage = 0.05;
     392:	c8 d3       	rcall	.+1936   	; 0xb24 <__cmpsf2>
     394:	88 23       	and	r24, r24
     396:	64 f4       	brge	.+24     	; 0x3b0 <main+0x10c>
     398:	8d ec       	ldi	r24, 0xCD	; 205
     39a:	9c ec       	ldi	r25, 0xCC	; 204
     39c:	ac e4       	ldi	r26, 0x4C	; 76
     39e:	bd e3       	ldi	r27, 0x3D	; 61
     3a0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <pot_voltage>
     3a4:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <pot_voltage+0x1>
		}
		
		//set_pwm(pot_voltage);
		OCR3A = (int)(pot_voltage*ICR3) ; //PWM_PE3 (non inverted)
     3a8:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <pot_voltage+0x2>
     3ac:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <pot_voltage+0x3>
     3b0:	f5 01       	movw	r30, r10
     3b2:	60 81       	ld	r22, Z
     3b4:	71 81       	ldd	r23, Z+1	; 0x01
     3b6:	c0 90 12 01 	lds	r12, 0x0112	; 0x800112 <pot_voltage>
     3ba:	d0 90 13 01 	lds	r13, 0x0113	; 0x800113 <pot_voltage+0x1>
     3be:	e0 90 14 01 	lds	r14, 0x0114	; 0x800114 <pot_voltage+0x2>
     3c2:	f0 90 15 01 	lds	r15, 0x0115	; 0x800115 <pot_voltage+0x3>
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	49 d4       	rcall	.+2194   	; 0xc5e <__floatunsisf>
     3cc:	a7 01       	movw	r20, r14
     3ce:	96 01       	movw	r18, r12
		OCR3B = OCR3A ; //PWM_PE4 (inverted)
     3d0:	fc d4       	rcall	.+2552   	; 0xdca <__mulsf3>
     3d2:	14 d4       	rcall	.+2088   	; 0xbfc <__fixsfsi>
     3d4:	79 83       	std	Y+1, r23	; 0x01
     3d6:	68 83       	st	Y, r22
     3d8:	88 81       	ld	r24, Y
	}
     3da:	99 81       	ldd	r25, Y+1	; 0x01
     3dc:	f8 01       	movw	r30, r16
     3de:	91 83       	std	Z+1, r25	; 0x01
     3e0:	80 83       	st	Z, r24
     3e2:	95 cf       	rjmp	.-214    	; 0x30e <main+0x6a>

000003e4 <__vector_12>:
}

ISR(TIMER1_COMPA_vect){
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	8f 93       	push	r24
	send_can = 1;
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <send_can>
	read_current = 1;
     3f6:	8f 91       	pop	r24
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <pid_init>:
	output = propGain + intGain + derGain;
	//printf("Out: %d \n", output);
	return output;
}

void pid_init(Pid_t *PID, float t, float p, float i, float d){
     402:	8f 92       	push	r8
     404:	9f 92       	push	r9
     406:	af 92       	push	r10
     408:	bf 92       	push	r11
     40a:	cf 92       	push	r12
     40c:	df 92       	push	r13
     40e:	ef 92       	push	r14
     410:	ff 92       	push	r15
     412:	0f 93       	push	r16
     414:	1f 93       	push	r17
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
     41a:	cd b7       	in	r28, 0x3d	; 61
     41c:	de b7       	in	r29, 0x3e	; 62
     41e:	fc 01       	movw	r30, r24
	PID->Kp = p;
     420:	04 87       	std	Z+12, r16	; 0x0c
     422:	15 87       	std	Z+13, r17	; 0x0d
     424:	26 87       	std	Z+14, r18	; 0x0e
     426:	37 87       	std	Z+15, r19	; 0x0f
	PID->Ki = i;
     428:	c4 8a       	std	Z+20, r12	; 0x14
     42a:	d5 8a       	std	Z+21, r13	; 0x15
     42c:	e6 8a       	std	Z+22, r14	; 0x16
     42e:	f7 8a       	std	Z+23, r15	; 0x17
	PID->Kd = d;
     430:	80 8a       	std	Z+16, r8	; 0x10
     432:	91 8a       	std	Z+17, r9	; 0x11
     434:	a2 8a       	std	Z+18, r10	; 0x12
     436:	b3 8a       	std	Z+19, r11	; 0x13
	PID->timeStep = t;
     438:	40 87       	std	Z+8, r20	; 0x08
     43a:	51 87       	std	Z+9, r21	; 0x09
     43c:	62 87       	std	Z+10, r22	; 0x0a
     43e:	73 87       	std	Z+11, r23	; 0x0b
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	1f 91       	pop	r17
     446:	0f 91       	pop	r16
     448:	ff 90       	pop	r15
     44a:	ef 90       	pop	r14
     44c:	df 90       	pop	r13
     44e:	cf 90       	pop	r12
     450:	bf 90       	pop	r11
     452:	af 90       	pop	r10
     454:	9f 90       	pop	r9
     456:	8f 90       	pop	r8
     458:	08 95       	ret

0000045a <adc_Free_running_init>:
	
	/* Wait for the conversion to complete */
	while(ADCSRA & (1<<ADSC));
	
	return ADC;
}
     45a:	ec e7       	ldi	r30, 0x7C	; 124
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	80 81       	ld	r24, Z
     460:	80 64       	ori	r24, 0x40	; 64
     462:	80 83       	st	Z, r24
     464:	ea e7       	ldi	r30, 0x7A	; 122
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	80 81       	ld	r24, Z
     46a:	84 60       	ori	r24, 0x04	; 4
     46c:	80 83       	st	Z, r24
     46e:	80 81       	ld	r24, Z
     470:	80 62       	ori	r24, 0x20	; 32
     472:	80 83       	st	Z, r24
     474:	ab e7       	ldi	r26, 0x7B	; 123
     476:	b0 e0       	ldi	r27, 0x00	; 0
     478:	8c 91       	ld	r24, X
     47a:	88 7f       	andi	r24, 0xF8	; 248
     47c:	8c 93       	st	X, r24
     47e:	80 81       	ld	r24, Z
     480:	80 68       	ori	r24, 0x80	; 128
     482:	80 83       	st	Z, r24
     484:	80 81       	ld	r24, Z
     486:	80 64       	ori	r24, 0x40	; 64
     488:	80 83       	st	Z, r24
     48a:	08 95       	ret

0000048c <adc_Free_running_read>:

void adc_Free_running_read(adc_channel_t channel_A, uint16_t *reg_ADC_A, adc_channel_t channel_B, uint16_t *reg_ADC_B){ //to test - check precision & working
	
	//Setting channel and type of reading, see enum in adc.h
	ADMUX &= 0b11100000;
     48c:	ec e7       	ldi	r30, 0x7C	; 124
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	90 81       	ld	r25, Z
     492:	90 7e       	andi	r25, 0xE0	; 224
     494:	90 83       	st	Z, r25
	ADMUX |= (int8_t)channel_A;
     496:	90 81       	ld	r25, Z
     498:	89 2b       	or	r24, r25
     49a:	80 83       	st	Z, r24
	
	/* Wait for the conversion to complete */
	while(ADCSRA & (1<<ADSC));
     49c:	ea e7       	ldi	r30, 0x7A	; 122
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	80 81       	ld	r24, Z
     4a2:	86 fd       	sbrc	r24, 6
     4a4:	fd cf       	rjmp	.-6      	; 0x4a0 <adc_Free_running_read+0x14>
	
	*reg_ADC_A = ADC;
     4a6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     4aa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     4ae:	fb 01       	movw	r30, r22
     4b0:	91 83       	std	Z+1, r25	; 0x01
     4b2:	80 83       	st	Z, r24
	
	//Setting channel and type of reading, see enum in adc.h
	ADMUX &= 0b11100000;
     4b4:	ec e7       	ldi	r30, 0x7C	; 124
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	80 81       	ld	r24, Z
     4ba:	80 7e       	andi	r24, 0xE0	; 224
     4bc:	80 83       	st	Z, r24
	ADMUX |= (int8_t)channel_B;
     4be:	80 81       	ld	r24, Z
     4c0:	48 2b       	or	r20, r24
     4c2:	40 83       	st	Z, r20
	
	/* Wait for the conversion to complete */
	while(ADCSRA & (1<<ADSC));
     4c4:	ea e7       	ldi	r30, 0x7A	; 122
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	80 81       	ld	r24, Z
     4ca:	86 fd       	sbrc	r24, 6
     4cc:	fd cf       	rjmp	.-6      	; 0x4c8 <adc_Free_running_read+0x3c>
	
	*reg_ADC_B = ADC;
     4ce:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     4d2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     4d6:	f9 01       	movw	r30, r18
     4d8:	91 83       	std	Z+1, r25	; 0x01
     4da:	80 83       	st	Z, r24
     4dc:	08 95       	ret

000004de <__vector_18>:

/**************************************************************************************************
*   CAN ISR - See 'can.h' Header file for Description
**************************************************************************************************/
ISR(CANIT_vect)
{
     4de:	1f 92       	push	r1
     4e0:	0f 92       	push	r0
     4e2:	0f b6       	in	r0, 0x3f	; 63
     4e4:	0f 92       	push	r0
     4e6:	11 24       	eor	r1, r1
     4e8:	0b b6       	in	r0, 0x3b	; 59
     4ea:	0f 92       	push	r0
     4ec:	2f 93       	push	r18
     4ee:	3f 93       	push	r19
     4f0:	4f 93       	push	r20
     4f2:	5f 93       	push	r21
     4f4:	6f 93       	push	r22
     4f6:	8f 93       	push	r24
     4f8:	9f 93       	push	r25
     4fa:	af 93       	push	r26
     4fc:	bf 93       	push	r27
     4fe:	ef 93       	push	r30
     500:	ff 93       	push	r31
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	1f 92       	push	r1
     508:	cd b7       	in	r28, 0x3d	; 61
     50a:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t mob_status;

	uint8_t mob_interrupts = CANSIT2;
     50c:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>

	// TX
	if ((mob_interrupts & (1 << SIT0)) && (CANIE2 & (1 << ENMOB0))) {
     510:	80 ff       	sbrs	r24, 0
     512:	47 c0       	rjmp	.+142    	; 0x5a2 <__vector_18+0xc4>
     514:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     518:	90 ff       	sbrs	r25, 0
     51a:	43 c0       	rjmp	.+134    	; 0x5a2 <__vector_18+0xc4>
		CANPAGE = (0x0 << MOBNB0); //Select TX Mob (Mob0)
     51c:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		mob_status = CANSTMOB;
     520:	ee ee       	ldi	r30, 0xEE	; 238
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	80 81       	ld	r24, Z
     526:	89 83       	std	Y+1, r24	; 0x01
		CANSTMOB &= ~(1 << TXOK); //clear MB1, TX interrupt
     528:	80 81       	ld	r24, Z
     52a:	8f 7b       	andi	r24, 0xBF	; 191
     52c:	80 83       	st	Z, r24

		if (tx_on != tx_off) {
     52e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <tx_off>
     532:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <tx_on>
     536:	98 17       	cp	r25, r24
     538:	89 f1       	breq	.+98     	; 0x59c <__vector_18+0xbe>
			unsigned char pos;
			pos = tx_off & (TX_SIZE-1);
			//set ID
			CANIDT4 = tx_frames[pos].array[0];
     53a:	8f 70       	andi	r24, 0x0F	; 15
     53c:	2b e0       	ldi	r18, 0x0B	; 11
     53e:	82 9f       	mul	r24, r18
     540:	c0 01       	movw	r24, r0
     542:	11 24       	eor	r1, r1
     544:	fc 01       	movw	r30, r24
     546:	ed 52       	subi	r30, 0x2D	; 45
     548:	fe 4f       	sbci	r31, 0xFE	; 254
     54a:	20 81       	ld	r18, Z
     54c:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			CANIDT2 = tx_frames[pos].array[0];
     550:	20 81       	ld	r18, Z
     552:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			CANIDT1 = tx_frames[pos].array[1];
     556:	21 81       	ldd	r18, Z+1	; 0x01
     558:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

			//program data registers - auto increment CANMSG
			CANMSG = tx_frames[pos].data[0];
     55c:	23 81       	ldd	r18, Z+3	; 0x03
     55e:	aa ef       	ldi	r26, 0xFA	; 250
     560:	b0 e0       	ldi	r27, 0x00	; 0
     562:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[1];
     564:	24 81       	ldd	r18, Z+4	; 0x04
     566:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[2];
     568:	25 81       	ldd	r18, Z+5	; 0x05
     56a:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[3];
     56c:	26 81       	ldd	r18, Z+6	; 0x06
     56e:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[4];
     570:	27 81       	ldd	r18, Z+7	; 0x07
     572:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[5];
     574:	20 85       	ldd	r18, Z+8	; 0x08
     576:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[6];
     578:	21 85       	ldd	r18, Z+9	; 0x09
     57a:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[7];
     57c:	22 85       	ldd	r18, Z+10	; 0x0a
     57e:	2c 93       	st	X, r18

			//set length and request send
			CANCDMOB = (1 << CONMOB0) | tx_frames[pos].length;
     580:	fc 01       	movw	r30, r24
     582:	eb 52       	subi	r30, 0x2B	; 43
     584:	fe 4f       	sbci	r31, 0xFE	; 254
     586:	80 81       	ld	r24, Z
     588:	8f 70       	andi	r24, 0x0F	; 15
     58a:	80 64       	ori	r24, 0x40	; 64
     58c:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
			tx_off++;
     590:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <tx_off>
     594:	8f 5f       	subi	r24, 0xFF	; 255
     596:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <tx_off>
     59a:	7d c0       	rjmp	.+250    	; 0x696 <__vector_18+0x1b8>
		} else {
			tx_busy = 0;
     59c:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <tx_busy>
     5a0:	7a c0       	rjmp	.+244    	; 0x696 <__vector_18+0x1b8>
		}
	}
	// RX
	else if ((mob_interrupts & (1 << SIT1)) && (CANIE2 & (1 << ENMOB1))) {
     5a2:	81 ff       	sbrs	r24, 1
     5a4:	78 c0       	rjmp	.+240    	; 0x696 <__vector_18+0x1b8>
     5a6:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     5aa:	81 ff       	sbrs	r24, 1
     5ac:	74 c0       	rjmp	.+232    	; 0x696 <__vector_18+0x1b8>
		//Select RX Mob (Mob1)
		CANPAGE = (0x1 << MOBNB0);
     5ae:	80 e1       	ldi	r24, 0x10	; 16
     5b0:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		if (((rx_on - rx_off) & RX_ABS_MASK) < RX_SIZE) {
     5b4:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <rx_on>
     5b8:	28 2f       	mov	r18, r24
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <rx_off>
     5c0:	29 1b       	sub	r18, r25
     5c2:	31 09       	sbc	r19, r1
     5c4:	2f 77       	andi	r18, 0x7F	; 127
     5c6:	33 27       	eor	r19, r19
     5c8:	20 31       	cpi	r18, 0x10	; 16
     5ca:	31 05       	cpc	r19, r1
     5cc:	0c f0       	brlt	.+2      	; 0x5d0 <__vector_18+0xf2>
     5ce:	58 c0       	rjmp	.+176    	; 0x680 <__vector_18+0x1a2>
			unsigned char pos;
			pos = rx_on & (RX_SIZE-1);
			//Read length
			rx_frames[pos].length = CANCDMOB & 0x0F;
     5d0:	e8 2f       	mov	r30, r24
     5d2:	ef 70       	andi	r30, 0x0F	; 15
     5d4:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     5d8:	2e 2f       	mov	r18, r30
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	4b e0       	ldi	r20, 0x0B	; 11
     5de:	e4 9f       	mul	r30, r20
     5e0:	f0 01       	movw	r30, r0
     5e2:	11 24       	eor	r1, r1
     5e4:	ed 5d       	subi	r30, 0xDD	; 221
     5e6:	fe 4f       	sbci	r31, 0xFE	; 254
     5e8:	9f 70       	andi	r25, 0x0F	; 15
     5ea:	42 81       	ldd	r20, Z+2	; 0x02
     5ec:	40 7f       	andi	r20, 0xF0	; 240
     5ee:	94 2b       	or	r25, r20
     5f0:	92 83       	std	Z+2, r25	; 0x02
			//Read ID
			rx_frames[pos].array[0] = (CANIDT2 & 0xE0) | (CANIDT4 & 0x07);
     5f2:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     5f6:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     5fa:	40 7e       	andi	r20, 0xE0	; 224
     5fc:	97 70       	andi	r25, 0x07	; 7
     5fe:	94 2b       	or	r25, r20
     600:	90 83       	st	Z, r25
			rx_frames[pos].array[1] = CANIDT1;
     602:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     606:	91 83       	std	Z+1, r25	; 0x01

			//read data registers - auto increment CANMSG
			rx_frames[pos].data[0] = CANMSG;
     608:	aa ef       	ldi	r26, 0xFA	; 250
     60a:	b0 e0       	ldi	r27, 0x00	; 0
     60c:	9c 91       	ld	r25, X
     60e:	93 83       	std	Z+3, r25	; 0x03
			rx_frames[pos].data[1] = CANMSG;
     610:	9c 91       	ld	r25, X
     612:	94 83       	std	Z+4, r25	; 0x04
			rx_frames[pos].data[2] = CANMSG;
     614:	9c 91       	ld	r25, X
     616:	95 83       	std	Z+5, r25	; 0x05
			rx_frames[pos].data[3] = CANMSG;
     618:	9c 91       	ld	r25, X
     61a:	96 83       	std	Z+6, r25	; 0x06
			rx_frames[pos].data[4] = CANMSG;
     61c:	9c 91       	ld	r25, X
     61e:	97 83       	std	Z+7, r25	; 0x07
			rx_frames[pos].data[5] = CANMSG;
     620:	9c 91       	ld	r25, X
     622:	90 87       	std	Z+8, r25	; 0x08
			rx_frames[pos].data[6] = CANMSG;
     624:	9c 91       	ld	r25, X
     626:	91 87       	std	Z+9, r25	; 0x09
			rx_frames[pos].data[7] = CANMSG;
     628:	9c 91       	ld	r25, X
     62a:	92 87       	std	Z+10, r25	; 0x0a
			rx_on++;
     62c:	8f 5f       	subi	r24, 0xFF	; 255
     62e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <rx_on>

			// Reset if reset can message
			if(rx_frames[pos].id == 0x000 && rx_frames[pos].data[0] == 0x03){
     632:	40 81       	ld	r20, Z
     634:	42 95       	swap	r20
     636:	46 95       	lsr	r20
     638:	47 70       	andi	r20, 0x07	; 7
     63a:	51 81       	ldd	r21, Z+1	; 0x01
     63c:	65 2f       	mov	r22, r21
     63e:	66 0f       	add	r22, r22
     640:	66 0f       	add	r22, r22
     642:	66 0f       	add	r22, r22
     644:	86 2f       	mov	r24, r22
     646:	84 2b       	or	r24, r20
     648:	95 2f       	mov	r25, r21
     64a:	92 95       	swap	r25
     64c:	96 95       	lsr	r25
     64e:	97 70       	andi	r25, 0x07	; 7
     650:	89 2b       	or	r24, r25
     652:	b1 f4       	brne	.+44     	; 0x680 <__vector_18+0x1a2>
     654:	8b e0       	ldi	r24, 0x0B	; 11
     656:	82 9f       	mul	r24, r18
     658:	f0 01       	movw	r30, r0
     65a:	83 9f       	mul	r24, r19
     65c:	f0 0d       	add	r31, r0
     65e:	11 24       	eor	r1, r1
     660:	ed 5d       	subi	r30, 0xDD	; 221
     662:	fe 4f       	sbci	r31, 0xFE	; 254
     664:	83 81       	ldd	r24, Z+3	; 0x03
     666:	83 30       	cpi	r24, 0x03	; 3
     668:	59 f4       	brne	.+22     	; 0x680 <__vector_18+0x1a2>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     66a:	98 e0       	ldi	r25, 0x08	; 8
     66c:	88 e1       	ldi	r24, 0x18	; 24
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	f8 94       	cli
     672:	a8 95       	wdr
     674:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     678:	0f be       	out	0x3f, r0	; 63
     67a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     67e:	ff cf       	rjmp	.-2      	; 0x67e <__vector_18+0x1a0>
				while(1); //wait for watchdog
			}
		}

		// Clear irq
		mob_status = CANSTMOB;
     680:	ee ee       	ldi	r30, 0xEE	; 238
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	80 81       	ld	r24, Z
     686:	89 83       	std	Y+1, r24	; 0x01
		(void)mob_status;
     688:	89 81       	ldd	r24, Y+1	; 0x01

		CANSTMOB &= ~(1 << RXOK);
     68a:	80 81       	ld	r24, Z
     68c:	8f 7d       	andi	r24, 0xDF	; 223
     68e:	80 83       	st	Z, r24
		CANCDMOB = (1 << CONMOB1);			//Set Mob 1 as RX
     690:	80 e8       	ldi	r24, 0x80	; 128
     692:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	}
}
     696:	0f 90       	pop	r0
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	ff 91       	pop	r31
     69e:	ef 91       	pop	r30
     6a0:	bf 91       	pop	r27
     6a2:	af 91       	pop	r26
     6a4:	9f 91       	pop	r25
     6a6:	8f 91       	pop	r24
     6a8:	6f 91       	pop	r22
     6aa:	5f 91       	pop	r21
     6ac:	4f 91       	pop	r20
     6ae:	3f 91       	pop	r19
     6b0:	2f 91       	pop	r18
     6b2:	0f 90       	pop	r0
     6b4:	0b be       	out	0x3b, r0	; 59
     6b6:	0f 90       	pop	r0
     6b8:	0f be       	out	0x3f, r0	; 63
     6ba:	0f 90       	pop	r0
     6bc:	1f 90       	pop	r1
     6be:	18 95       	reti

000006c0 <can_init>:


void can_init(uint16_t accept_mask_id, uint16_t accept_tag_id) {
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
	// Reset CAN controller
	CANGCON = (1 << SWRES);
     6c4:	e8 ed       	ldi	r30, 0xD8	; 216
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	21 e0       	ldi	r18, 0x01	; 1
     6ca:	20 83       	st	Z, r18

	CANBT1 = (BRP_VALUE - 1) << 1;
     6cc:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = ((SJW_VALUE - 1) << 5) | ((PROP_SEG - 1) << 1);
     6d0:	2c e0       	ldi	r18, 0x0C	; 12
     6d2:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = ((PHASE_SEG_2 - 1) << 4) | ((PHASE_SEG_1 - 1) << 1) | 1;
     6d6:	27 e3       	ldi	r18, 0x37	; 55
     6d8:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	CANTIM = 0;
     6dc:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
     6e0:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	CANTTC = 0;
     6e4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     6e8:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	CANHPMOB = 0;
     6ec:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	CANTCON = 0;
     6f0:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	// Switch to Mob 0 access
	CANPAGE = (0x0 << MOBNB0);
     6f4:	cd ee       	ldi	r28, 0xED	; 237
     6f6:	d0 e0       	ldi	r29, 0x00	; 0
     6f8:	18 82       	st	Y, r1
	CANSTMOB = 0;
     6fa:	ae ee       	ldi	r26, 0xEE	; 238
     6fc:	b0 e0       	ldi	r27, 0x00	; 0
     6fe:	1c 92       	st	X, r1

	// Switch to Mob 1 access
	CANPAGE = (0x1 << MOBNB0);
     700:	20 e1       	ldi	r18, 0x10	; 16
     702:	28 83       	st	Y, r18
	CANSTMOB = 0;
     704:	1c 92       	st	X, r1
	CANIDM4 = 0;
     706:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANIDM2 = (accept_mask_id << 5) & 0xFF;
     70a:	28 2f       	mov	r18, r24
     70c:	22 95       	swap	r18
     70e:	22 0f       	add	r18, r18
     710:	20 7e       	andi	r18, 0xE0	; 224
     712:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = (accept_mask_id >> 3) & 0xFF;
     716:	96 95       	lsr	r25
     718:	87 95       	ror	r24
     71a:	96 95       	lsr	r25
     71c:	87 95       	ror	r24
     71e:	96 95       	lsr	r25
     720:	87 95       	ror	r24
     722:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDT4 = 0;
     726:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT2 = (accept_tag_id << 5) & 0xFF;
     72a:	86 2f       	mov	r24, r22
     72c:	82 95       	swap	r24
     72e:	88 0f       	add	r24, r24
     730:	80 7e       	andi	r24, 0xE0	; 224
     732:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (accept_tag_id >> 3) & 0xFF;
     736:	76 95       	lsr	r23
     738:	67 95       	ror	r22
     73a:	76 95       	lsr	r23
     73c:	67 95       	ror	r22
     73e:	76 95       	lsr	r23
     740:	67 95       	ror	r22
     742:	60 93 f3 00 	sts	0x00F3, r22	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

	// Set Mob 1 as RX
	CANCDMOB = (1 << CONMOB1);
     746:	80 e8       	ldi	r24, 0x80	; 128
     748:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	// Enable Mob 0 and 1
	CANEN2 = (1 << ENMOB1) | (1 << ENMOB0);
     74c:	83 e0       	ldi	r24, 0x03	; 3
     74e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	// Enable Mob 0 and 1 Interrupt
	CANIE2 = (1 << ENMOB1) | (1 << ENMOB0);
     752:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	// Enable TX and RX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);	
     756:	80 eb       	ldi	r24, 0xB0	; 176
     758:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>

	// Enable CAN controller
	CANGCON = (1 << ENASTB);
     75c:	82 e0       	ldi	r24, 0x02	; 2
     75e:	80 83       	st	Z, r24

	reset = 0;
     760:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <reset>
}
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	08 95       	ret

0000076a <can_read_message_if_new>:

bool can_read_message_if_new(CanMessage_t* message) {
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	ec 01       	movw	r28, r24
	// Check if there is a new message
	if (rx_on == rx_off) {
     770:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <rx_off>
     774:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <rx_on>
     778:	24 17       	cp	r18, r20
     77a:	89 f1       	breq	.+98     	; 0x7de <can_read_message_if_new+0x74>
     77c:	a4 2f       	mov	r26, r20
     77e:	af 70       	andi	r26, 0x0F	; 15
	}

	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
     780:	8b e0       	ldi	r24, 0x0B	; 11
     782:	a8 9f       	mul	r26, r24
     784:	b0 01       	movw	r22, r0
     786:	11 24       	eor	r1, r1
     788:	fb 01       	movw	r30, r22
     78a:	ed 5d       	subi	r30, 0xDD	; 221
     78c:	fe 4f       	sbci	r31, 0xFE	; 254
     78e:	20 81       	ld	r18, Z
     790:	22 95       	swap	r18
     792:	26 95       	lsr	r18
     794:	27 70       	andi	r18, 0x07	; 7
     796:	31 81       	ldd	r19, Z+1	; 0x01
     798:	53 2f       	mov	r21, r19
     79a:	55 0f       	add	r21, r21
     79c:	55 0f       	add	r21, r21
     79e:	55 0f       	add	r21, r21
     7a0:	25 2b       	or	r18, r21
     7a2:	32 95       	swap	r19
     7a4:	36 95       	lsr	r19
     7a6:	37 70       	andi	r19, 0x07	; 7
     7a8:	28 83       	st	Y, r18
     7aa:	39 83       	std	Y+1, r19	; 0x01
	message->length = frame->length;
     7ac:	fb 01       	movw	r30, r22
     7ae:	eb 5d       	subi	r30, 0xDB	; 219
     7b0:	fe 4f       	sbci	r31, 0xFE	; 254
     7b2:	20 81       	ld	r18, Z
     7b4:	2f 70       	andi	r18, 0x0F	; 15
     7b6:	2a 83       	std	Y+2, r18	; 0x02
	for (int i = 0; i < message->length; i++) {
     7b8:	22 23       	and	r18, r18
     7ba:	99 f0       	breq	.+38     	; 0x7e2 <can_read_message_if_new+0x78>
     7bc:	db 01       	movw	r26, r22
     7be:	aa 5d       	subi	r26, 0xDA	; 218
     7c0:	be 4f       	sbci	r27, 0xFE	; 254
     7c2:	fe 01       	movw	r30, r28
     7c4:	33 96       	adiw	r30, 0x03	; 3
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	2d 5f       	subi	r18, 0xFD	; 253
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	ce 01       	movw	r24, r28
     7ce:	82 0f       	add	r24, r18
     7d0:	93 1f       	adc	r25, r19
		message->data.u8[i] = frame->data[i];
     7d2:	2d 91       	ld	r18, X+
     7d4:	21 93       	st	Z+, r18
	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
	message->length = frame->length;
	for (int i = 0; i < message->length; i++) {
     7d6:	e8 17       	cp	r30, r24
     7d8:	f9 07       	cpc	r31, r25
     7da:	d9 f7       	brne	.-10     	; 0x7d2 <can_read_message_if_new+0x68>
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <can_read_message_if_new+0x78>
}

bool can_read_message_if_new(CanMessage_t* message) {
	// Check if there is a new message
	if (rx_on == rx_off) {
		return false;
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	04 c0       	rjmp	.+8      	; 0x7ea <can_read_message_if_new+0x80>
		message->data.u8[i] = frame->data[i];
	}

	// Advance to next can message
	if (rx_on != rx_off) {
		rx_off++;
     7e2:	4f 5f       	subi	r20, 0xFF	; 255
     7e4:	40 93 1f 01 	sts	0x011F, r20	; 0x80011f <rx_off>
	}

	return true;
     7e8:	81 e0       	ldi	r24, 0x01	; 1
}
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	08 95       	ret

000007f0 <can_send_message>:

bool can_send_message(CanMessage_t* message) {
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	fc 01       	movw	r30, r24
	bool result = false;

	CANGIE &= ~(1 << ENIT);
     7f6:	ab ed       	ldi	r26, 0xDB	; 219
     7f8:	b0 e0       	ldi	r27, 0x00	; 0
     7fa:	8c 91       	ld	r24, X
     7fc:	8f 77       	andi	r24, 0x7F	; 127
     7fe:	8c 93       	st	X, r24

	if (!tx_busy) {
     800:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <tx_busy>
     804:	81 11       	cpse	r24, r1
     806:	27 c0       	rjmp	.+78     	; 0x856 <can_send_message+0x66>
		// Switch to Mob 0 access
		CANPAGE = 0 << 4;
     808:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		// Set ID
		CANIDT2 = message->id << 5;
     80c:	80 81       	ld	r24, Z
     80e:	82 95       	swap	r24
     810:	88 0f       	add	r24, r24
     812:	80 7e       	andi	r24, 0xE0	; 224
     814:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT1 = message->id >> 3;
     818:	80 81       	ld	r24, Z
     81a:	91 81       	ldd	r25, Z+1	; 0x01
     81c:	96 95       	lsr	r25
     81e:	87 95       	ror	r24
     820:	96 95       	lsr	r25
     822:	87 95       	ror	r24
     824:	96 95       	lsr	r25
     826:	87 95       	ror	r24
     828:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     82c:	df 01       	movw	r26, r30
     82e:	13 96       	adiw	r26, 0x03	; 3
     830:	9f 01       	movw	r18, r30
     832:	25 5f       	subi	r18, 0xF5	; 245
     834:	3f 4f       	sbci	r19, 0xFF	; 255

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
     836:	ca ef       	ldi	r28, 0xFA	; 250
     838:	d0 e0       	ldi	r29, 0x00	; 0
     83a:	9d 91       	ld	r25, X+
     83c:	98 83       	st	Y, r25
		// Set ID
		CANIDT2 = message->id << 5;
		CANIDT1 = message->id >> 3;

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
     83e:	a2 17       	cp	r26, r18
     840:	b3 07       	cpc	r27, r19
     842:	d9 f7       	brne	.-10     	; 0x83a <can_send_message+0x4a>
			CANMSG = message->data.u8[i];
		}
		
		result = true;
		tx_busy = 1;
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <tx_busy>

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
     84a:	82 81       	ldd	r24, Z+2	; 0x02
     84c:	80 64       	ori	r24, 0x40	; 64
     84e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
		}
		
		result = true;
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	43 c0       	rjmp	.+134    	; 0x8dc <can_send_message+0xec>
		tx_busy = 1;

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
	}
	else if (TX_SIZE - ((tx_on - tx_off) & TX_ABS_MASK)) {
     856:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <tx_on>
     85a:	82 2f       	mov	r24, r18
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <tx_off>
     862:	83 1b       	sub	r24, r19
     864:	91 09       	sbc	r25, r1
     866:	8f 77       	andi	r24, 0x7F	; 127
     868:	99 27       	eor	r25, r25
     86a:	40 97       	sbiw	r24, 0x10	; 16
     86c:	b1 f1       	breq	.+108    	; 0x8da <can_send_message+0xea>
		// Copy data into TX buffer
		tx_frames[tx_on & (TX_SIZE-1)].id = message->id;
     86e:	a2 2f       	mov	r26, r18
     870:	af 70       	andi	r26, 0x0F	; 15
     872:	8b e0       	ldi	r24, 0x0B	; 11
     874:	a8 9f       	mul	r26, r24
     876:	d0 01       	movw	r26, r0
     878:	11 24       	eor	r1, r1
     87a:	ed 01       	movw	r28, r26
     87c:	cd 52       	subi	r28, 0x2D	; 45
     87e:	de 4f       	sbci	r29, 0xFE	; 254
     880:	80 81       	ld	r24, Z
     882:	98 2f       	mov	r25, r24
     884:	92 95       	swap	r25
     886:	99 0f       	add	r25, r25
     888:	90 7e       	andi	r25, 0xE0	; 224
     88a:	88 81       	ld	r24, Y
     88c:	8f 71       	andi	r24, 0x1F	; 31
     88e:	89 2b       	or	r24, r25
     890:	88 83       	st	Y, r24
     892:	80 81       	ld	r24, Z
     894:	98 2f       	mov	r25, r24
     896:	96 95       	lsr	r25
     898:	96 95       	lsr	r25
     89a:	96 95       	lsr	r25
     89c:	89 81       	ldd	r24, Y+1	; 0x01
     89e:	80 7e       	andi	r24, 0xE0	; 224
     8a0:	89 2b       	or	r24, r25
     8a2:	89 83       	std	Y+1, r24	; 0x01
     8a4:	91 81       	ldd	r25, Z+1	; 0x01
     8a6:	92 95       	swap	r25
     8a8:	99 0f       	add	r25, r25
     8aa:	90 7e       	andi	r25, 0xE0	; 224
     8ac:	8f 71       	andi	r24, 0x1F	; 31
     8ae:	89 2b       	or	r24, r25
     8b0:	89 83       	std	Y+1, r24	; 0x01
		tx_frames[tx_on & (TX_SIZE-1)].length = message->length;
     8b2:	82 81       	ldd	r24, Z+2	; 0x02
     8b4:	98 2f       	mov	r25, r24
     8b6:	9f 70       	andi	r25, 0x0F	; 15
     8b8:	8a 81       	ldd	r24, Y+2	; 0x02
     8ba:	80 7f       	andi	r24, 0xF0	; 240
     8bc:	89 2b       	or	r24, r25
     8be:	8a 83       	std	Y+2, r24	; 0x02
		memcpy(tx_frames[tx_on & (TX_SIZE-1)].data, &message->data, CAN_FRAME_DATA_MAX_LENGTH);
     8c0:	aa 52       	subi	r26, 0x2A	; 42
     8c2:	be 4f       	sbci	r27, 0xFE	; 254
     8c4:	33 96       	adiw	r30, 0x03	; 3
     8c6:	88 e0       	ldi	r24, 0x08	; 8
     8c8:	01 90       	ld	r0, Z+
     8ca:	0d 92       	st	X+, r0
     8cc:	8a 95       	dec	r24
     8ce:	e1 f7       	brne	.-8      	; 0x8c8 <can_send_message+0xd8>

		/*for (int i = 0; i < 8; i++) {
			tx_frames[tx_on & (TX_SIZE-1)].data[i] = message->data.u8[i];
		}*/

		tx_on++;
     8d0:	2f 5f       	subi	r18, 0xFF	; 255
     8d2:	20 93 21 01 	sts	0x0121, r18	; 0x800121 <tx_on>
		result = true;
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <can_send_message+0xec>

	return true;
}

bool can_send_message(CanMessage_t* message) {
	bool result = false;
     8da:	80 e0       	ldi	r24, 0x00	; 0

		tx_on++;
		result = true;
	}

	CANGIE |= (1 << ENIT);
     8dc:	eb ed       	ldi	r30, 0xDB	; 219
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	90 81       	ld	r25, Z
     8e2:	90 68       	ori	r25, 0x80	; 128
     8e4:	90 83       	st	Z, r25

	return result;
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	08 95       	ret

000008ec <pwm_init>:
			break;
		case PWM_PE4:
			OCR3B = (dutyCycle & 0xFFFF);
			break;
		case PWM_PE5:
			OCR3C = (dutyCycle & 0xFFFF);
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	8e b1       	in	r24, 0x0e	; 14
     8f2:	87 7c       	andi	r24, 0xC7	; 199
     8f4:	8e b9       	out	0x0e, r24	; 14
     8f6:	8d b1       	in	r24, 0x0d	; 13
     8f8:	88 63       	ori	r24, 0x38	; 56
     8fa:	8d b9       	out	0x0d, r24	; 13
     8fc:	2c 98       	cbi	0x05, 4	; 5
     8fe:	24 9a       	sbi	0x04, 4	; 4
     900:	a1 e9       	ldi	r26, 0x91	; 145
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	8c 91       	ld	r24, X
     906:	88 61       	ori	r24, 0x18	; 24
     908:	8c 93       	st	X, r24
     90a:	e0 e9       	ldi	r30, 0x90	; 144
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	80 81       	ld	r24, Z
     910:	82 60       	ori	r24, 0x02	; 2
     912:	80 83       	st	Z, r24
     914:	80 81       	ld	r24, Z
     916:	8e 7f       	andi	r24, 0xFE	; 254
     918:	80 83       	st	Z, r24
     91a:	c0 eb       	ldi	r28, 0xB0	; 176
     91c:	d0 e0       	ldi	r29, 0x00	; 0
     91e:	88 81       	ld	r24, Y
     920:	88 64       	ori	r24, 0x48	; 72
     922:	88 83       	st	Y, r24
     924:	80 81       	ld	r24, Z
     926:	80 68       	ori	r24, 0x80	; 128
     928:	80 83       	st	Z, r24
     92a:	80 81       	ld	r24, Z
     92c:	8f 7b       	andi	r24, 0xBF	; 191
     92e:	80 83       	st	Z, r24
     930:	80 81       	ld	r24, Z
     932:	80 62       	ori	r24, 0x20	; 32
     934:	80 83       	st	Z, r24
     936:	80 81       	ld	r24, Z
     938:	80 61       	ori	r24, 0x10	; 16
     93a:	80 83       	st	Z, r24
     93c:	88 81       	ld	r24, Y
     93e:	80 62       	ori	r24, 0x20	; 32
     940:	88 83       	st	Y, r24
     942:	88 81       	ld	r24, Y
     944:	8f 7e       	andi	r24, 0xEF	; 239
     946:	88 83       	st	Y, r24
     948:	8c 91       	ld	r24, X
     94a:	81 60       	ori	r24, 0x01	; 1
     94c:	8c 93       	st	X, r24
     94e:	8c 91       	ld	r24, X
     950:	89 7f       	andi	r24, 0xF9	; 249
     952:	8c 93       	st	X, r24
     954:	8f ef       	ldi	r24, 0xFF	; 255
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
     95c:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
     960:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     964:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     968:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     96c:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
     970:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
     974:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     978:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	08 95       	ret

00000982 <pwm_set_top_t3>:
	}
}

void pwm_set_top_t3(uint16_t top)
{
	ICR3 = (top & 0xFFFF);
     982:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
     986:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
     98a:	08 95       	ret

0000098c <rgbled_turn_off>:
	DDRB |= LED_ALL;
	rgbled_turn_off(LED_ALL);
}

void rgbled_turn_off(RgbLedColor_t color) {
	PORTB |= color;
     98c:	95 b1       	in	r25, 0x05	; 5
     98e:	89 2b       	or	r24, r25
     990:	85 b9       	out	0x05, r24	; 5
     992:	08 95       	ret

00000994 <rgbled_init>:
#include "rgbled.h"
#include <avr/io.h>


void rgbled_init() {
	DDRB |= LED_ALL;
     994:	84 b1       	in	r24, 0x04	; 4
     996:	80 6e       	ori	r24, 0xE0	; 224
     998:	84 b9       	out	0x04, r24	; 4
	rgbled_turn_off(LED_ALL);
     99a:	80 ee       	ldi	r24, 0xE0	; 224
     99c:	f7 cf       	rjmp	.-18     	; 0x98c <rgbled_turn_off>
     99e:	08 95       	ret

000009a0 <rgbled_turn_on>:
void rgbled_turn_off(RgbLedColor_t color) {
	PORTB |= color;
}

void rgbled_turn_on(RgbLedColor_t color) {
	PORTB &= ~color;
     9a0:	95 b1       	in	r25, 0x05	; 5
     9a2:	80 95       	com	r24
     9a4:	98 23       	and	r25, r24
     9a6:	95 b9       	out	0x05, r25	; 5
     9a8:	08 95       	ret

000009aa <__vector_17>:

uint16_t timer_elapsed_ms(timer_t timer) {
	return elapsed_microseconds[timer] / 1000;
}

ISR(TIMER0_OVF_vect) {
     9aa:	1f 92       	push	r1
     9ac:	0f 92       	push	r0
     9ae:	0f b6       	in	r0, 0x3f	; 63
     9b0:	0f 92       	push	r0
     9b2:	11 24       	eor	r1, r1
     9b4:	0b b6       	in	r0, 0x3b	; 59
     9b6:	0f 92       	push	r0
     9b8:	2f 93       	push	r18
     9ba:	3f 93       	push	r19
     9bc:	4f 93       	push	r20
     9be:	5f 93       	push	r21
     9c0:	6f 93       	push	r22
     9c2:	7f 93       	push	r23
     9c4:	8f 93       	push	r24
     9c6:	af 93       	push	r26
     9c8:	bf 93       	push	r27
     9ca:	ef 93       	push	r30
     9cc:	ff 93       	push	r31
     9ce:	a3 ea       	ldi	r26, 0xA3	; 163
     9d0:	b2 e0       	ldi	r27, 0x02	; 2
     9d2:	e3 e8       	ldi	r30, 0x83	; 131
     9d4:	f2 e0       	ldi	r31, 0x02	; 2
     9d6:	23 ea       	ldi	r18, 0xA3	; 163
     9d8:	32 e0       	ldi	r19, 0x02	; 2
	for (int t = 0; t < NUMBER_OF_TIMERS; t++) {
		if (timer_enabled[t]){
     9da:	8d 91       	ld	r24, X+
     9dc:	88 23       	and	r24, r24
     9de:	59 f0       	breq	.+22     	; 0x9f6 <__vector_17+0x4c>
			elapsed_microseconds[t] += (1000000ULL * 256 * 256) / F_CPU;
     9e0:	40 81       	ld	r20, Z
     9e2:	51 81       	ldd	r21, Z+1	; 0x01
     9e4:	62 81       	ldd	r22, Z+2	; 0x02
     9e6:	73 81       	ldd	r23, Z+3	; 0x03
     9e8:	50 5e       	subi	r21, 0xE0	; 224
     9ea:	6f 4f       	sbci	r22, 0xFF	; 255
     9ec:	7f 4f       	sbci	r23, 0xFF	; 255
     9ee:	40 83       	st	Z, r20
     9f0:	51 83       	std	Z+1, r21	; 0x01
     9f2:	62 83       	std	Z+2, r22	; 0x02
     9f4:	73 83       	std	Z+3, r23	; 0x03
     9f6:	34 96       	adiw	r30, 0x04	; 4
uint16_t timer_elapsed_ms(timer_t timer) {
	return elapsed_microseconds[timer] / 1000;
}

ISR(TIMER0_OVF_vect) {
	for (int t = 0; t < NUMBER_OF_TIMERS; t++) {
     9f8:	e2 17       	cp	r30, r18
     9fa:	f3 07       	cpc	r31, r19
     9fc:	71 f7       	brne	.-36     	; 0x9da <__vector_17+0x30>
		if (timer_enabled[t]){
			elapsed_microseconds[t] += (1000000ULL * 256 * 256) / F_CPU;
		}
	}
}
     9fe:	ff 91       	pop	r31
     a00:	ef 91       	pop	r30
     a02:	bf 91       	pop	r27
     a04:	af 91       	pop	r26
     a06:	8f 91       	pop	r24
     a08:	7f 91       	pop	r23
     a0a:	6f 91       	pop	r22
     a0c:	5f 91       	pop	r21
     a0e:	4f 91       	pop	r20
     a10:	3f 91       	pop	r19
     a12:	2f 91       	pop	r18
     a14:	0f 90       	pop	r0
     a16:	0b be       	out	0x3b, r0	; 59
     a18:	0f 90       	pop	r0
     a1a:	0f be       	out	0x3f, r0	; 63
     a1c:	0f 90       	pop	r0
     a1e:	1f 90       	pop	r1
     a20:	18 95       	reti

00000a22 <usbdbg_tx_char>:
	fdevopen(usbdbg_tx_char, NULL);
}

int usbdbg_tx_char(char c, FILE* stream)
{
	while (!(UCSR0A & (1 << UDRE0))) { }; // Wait until data register is empty
     a22:	e0 ec       	ldi	r30, 0xC0	; 192
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	90 81       	ld	r25, Z
     a28:	95 ff       	sbrs	r25, 5
     a2a:	fd cf       	rjmp	.-6      	; 0xa26 <usbdbg_tx_char+0x4>
	UDR0 = c;
     a2c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 1;
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	08 95       	ret

00000a36 <usbdbg_init>:
#include <stdlib.h>

void usbdbg_init()
{
	const uint32_t baud_rate = 500000;
	UBRR0 = (F_CPU / 16) / baud_rate - 1;
     a36:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     a3a:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C = (3 << UCSZ0);	// 8 bit transfer
     a3e:	86 e0       	ldi	r24, 0x06	; 6
     a40:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B |= (1 << TXEN0); // Enable transmit
     a44:	e1 ec       	ldi	r30, 0xC1	; 193
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	80 81       	ld	r24, Z
     a4a:	88 60       	ori	r24, 0x08	; 8
     a4c:	80 83       	st	Z, r24
	
	fdevopen(usbdbg_tx_char, NULL);
     a4e:	60 e0       	ldi	r22, 0x00	; 0
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	81 e1       	ldi	r24, 0x11	; 17
     a54:	95 e0       	ldi	r25, 0x05	; 5
     a56:	1c c2       	rjmp	.+1080   	; 0xe90 <fdevopen>
     a58:	08 95       	ret

00000a5a <__subsf3>:
     a5a:	50 58       	subi	r21, 0x80	; 128

00000a5c <__addsf3>:
     a5c:	bb 27       	eor	r27, r27
     a5e:	aa 27       	eor	r26, r26
     a60:	0e d0       	rcall	.+28     	; 0xa7e <__addsf3x>
     a62:	75 c1       	rjmp	.+746    	; 0xd4e <__fp_round>
     a64:	66 d1       	rcall	.+716    	; 0xd32 <__fp_pscA>
     a66:	30 f0       	brcs	.+12     	; 0xa74 <__addsf3+0x18>
     a68:	6b d1       	rcall	.+726    	; 0xd40 <__fp_pscB>
     a6a:	20 f0       	brcs	.+8      	; 0xa74 <__addsf3+0x18>
     a6c:	31 f4       	brne	.+12     	; 0xa7a <__addsf3+0x1e>
     a6e:	9f 3f       	cpi	r25, 0xFF	; 255
     a70:	11 f4       	brne	.+4      	; 0xa76 <__addsf3+0x1a>
     a72:	1e f4       	brtc	.+6      	; 0xa7a <__addsf3+0x1e>
     a74:	5b c1       	rjmp	.+694    	; 0xd2c <__fp_nan>
     a76:	0e f4       	brtc	.+2      	; 0xa7a <__addsf3+0x1e>
     a78:	e0 95       	com	r30
     a7a:	e7 fb       	bst	r30, 7
     a7c:	51 c1       	rjmp	.+674    	; 0xd20 <__fp_inf>

00000a7e <__addsf3x>:
     a7e:	e9 2f       	mov	r30, r25
     a80:	77 d1       	rcall	.+750    	; 0xd70 <__fp_split3>
     a82:	80 f3       	brcs	.-32     	; 0xa64 <__addsf3+0x8>
     a84:	ba 17       	cp	r27, r26
     a86:	62 07       	cpc	r22, r18
     a88:	73 07       	cpc	r23, r19
     a8a:	84 07       	cpc	r24, r20
     a8c:	95 07       	cpc	r25, r21
     a8e:	18 f0       	brcs	.+6      	; 0xa96 <__addsf3x+0x18>
     a90:	71 f4       	brne	.+28     	; 0xaae <__addsf3x+0x30>
     a92:	9e f5       	brtc	.+102    	; 0xafa <__addsf3x+0x7c>
     a94:	8f c1       	rjmp	.+798    	; 0xdb4 <__fp_zero>
     a96:	0e f4       	brtc	.+2      	; 0xa9a <__addsf3x+0x1c>
     a98:	e0 95       	com	r30
     a9a:	0b 2e       	mov	r0, r27
     a9c:	ba 2f       	mov	r27, r26
     a9e:	a0 2d       	mov	r26, r0
     aa0:	0b 01       	movw	r0, r22
     aa2:	b9 01       	movw	r22, r18
     aa4:	90 01       	movw	r18, r0
     aa6:	0c 01       	movw	r0, r24
     aa8:	ca 01       	movw	r24, r20
     aaa:	a0 01       	movw	r20, r0
     aac:	11 24       	eor	r1, r1
     aae:	ff 27       	eor	r31, r31
     ab0:	59 1b       	sub	r21, r25
     ab2:	99 f0       	breq	.+38     	; 0xada <__addsf3x+0x5c>
     ab4:	59 3f       	cpi	r21, 0xF9	; 249
     ab6:	50 f4       	brcc	.+20     	; 0xacc <__addsf3x+0x4e>
     ab8:	50 3e       	cpi	r21, 0xE0	; 224
     aba:	68 f1       	brcs	.+90     	; 0xb16 <__addsf3x+0x98>
     abc:	1a 16       	cp	r1, r26
     abe:	f0 40       	sbci	r31, 0x00	; 0
     ac0:	a2 2f       	mov	r26, r18
     ac2:	23 2f       	mov	r18, r19
     ac4:	34 2f       	mov	r19, r20
     ac6:	44 27       	eor	r20, r20
     ac8:	58 5f       	subi	r21, 0xF8	; 248
     aca:	f3 cf       	rjmp	.-26     	; 0xab2 <__addsf3x+0x34>
     acc:	46 95       	lsr	r20
     ace:	37 95       	ror	r19
     ad0:	27 95       	ror	r18
     ad2:	a7 95       	ror	r26
     ad4:	f0 40       	sbci	r31, 0x00	; 0
     ad6:	53 95       	inc	r21
     ad8:	c9 f7       	brne	.-14     	; 0xacc <__addsf3x+0x4e>
     ada:	7e f4       	brtc	.+30     	; 0xafa <__addsf3x+0x7c>
     adc:	1f 16       	cp	r1, r31
     ade:	ba 0b       	sbc	r27, r26
     ae0:	62 0b       	sbc	r22, r18
     ae2:	73 0b       	sbc	r23, r19
     ae4:	84 0b       	sbc	r24, r20
     ae6:	ba f0       	brmi	.+46     	; 0xb16 <__addsf3x+0x98>
     ae8:	91 50       	subi	r25, 0x01	; 1
     aea:	a1 f0       	breq	.+40     	; 0xb14 <__addsf3x+0x96>
     aec:	ff 0f       	add	r31, r31
     aee:	bb 1f       	adc	r27, r27
     af0:	66 1f       	adc	r22, r22
     af2:	77 1f       	adc	r23, r23
     af4:	88 1f       	adc	r24, r24
     af6:	c2 f7       	brpl	.-16     	; 0xae8 <__addsf3x+0x6a>
     af8:	0e c0       	rjmp	.+28     	; 0xb16 <__addsf3x+0x98>
     afa:	ba 0f       	add	r27, r26
     afc:	62 1f       	adc	r22, r18
     afe:	73 1f       	adc	r23, r19
     b00:	84 1f       	adc	r24, r20
     b02:	48 f4       	brcc	.+18     	; 0xb16 <__addsf3x+0x98>
     b04:	87 95       	ror	r24
     b06:	77 95       	ror	r23
     b08:	67 95       	ror	r22
     b0a:	b7 95       	ror	r27
     b0c:	f7 95       	ror	r31
     b0e:	9e 3f       	cpi	r25, 0xFE	; 254
     b10:	08 f0       	brcs	.+2      	; 0xb14 <__addsf3x+0x96>
     b12:	b3 cf       	rjmp	.-154    	; 0xa7a <__addsf3+0x1e>
     b14:	93 95       	inc	r25
     b16:	88 0f       	add	r24, r24
     b18:	08 f0       	brcs	.+2      	; 0xb1c <__addsf3x+0x9e>
     b1a:	99 27       	eor	r25, r25
     b1c:	ee 0f       	add	r30, r30
     b1e:	97 95       	ror	r25
     b20:	87 95       	ror	r24
     b22:	08 95       	ret

00000b24 <__cmpsf2>:
     b24:	d9 d0       	rcall	.+434    	; 0xcd8 <__fp_cmp>
     b26:	08 f4       	brcc	.+2      	; 0xb2a <__cmpsf2+0x6>
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	08 95       	ret

00000b2c <__divsf3>:
     b2c:	0c d0       	rcall	.+24     	; 0xb46 <__divsf3x>
     b2e:	0f c1       	rjmp	.+542    	; 0xd4e <__fp_round>
     b30:	07 d1       	rcall	.+526    	; 0xd40 <__fp_pscB>
     b32:	40 f0       	brcs	.+16     	; 0xb44 <__divsf3+0x18>
     b34:	fe d0       	rcall	.+508    	; 0xd32 <__fp_pscA>
     b36:	30 f0       	brcs	.+12     	; 0xb44 <__divsf3+0x18>
     b38:	21 f4       	brne	.+8      	; 0xb42 <__divsf3+0x16>
     b3a:	5f 3f       	cpi	r21, 0xFF	; 255
     b3c:	19 f0       	breq	.+6      	; 0xb44 <__divsf3+0x18>
     b3e:	f0 c0       	rjmp	.+480    	; 0xd20 <__fp_inf>
     b40:	51 11       	cpse	r21, r1
     b42:	39 c1       	rjmp	.+626    	; 0xdb6 <__fp_szero>
     b44:	f3 c0       	rjmp	.+486    	; 0xd2c <__fp_nan>

00000b46 <__divsf3x>:
     b46:	14 d1       	rcall	.+552    	; 0xd70 <__fp_split3>
     b48:	98 f3       	brcs	.-26     	; 0xb30 <__divsf3+0x4>

00000b4a <__divsf3_pse>:
     b4a:	99 23       	and	r25, r25
     b4c:	c9 f3       	breq	.-14     	; 0xb40 <__divsf3+0x14>
     b4e:	55 23       	and	r21, r21
     b50:	b1 f3       	breq	.-20     	; 0xb3e <__divsf3+0x12>
     b52:	95 1b       	sub	r25, r21
     b54:	55 0b       	sbc	r21, r21
     b56:	bb 27       	eor	r27, r27
     b58:	aa 27       	eor	r26, r26
     b5a:	62 17       	cp	r22, r18
     b5c:	73 07       	cpc	r23, r19
     b5e:	84 07       	cpc	r24, r20
     b60:	38 f0       	brcs	.+14     	; 0xb70 <__divsf3_pse+0x26>
     b62:	9f 5f       	subi	r25, 0xFF	; 255
     b64:	5f 4f       	sbci	r21, 0xFF	; 255
     b66:	22 0f       	add	r18, r18
     b68:	33 1f       	adc	r19, r19
     b6a:	44 1f       	adc	r20, r20
     b6c:	aa 1f       	adc	r26, r26
     b6e:	a9 f3       	breq	.-22     	; 0xb5a <__divsf3_pse+0x10>
     b70:	33 d0       	rcall	.+102    	; 0xbd8 <__divsf3_pse+0x8e>
     b72:	0e 2e       	mov	r0, r30
     b74:	3a f0       	brmi	.+14     	; 0xb84 <__divsf3_pse+0x3a>
     b76:	e0 e8       	ldi	r30, 0x80	; 128
     b78:	30 d0       	rcall	.+96     	; 0xbda <__divsf3_pse+0x90>
     b7a:	91 50       	subi	r25, 0x01	; 1
     b7c:	50 40       	sbci	r21, 0x00	; 0
     b7e:	e6 95       	lsr	r30
     b80:	00 1c       	adc	r0, r0
     b82:	ca f7       	brpl	.-14     	; 0xb76 <__divsf3_pse+0x2c>
     b84:	29 d0       	rcall	.+82     	; 0xbd8 <__divsf3_pse+0x8e>
     b86:	fe 2f       	mov	r31, r30
     b88:	27 d0       	rcall	.+78     	; 0xbd8 <__divsf3_pse+0x8e>
     b8a:	66 0f       	add	r22, r22
     b8c:	77 1f       	adc	r23, r23
     b8e:	88 1f       	adc	r24, r24
     b90:	bb 1f       	adc	r27, r27
     b92:	26 17       	cp	r18, r22
     b94:	37 07       	cpc	r19, r23
     b96:	48 07       	cpc	r20, r24
     b98:	ab 07       	cpc	r26, r27
     b9a:	b0 e8       	ldi	r27, 0x80	; 128
     b9c:	09 f0       	breq	.+2      	; 0xba0 <__divsf3_pse+0x56>
     b9e:	bb 0b       	sbc	r27, r27
     ba0:	80 2d       	mov	r24, r0
     ba2:	bf 01       	movw	r22, r30
     ba4:	ff 27       	eor	r31, r31
     ba6:	93 58       	subi	r25, 0x83	; 131
     ba8:	5f 4f       	sbci	r21, 0xFF	; 255
     baa:	2a f0       	brmi	.+10     	; 0xbb6 <__divsf3_pse+0x6c>
     bac:	9e 3f       	cpi	r25, 0xFE	; 254
     bae:	51 05       	cpc	r21, r1
     bb0:	68 f0       	brcs	.+26     	; 0xbcc <__divsf3_pse+0x82>
     bb2:	b6 c0       	rjmp	.+364    	; 0xd20 <__fp_inf>
     bb4:	00 c1       	rjmp	.+512    	; 0xdb6 <__fp_szero>
     bb6:	5f 3f       	cpi	r21, 0xFF	; 255
     bb8:	ec f3       	brlt	.-6      	; 0xbb4 <__divsf3_pse+0x6a>
     bba:	98 3e       	cpi	r25, 0xE8	; 232
     bbc:	dc f3       	brlt	.-10     	; 0xbb4 <__divsf3_pse+0x6a>
     bbe:	86 95       	lsr	r24
     bc0:	77 95       	ror	r23
     bc2:	67 95       	ror	r22
     bc4:	b7 95       	ror	r27
     bc6:	f7 95       	ror	r31
     bc8:	9f 5f       	subi	r25, 0xFF	; 255
     bca:	c9 f7       	brne	.-14     	; 0xbbe <__divsf3_pse+0x74>
     bcc:	88 0f       	add	r24, r24
     bce:	91 1d       	adc	r25, r1
     bd0:	96 95       	lsr	r25
     bd2:	87 95       	ror	r24
     bd4:	97 f9       	bld	r25, 7
     bd6:	08 95       	ret
     bd8:	e1 e0       	ldi	r30, 0x01	; 1
     bda:	66 0f       	add	r22, r22
     bdc:	77 1f       	adc	r23, r23
     bde:	88 1f       	adc	r24, r24
     be0:	bb 1f       	adc	r27, r27
     be2:	62 17       	cp	r22, r18
     be4:	73 07       	cpc	r23, r19
     be6:	84 07       	cpc	r24, r20
     be8:	ba 07       	cpc	r27, r26
     bea:	20 f0       	brcs	.+8      	; 0xbf4 <__divsf3_pse+0xaa>
     bec:	62 1b       	sub	r22, r18
     bee:	73 0b       	sbc	r23, r19
     bf0:	84 0b       	sbc	r24, r20
     bf2:	ba 0b       	sbc	r27, r26
     bf4:	ee 1f       	adc	r30, r30
     bf6:	88 f7       	brcc	.-30     	; 0xbda <__divsf3_pse+0x90>
     bf8:	e0 95       	com	r30
     bfa:	08 95       	ret

00000bfc <__fixsfsi>:
     bfc:	04 d0       	rcall	.+8      	; 0xc06 <__fixunssfsi>
     bfe:	68 94       	set
     c00:	b1 11       	cpse	r27, r1
     c02:	d9 c0       	rjmp	.+434    	; 0xdb6 <__fp_szero>
     c04:	08 95       	ret

00000c06 <__fixunssfsi>:
     c06:	bc d0       	rcall	.+376    	; 0xd80 <__fp_splitA>
     c08:	88 f0       	brcs	.+34     	; 0xc2c <__fixunssfsi+0x26>
     c0a:	9f 57       	subi	r25, 0x7F	; 127
     c0c:	90 f0       	brcs	.+36     	; 0xc32 <__fixunssfsi+0x2c>
     c0e:	b9 2f       	mov	r27, r25
     c10:	99 27       	eor	r25, r25
     c12:	b7 51       	subi	r27, 0x17	; 23
     c14:	a0 f0       	brcs	.+40     	; 0xc3e <__fixunssfsi+0x38>
     c16:	d1 f0       	breq	.+52     	; 0xc4c <__fixunssfsi+0x46>
     c18:	66 0f       	add	r22, r22
     c1a:	77 1f       	adc	r23, r23
     c1c:	88 1f       	adc	r24, r24
     c1e:	99 1f       	adc	r25, r25
     c20:	1a f0       	brmi	.+6      	; 0xc28 <__fixunssfsi+0x22>
     c22:	ba 95       	dec	r27
     c24:	c9 f7       	brne	.-14     	; 0xc18 <__fixunssfsi+0x12>
     c26:	12 c0       	rjmp	.+36     	; 0xc4c <__fixunssfsi+0x46>
     c28:	b1 30       	cpi	r27, 0x01	; 1
     c2a:	81 f0       	breq	.+32     	; 0xc4c <__fixunssfsi+0x46>
     c2c:	c3 d0       	rcall	.+390    	; 0xdb4 <__fp_zero>
     c2e:	b1 e0       	ldi	r27, 0x01	; 1
     c30:	08 95       	ret
     c32:	c0 c0       	rjmp	.+384    	; 0xdb4 <__fp_zero>
     c34:	67 2f       	mov	r22, r23
     c36:	78 2f       	mov	r23, r24
     c38:	88 27       	eor	r24, r24
     c3a:	b8 5f       	subi	r27, 0xF8	; 248
     c3c:	39 f0       	breq	.+14     	; 0xc4c <__fixunssfsi+0x46>
     c3e:	b9 3f       	cpi	r27, 0xF9	; 249
     c40:	cc f3       	brlt	.-14     	; 0xc34 <__fixunssfsi+0x2e>
     c42:	86 95       	lsr	r24
     c44:	77 95       	ror	r23
     c46:	67 95       	ror	r22
     c48:	b3 95       	inc	r27
     c4a:	d9 f7       	brne	.-10     	; 0xc42 <__fixunssfsi+0x3c>
     c4c:	3e f4       	brtc	.+14     	; 0xc5c <__fixunssfsi+0x56>
     c4e:	90 95       	com	r25
     c50:	80 95       	com	r24
     c52:	70 95       	com	r23
     c54:	61 95       	neg	r22
     c56:	7f 4f       	sbci	r23, 0xFF	; 255
     c58:	8f 4f       	sbci	r24, 0xFF	; 255
     c5a:	9f 4f       	sbci	r25, 0xFF	; 255
     c5c:	08 95       	ret

00000c5e <__floatunsisf>:
     c5e:	e8 94       	clt
     c60:	09 c0       	rjmp	.+18     	; 0xc74 <__floatsisf+0x12>

00000c62 <__floatsisf>:
     c62:	97 fb       	bst	r25, 7
     c64:	3e f4       	brtc	.+14     	; 0xc74 <__floatsisf+0x12>
     c66:	90 95       	com	r25
     c68:	80 95       	com	r24
     c6a:	70 95       	com	r23
     c6c:	61 95       	neg	r22
     c6e:	7f 4f       	sbci	r23, 0xFF	; 255
     c70:	8f 4f       	sbci	r24, 0xFF	; 255
     c72:	9f 4f       	sbci	r25, 0xFF	; 255
     c74:	99 23       	and	r25, r25
     c76:	a9 f0       	breq	.+42     	; 0xca2 <__floatsisf+0x40>
     c78:	f9 2f       	mov	r31, r25
     c7a:	96 e9       	ldi	r25, 0x96	; 150
     c7c:	bb 27       	eor	r27, r27
     c7e:	93 95       	inc	r25
     c80:	f6 95       	lsr	r31
     c82:	87 95       	ror	r24
     c84:	77 95       	ror	r23
     c86:	67 95       	ror	r22
     c88:	b7 95       	ror	r27
     c8a:	f1 11       	cpse	r31, r1
     c8c:	f8 cf       	rjmp	.-16     	; 0xc7e <__floatsisf+0x1c>
     c8e:	fa f4       	brpl	.+62     	; 0xcce <__floatsisf+0x6c>
     c90:	bb 0f       	add	r27, r27
     c92:	11 f4       	brne	.+4      	; 0xc98 <__floatsisf+0x36>
     c94:	60 ff       	sbrs	r22, 0
     c96:	1b c0       	rjmp	.+54     	; 0xcce <__floatsisf+0x6c>
     c98:	6f 5f       	subi	r22, 0xFF	; 255
     c9a:	7f 4f       	sbci	r23, 0xFF	; 255
     c9c:	8f 4f       	sbci	r24, 0xFF	; 255
     c9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ca0:	16 c0       	rjmp	.+44     	; 0xcce <__floatsisf+0x6c>
     ca2:	88 23       	and	r24, r24
     ca4:	11 f0       	breq	.+4      	; 0xcaa <__floatsisf+0x48>
     ca6:	96 e9       	ldi	r25, 0x96	; 150
     ca8:	11 c0       	rjmp	.+34     	; 0xccc <__floatsisf+0x6a>
     caa:	77 23       	and	r23, r23
     cac:	21 f0       	breq	.+8      	; 0xcb6 <__floatsisf+0x54>
     cae:	9e e8       	ldi	r25, 0x8E	; 142
     cb0:	87 2f       	mov	r24, r23
     cb2:	76 2f       	mov	r23, r22
     cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <__floatsisf+0x5e>
     cb6:	66 23       	and	r22, r22
     cb8:	71 f0       	breq	.+28     	; 0xcd6 <__floatsisf+0x74>
     cba:	96 e8       	ldi	r25, 0x86	; 134
     cbc:	86 2f       	mov	r24, r22
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	2a f0       	brmi	.+10     	; 0xcce <__floatsisf+0x6c>
     cc4:	9a 95       	dec	r25
     cc6:	66 0f       	add	r22, r22
     cc8:	77 1f       	adc	r23, r23
     cca:	88 1f       	adc	r24, r24
     ccc:	da f7       	brpl	.-10     	; 0xcc4 <__floatsisf+0x62>
     cce:	88 0f       	add	r24, r24
     cd0:	96 95       	lsr	r25
     cd2:	87 95       	ror	r24
     cd4:	97 f9       	bld	r25, 7
     cd6:	08 95       	ret

00000cd8 <__fp_cmp>:
     cd8:	99 0f       	add	r25, r25
     cda:	00 08       	sbc	r0, r0
     cdc:	55 0f       	add	r21, r21
     cde:	aa 0b       	sbc	r26, r26
     ce0:	e0 e8       	ldi	r30, 0x80	; 128
     ce2:	fe ef       	ldi	r31, 0xFE	; 254
     ce4:	16 16       	cp	r1, r22
     ce6:	17 06       	cpc	r1, r23
     ce8:	e8 07       	cpc	r30, r24
     cea:	f9 07       	cpc	r31, r25
     cec:	c0 f0       	brcs	.+48     	; 0xd1e <__fp_cmp+0x46>
     cee:	12 16       	cp	r1, r18
     cf0:	13 06       	cpc	r1, r19
     cf2:	e4 07       	cpc	r30, r20
     cf4:	f5 07       	cpc	r31, r21
     cf6:	98 f0       	brcs	.+38     	; 0xd1e <__fp_cmp+0x46>
     cf8:	62 1b       	sub	r22, r18
     cfa:	73 0b       	sbc	r23, r19
     cfc:	84 0b       	sbc	r24, r20
     cfe:	95 0b       	sbc	r25, r21
     d00:	39 f4       	brne	.+14     	; 0xd10 <__fp_cmp+0x38>
     d02:	0a 26       	eor	r0, r26
     d04:	61 f0       	breq	.+24     	; 0xd1e <__fp_cmp+0x46>
     d06:	23 2b       	or	r18, r19
     d08:	24 2b       	or	r18, r20
     d0a:	25 2b       	or	r18, r21
     d0c:	21 f4       	brne	.+8      	; 0xd16 <__fp_cmp+0x3e>
     d0e:	08 95       	ret
     d10:	0a 26       	eor	r0, r26
     d12:	09 f4       	brne	.+2      	; 0xd16 <__fp_cmp+0x3e>
     d14:	a1 40       	sbci	r26, 0x01	; 1
     d16:	a6 95       	lsr	r26
     d18:	8f ef       	ldi	r24, 0xFF	; 255
     d1a:	81 1d       	adc	r24, r1
     d1c:	81 1d       	adc	r24, r1
     d1e:	08 95       	ret

00000d20 <__fp_inf>:
     d20:	97 f9       	bld	r25, 7
     d22:	9f 67       	ori	r25, 0x7F	; 127
     d24:	80 e8       	ldi	r24, 0x80	; 128
     d26:	70 e0       	ldi	r23, 0x00	; 0
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	08 95       	ret

00000d2c <__fp_nan>:
     d2c:	9f ef       	ldi	r25, 0xFF	; 255
     d2e:	80 ec       	ldi	r24, 0xC0	; 192
     d30:	08 95       	ret

00000d32 <__fp_pscA>:
     d32:	00 24       	eor	r0, r0
     d34:	0a 94       	dec	r0
     d36:	16 16       	cp	r1, r22
     d38:	17 06       	cpc	r1, r23
     d3a:	18 06       	cpc	r1, r24
     d3c:	09 06       	cpc	r0, r25
     d3e:	08 95       	ret

00000d40 <__fp_pscB>:
     d40:	00 24       	eor	r0, r0
     d42:	0a 94       	dec	r0
     d44:	12 16       	cp	r1, r18
     d46:	13 06       	cpc	r1, r19
     d48:	14 06       	cpc	r1, r20
     d4a:	05 06       	cpc	r0, r21
     d4c:	08 95       	ret

00000d4e <__fp_round>:
     d4e:	09 2e       	mov	r0, r25
     d50:	03 94       	inc	r0
     d52:	00 0c       	add	r0, r0
     d54:	11 f4       	brne	.+4      	; 0xd5a <__fp_round+0xc>
     d56:	88 23       	and	r24, r24
     d58:	52 f0       	brmi	.+20     	; 0xd6e <__fp_round+0x20>
     d5a:	bb 0f       	add	r27, r27
     d5c:	40 f4       	brcc	.+16     	; 0xd6e <__fp_round+0x20>
     d5e:	bf 2b       	or	r27, r31
     d60:	11 f4       	brne	.+4      	; 0xd66 <__fp_round+0x18>
     d62:	60 ff       	sbrs	r22, 0
     d64:	04 c0       	rjmp	.+8      	; 0xd6e <__fp_round+0x20>
     d66:	6f 5f       	subi	r22, 0xFF	; 255
     d68:	7f 4f       	sbci	r23, 0xFF	; 255
     d6a:	8f 4f       	sbci	r24, 0xFF	; 255
     d6c:	9f 4f       	sbci	r25, 0xFF	; 255
     d6e:	08 95       	ret

00000d70 <__fp_split3>:
     d70:	57 fd       	sbrc	r21, 7
     d72:	90 58       	subi	r25, 0x80	; 128
     d74:	44 0f       	add	r20, r20
     d76:	55 1f       	adc	r21, r21
     d78:	59 f0       	breq	.+22     	; 0xd90 <__fp_splitA+0x10>
     d7a:	5f 3f       	cpi	r21, 0xFF	; 255
     d7c:	71 f0       	breq	.+28     	; 0xd9a <__fp_splitA+0x1a>
     d7e:	47 95       	ror	r20

00000d80 <__fp_splitA>:
     d80:	88 0f       	add	r24, r24
     d82:	97 fb       	bst	r25, 7
     d84:	99 1f       	adc	r25, r25
     d86:	61 f0       	breq	.+24     	; 0xda0 <__fp_splitA+0x20>
     d88:	9f 3f       	cpi	r25, 0xFF	; 255
     d8a:	79 f0       	breq	.+30     	; 0xdaa <__fp_splitA+0x2a>
     d8c:	87 95       	ror	r24
     d8e:	08 95       	ret
     d90:	12 16       	cp	r1, r18
     d92:	13 06       	cpc	r1, r19
     d94:	14 06       	cpc	r1, r20
     d96:	55 1f       	adc	r21, r21
     d98:	f2 cf       	rjmp	.-28     	; 0xd7e <__fp_split3+0xe>
     d9a:	46 95       	lsr	r20
     d9c:	f1 df       	rcall	.-30     	; 0xd80 <__fp_splitA>
     d9e:	08 c0       	rjmp	.+16     	; 0xdb0 <__fp_splitA+0x30>
     da0:	16 16       	cp	r1, r22
     da2:	17 06       	cpc	r1, r23
     da4:	18 06       	cpc	r1, r24
     da6:	99 1f       	adc	r25, r25
     da8:	f1 cf       	rjmp	.-30     	; 0xd8c <__fp_splitA+0xc>
     daa:	86 95       	lsr	r24
     dac:	71 05       	cpc	r23, r1
     dae:	61 05       	cpc	r22, r1
     db0:	08 94       	sec
     db2:	08 95       	ret

00000db4 <__fp_zero>:
     db4:	e8 94       	clt

00000db6 <__fp_szero>:
     db6:	bb 27       	eor	r27, r27
     db8:	66 27       	eor	r22, r22
     dba:	77 27       	eor	r23, r23
     dbc:	cb 01       	movw	r24, r22
     dbe:	97 f9       	bld	r25, 7
     dc0:	08 95       	ret

00000dc2 <__gesf2>:
     dc2:	8a df       	rcall	.-236    	; 0xcd8 <__fp_cmp>
     dc4:	08 f4       	brcc	.+2      	; 0xdc8 <__gesf2+0x6>
     dc6:	8f ef       	ldi	r24, 0xFF	; 255
     dc8:	08 95       	ret

00000dca <__mulsf3>:
     dca:	0b d0       	rcall	.+22     	; 0xde2 <__mulsf3x>
     dcc:	c0 cf       	rjmp	.-128    	; 0xd4e <__fp_round>
     dce:	b1 df       	rcall	.-158    	; 0xd32 <__fp_pscA>
     dd0:	28 f0       	brcs	.+10     	; 0xddc <__mulsf3+0x12>
     dd2:	b6 df       	rcall	.-148    	; 0xd40 <__fp_pscB>
     dd4:	18 f0       	brcs	.+6      	; 0xddc <__mulsf3+0x12>
     dd6:	95 23       	and	r25, r21
     dd8:	09 f0       	breq	.+2      	; 0xddc <__mulsf3+0x12>
     dda:	a2 cf       	rjmp	.-188    	; 0xd20 <__fp_inf>
     ddc:	a7 cf       	rjmp	.-178    	; 0xd2c <__fp_nan>
     dde:	11 24       	eor	r1, r1
     de0:	ea cf       	rjmp	.-44     	; 0xdb6 <__fp_szero>

00000de2 <__mulsf3x>:
     de2:	c6 df       	rcall	.-116    	; 0xd70 <__fp_split3>
     de4:	a0 f3       	brcs	.-24     	; 0xdce <__mulsf3+0x4>

00000de6 <__mulsf3_pse>:
     de6:	95 9f       	mul	r25, r21
     de8:	d1 f3       	breq	.-12     	; 0xdde <__mulsf3+0x14>
     dea:	95 0f       	add	r25, r21
     dec:	50 e0       	ldi	r21, 0x00	; 0
     dee:	55 1f       	adc	r21, r21
     df0:	62 9f       	mul	r22, r18
     df2:	f0 01       	movw	r30, r0
     df4:	72 9f       	mul	r23, r18
     df6:	bb 27       	eor	r27, r27
     df8:	f0 0d       	add	r31, r0
     dfa:	b1 1d       	adc	r27, r1
     dfc:	63 9f       	mul	r22, r19
     dfe:	aa 27       	eor	r26, r26
     e00:	f0 0d       	add	r31, r0
     e02:	b1 1d       	adc	r27, r1
     e04:	aa 1f       	adc	r26, r26
     e06:	64 9f       	mul	r22, r20
     e08:	66 27       	eor	r22, r22
     e0a:	b0 0d       	add	r27, r0
     e0c:	a1 1d       	adc	r26, r1
     e0e:	66 1f       	adc	r22, r22
     e10:	82 9f       	mul	r24, r18
     e12:	22 27       	eor	r18, r18
     e14:	b0 0d       	add	r27, r0
     e16:	a1 1d       	adc	r26, r1
     e18:	62 1f       	adc	r22, r18
     e1a:	73 9f       	mul	r23, r19
     e1c:	b0 0d       	add	r27, r0
     e1e:	a1 1d       	adc	r26, r1
     e20:	62 1f       	adc	r22, r18
     e22:	83 9f       	mul	r24, r19
     e24:	a0 0d       	add	r26, r0
     e26:	61 1d       	adc	r22, r1
     e28:	22 1f       	adc	r18, r18
     e2a:	74 9f       	mul	r23, r20
     e2c:	33 27       	eor	r19, r19
     e2e:	a0 0d       	add	r26, r0
     e30:	61 1d       	adc	r22, r1
     e32:	23 1f       	adc	r18, r19
     e34:	84 9f       	mul	r24, r20
     e36:	60 0d       	add	r22, r0
     e38:	21 1d       	adc	r18, r1
     e3a:	82 2f       	mov	r24, r18
     e3c:	76 2f       	mov	r23, r22
     e3e:	6a 2f       	mov	r22, r26
     e40:	11 24       	eor	r1, r1
     e42:	9f 57       	subi	r25, 0x7F	; 127
     e44:	50 40       	sbci	r21, 0x00	; 0
     e46:	8a f0       	brmi	.+34     	; 0xe6a <__mulsf3_pse+0x84>
     e48:	e1 f0       	breq	.+56     	; 0xe82 <__mulsf3_pse+0x9c>
     e4a:	88 23       	and	r24, r24
     e4c:	4a f0       	brmi	.+18     	; 0xe60 <__mulsf3_pse+0x7a>
     e4e:	ee 0f       	add	r30, r30
     e50:	ff 1f       	adc	r31, r31
     e52:	bb 1f       	adc	r27, r27
     e54:	66 1f       	adc	r22, r22
     e56:	77 1f       	adc	r23, r23
     e58:	88 1f       	adc	r24, r24
     e5a:	91 50       	subi	r25, 0x01	; 1
     e5c:	50 40       	sbci	r21, 0x00	; 0
     e5e:	a9 f7       	brne	.-22     	; 0xe4a <__mulsf3_pse+0x64>
     e60:	9e 3f       	cpi	r25, 0xFE	; 254
     e62:	51 05       	cpc	r21, r1
     e64:	70 f0       	brcs	.+28     	; 0xe82 <__mulsf3_pse+0x9c>
     e66:	5c cf       	rjmp	.-328    	; 0xd20 <__fp_inf>
     e68:	a6 cf       	rjmp	.-180    	; 0xdb6 <__fp_szero>
     e6a:	5f 3f       	cpi	r21, 0xFF	; 255
     e6c:	ec f3       	brlt	.-6      	; 0xe68 <__mulsf3_pse+0x82>
     e6e:	98 3e       	cpi	r25, 0xE8	; 232
     e70:	dc f3       	brlt	.-10     	; 0xe68 <__mulsf3_pse+0x82>
     e72:	86 95       	lsr	r24
     e74:	77 95       	ror	r23
     e76:	67 95       	ror	r22
     e78:	b7 95       	ror	r27
     e7a:	f7 95       	ror	r31
     e7c:	e7 95       	ror	r30
     e7e:	9f 5f       	subi	r25, 0xFF	; 255
     e80:	c1 f7       	brne	.-16     	; 0xe72 <__mulsf3_pse+0x8c>
     e82:	fe 2b       	or	r31, r30
     e84:	88 0f       	add	r24, r24
     e86:	91 1d       	adc	r25, r1
     e88:	96 95       	lsr	r25
     e8a:	87 95       	ror	r24
     e8c:	97 f9       	bld	r25, 7
     e8e:	08 95       	ret

00000e90 <fdevopen>:
     e90:	0f 93       	push	r16
     e92:	1f 93       	push	r17
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	00 97       	sbiw	r24, 0x00	; 0
     e9a:	31 f4       	brne	.+12     	; 0xea8 <fdevopen+0x18>
     e9c:	61 15       	cp	r22, r1
     e9e:	71 05       	cpc	r23, r1
     ea0:	19 f4       	brne	.+6      	; 0xea8 <fdevopen+0x18>
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	39 c0       	rjmp	.+114    	; 0xf1a <fdevopen+0x8a>
     ea8:	8b 01       	movw	r16, r22
     eaa:	ec 01       	movw	r28, r24
     eac:	6e e0       	ldi	r22, 0x0E	; 14
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	37 d0       	rcall	.+110    	; 0xf24 <calloc>
     eb6:	fc 01       	movw	r30, r24
     eb8:	89 2b       	or	r24, r25
     eba:	99 f3       	breq	.-26     	; 0xea2 <fdevopen+0x12>
     ebc:	80 e8       	ldi	r24, 0x80	; 128
     ebe:	83 83       	std	Z+3, r24	; 0x03
     ec0:	01 15       	cp	r16, r1
     ec2:	11 05       	cpc	r17, r1
     ec4:	71 f0       	breq	.+28     	; 0xee2 <fdevopen+0x52>
     ec6:	13 87       	std	Z+11, r17	; 0x0b
     ec8:	02 87       	std	Z+10, r16	; 0x0a
     eca:	81 e8       	ldi	r24, 0x81	; 129
     ecc:	83 83       	std	Z+3, r24	; 0x03
     ece:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <__iob>
     ed2:	90 91 f2 02 	lds	r25, 0x02F2	; 0x8002f2 <__iob+0x1>
     ed6:	89 2b       	or	r24, r25
     ed8:	21 f4       	brne	.+8      	; 0xee2 <fdevopen+0x52>
     eda:	f0 93 f2 02 	sts	0x02F2, r31	; 0x8002f2 <__iob+0x1>
     ede:	e0 93 f1 02 	sts	0x02F1, r30	; 0x8002f1 <__iob>
     ee2:	20 97       	sbiw	r28, 0x00	; 0
     ee4:	c9 f0       	breq	.+50     	; 0xf18 <fdevopen+0x88>
     ee6:	d1 87       	std	Z+9, r29	; 0x09
     ee8:	c0 87       	std	Z+8, r28	; 0x08
     eea:	83 81       	ldd	r24, Z+3	; 0x03
     eec:	82 60       	ori	r24, 0x02	; 2
     eee:	83 83       	std	Z+3, r24	; 0x03
     ef0:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <__iob+0x2>
     ef4:	90 91 f4 02 	lds	r25, 0x02F4	; 0x8002f4 <__iob+0x3>
     ef8:	89 2b       	or	r24, r25
     efa:	71 f4       	brne	.+28     	; 0xf18 <fdevopen+0x88>
     efc:	f0 93 f4 02 	sts	0x02F4, r31	; 0x8002f4 <__iob+0x3>
     f00:	e0 93 f3 02 	sts	0x02F3, r30	; 0x8002f3 <__iob+0x2>
     f04:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <__iob+0x4>
     f08:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <__iob+0x5>
     f0c:	89 2b       	or	r24, r25
     f0e:	21 f4       	brne	.+8      	; 0xf18 <fdevopen+0x88>
     f10:	f0 93 f6 02 	sts	0x02F6, r31	; 0x8002f6 <__iob+0x5>
     f14:	e0 93 f5 02 	sts	0x02F5, r30	; 0x8002f5 <__iob+0x4>
     f18:	cf 01       	movw	r24, r30
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	1f 91       	pop	r17
     f20:	0f 91       	pop	r16
     f22:	08 95       	ret

00000f24 <calloc>:
     f24:	0f 93       	push	r16
     f26:	1f 93       	push	r17
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	86 9f       	mul	r24, r22
     f2e:	80 01       	movw	r16, r0
     f30:	87 9f       	mul	r24, r23
     f32:	10 0d       	add	r17, r0
     f34:	96 9f       	mul	r25, r22
     f36:	10 0d       	add	r17, r0
     f38:	11 24       	eor	r1, r1
     f3a:	c8 01       	movw	r24, r16
     f3c:	0d d0       	rcall	.+26     	; 0xf58 <malloc>
     f3e:	ec 01       	movw	r28, r24
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	21 f0       	breq	.+8      	; 0xf4c <calloc+0x28>
     f44:	a8 01       	movw	r20, r16
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	27 d1       	rcall	.+590    	; 0x119a <memset>
     f4c:	ce 01       	movw	r24, r28
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	1f 91       	pop	r17
     f54:	0f 91       	pop	r16
     f56:	08 95       	ret

00000f58 <malloc>:
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	82 30       	cpi	r24, 0x02	; 2
     f62:	91 05       	cpc	r25, r1
     f64:	10 f4       	brcc	.+4      	; 0xf6a <malloc+0x12>
     f66:	82 e0       	ldi	r24, 0x02	; 2
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	e0 91 f9 02 	lds	r30, 0x02F9	; 0x8002f9 <__flp>
     f6e:	f0 91 fa 02 	lds	r31, 0x02FA	; 0x8002fa <__flp+0x1>
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	a0 e0       	ldi	r26, 0x00	; 0
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	30 97       	sbiw	r30, 0x00	; 0
     f7c:	19 f1       	breq	.+70     	; 0xfc4 <malloc+0x6c>
     f7e:	40 81       	ld	r20, Z
     f80:	51 81       	ldd	r21, Z+1	; 0x01
     f82:	02 81       	ldd	r16, Z+2	; 0x02
     f84:	13 81       	ldd	r17, Z+3	; 0x03
     f86:	48 17       	cp	r20, r24
     f88:	59 07       	cpc	r21, r25
     f8a:	c8 f0       	brcs	.+50     	; 0xfbe <malloc+0x66>
     f8c:	84 17       	cp	r24, r20
     f8e:	95 07       	cpc	r25, r21
     f90:	69 f4       	brne	.+26     	; 0xfac <malloc+0x54>
     f92:	10 97       	sbiw	r26, 0x00	; 0
     f94:	31 f0       	breq	.+12     	; 0xfa2 <malloc+0x4a>
     f96:	12 96       	adiw	r26, 0x02	; 2
     f98:	0c 93       	st	X, r16
     f9a:	12 97       	sbiw	r26, 0x02	; 2
     f9c:	13 96       	adiw	r26, 0x03	; 3
     f9e:	1c 93       	st	X, r17
     fa0:	27 c0       	rjmp	.+78     	; 0xff0 <malloc+0x98>
     fa2:	00 93 f9 02 	sts	0x02F9, r16	; 0x8002f9 <__flp>
     fa6:	10 93 fa 02 	sts	0x02FA, r17	; 0x8002fa <__flp+0x1>
     faa:	22 c0       	rjmp	.+68     	; 0xff0 <malloc+0x98>
     fac:	21 15       	cp	r18, r1
     fae:	31 05       	cpc	r19, r1
     fb0:	19 f0       	breq	.+6      	; 0xfb8 <malloc+0x60>
     fb2:	42 17       	cp	r20, r18
     fb4:	53 07       	cpc	r21, r19
     fb6:	18 f4       	brcc	.+6      	; 0xfbe <malloc+0x66>
     fb8:	9a 01       	movw	r18, r20
     fba:	bd 01       	movw	r22, r26
     fbc:	ef 01       	movw	r28, r30
     fbe:	df 01       	movw	r26, r30
     fc0:	f8 01       	movw	r30, r16
     fc2:	db cf       	rjmp	.-74     	; 0xf7a <malloc+0x22>
     fc4:	21 15       	cp	r18, r1
     fc6:	31 05       	cpc	r19, r1
     fc8:	f9 f0       	breq	.+62     	; 0x1008 <malloc+0xb0>
     fca:	28 1b       	sub	r18, r24
     fcc:	39 0b       	sbc	r19, r25
     fce:	24 30       	cpi	r18, 0x04	; 4
     fd0:	31 05       	cpc	r19, r1
     fd2:	80 f4       	brcc	.+32     	; 0xff4 <malloc+0x9c>
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	9b 81       	ldd	r25, Y+3	; 0x03
     fd8:	61 15       	cp	r22, r1
     fda:	71 05       	cpc	r23, r1
     fdc:	21 f0       	breq	.+8      	; 0xfe6 <malloc+0x8e>
     fde:	fb 01       	movw	r30, r22
     fe0:	93 83       	std	Z+3, r25	; 0x03
     fe2:	82 83       	std	Z+2, r24	; 0x02
     fe4:	04 c0       	rjmp	.+8      	; 0xfee <malloc+0x96>
     fe6:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <__flp+0x1>
     fea:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <__flp>
     fee:	fe 01       	movw	r30, r28
     ff0:	32 96       	adiw	r30, 0x02	; 2
     ff2:	44 c0       	rjmp	.+136    	; 0x107c <malloc+0x124>
     ff4:	fe 01       	movw	r30, r28
     ff6:	e2 0f       	add	r30, r18
     ff8:	f3 1f       	adc	r31, r19
     ffa:	81 93       	st	Z+, r24
     ffc:	91 93       	st	Z+, r25
     ffe:	22 50       	subi	r18, 0x02	; 2
    1000:	31 09       	sbc	r19, r1
    1002:	39 83       	std	Y+1, r19	; 0x01
    1004:	28 83       	st	Y, r18
    1006:	3a c0       	rjmp	.+116    	; 0x107c <malloc+0x124>
    1008:	20 91 f7 02 	lds	r18, 0x02F7	; 0x8002f7 <__brkval>
    100c:	30 91 f8 02 	lds	r19, 0x02F8	; 0x8002f8 <__brkval+0x1>
    1010:	23 2b       	or	r18, r19
    1012:	41 f4       	brne	.+16     	; 0x1024 <malloc+0xcc>
    1014:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1018:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    101c:	30 93 f8 02 	sts	0x02F8, r19	; 0x8002f8 <__brkval+0x1>
    1020:	20 93 f7 02 	sts	0x02F7, r18	; 0x8002f7 <__brkval>
    1024:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1028:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    102c:	21 15       	cp	r18, r1
    102e:	31 05       	cpc	r19, r1
    1030:	41 f4       	brne	.+16     	; 0x1042 <malloc+0xea>
    1032:	2d b7       	in	r18, 0x3d	; 61
    1034:	3e b7       	in	r19, 0x3e	; 62
    1036:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    103a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    103e:	24 1b       	sub	r18, r20
    1040:	35 0b       	sbc	r19, r21
    1042:	e0 91 f7 02 	lds	r30, 0x02F7	; 0x8002f7 <__brkval>
    1046:	f0 91 f8 02 	lds	r31, 0x02F8	; 0x8002f8 <__brkval+0x1>
    104a:	e2 17       	cp	r30, r18
    104c:	f3 07       	cpc	r31, r19
    104e:	a0 f4       	brcc	.+40     	; 0x1078 <malloc+0x120>
    1050:	2e 1b       	sub	r18, r30
    1052:	3f 0b       	sbc	r19, r31
    1054:	28 17       	cp	r18, r24
    1056:	39 07       	cpc	r19, r25
    1058:	78 f0       	brcs	.+30     	; 0x1078 <malloc+0x120>
    105a:	ac 01       	movw	r20, r24
    105c:	4e 5f       	subi	r20, 0xFE	; 254
    105e:	5f 4f       	sbci	r21, 0xFF	; 255
    1060:	24 17       	cp	r18, r20
    1062:	35 07       	cpc	r19, r21
    1064:	48 f0       	brcs	.+18     	; 0x1078 <malloc+0x120>
    1066:	4e 0f       	add	r20, r30
    1068:	5f 1f       	adc	r21, r31
    106a:	50 93 f8 02 	sts	0x02F8, r21	; 0x8002f8 <__brkval+0x1>
    106e:	40 93 f7 02 	sts	0x02F7, r20	; 0x8002f7 <__brkval>
    1072:	81 93       	st	Z+, r24
    1074:	91 93       	st	Z+, r25
    1076:	02 c0       	rjmp	.+4      	; 0x107c <malloc+0x124>
    1078:	e0 e0       	ldi	r30, 0x00	; 0
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	cf 01       	movw	r24, r30
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	1f 91       	pop	r17
    1084:	0f 91       	pop	r16
    1086:	08 95       	ret

00001088 <free>:
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	09 f4       	brne	.+2      	; 0x1092 <free+0xa>
    1090:	81 c0       	rjmp	.+258    	; 0x1194 <__stack+0x95>
    1092:	fc 01       	movw	r30, r24
    1094:	32 97       	sbiw	r30, 0x02	; 2
    1096:	13 82       	std	Z+3, r1	; 0x03
    1098:	12 82       	std	Z+2, r1	; 0x02
    109a:	a0 91 f9 02 	lds	r26, 0x02F9	; 0x8002f9 <__flp>
    109e:	b0 91 fa 02 	lds	r27, 0x02FA	; 0x8002fa <__flp+0x1>
    10a2:	10 97       	sbiw	r26, 0x00	; 0
    10a4:	81 f4       	brne	.+32     	; 0x10c6 <free+0x3e>
    10a6:	20 81       	ld	r18, Z
    10a8:	31 81       	ldd	r19, Z+1	; 0x01
    10aa:	82 0f       	add	r24, r18
    10ac:	93 1f       	adc	r25, r19
    10ae:	20 91 f7 02 	lds	r18, 0x02F7	; 0x8002f7 <__brkval>
    10b2:	30 91 f8 02 	lds	r19, 0x02F8	; 0x8002f8 <__brkval+0x1>
    10b6:	28 17       	cp	r18, r24
    10b8:	39 07       	cpc	r19, r25
    10ba:	51 f5       	brne	.+84     	; 0x1110 <__stack+0x11>
    10bc:	f0 93 f8 02 	sts	0x02F8, r31	; 0x8002f8 <__brkval+0x1>
    10c0:	e0 93 f7 02 	sts	0x02F7, r30	; 0x8002f7 <__brkval>
    10c4:	67 c0       	rjmp	.+206    	; 0x1194 <__stack+0x95>
    10c6:	ed 01       	movw	r28, r26
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	ce 17       	cp	r28, r30
    10ce:	df 07       	cpc	r29, r31
    10d0:	40 f4       	brcc	.+16     	; 0x10e2 <free+0x5a>
    10d2:	4a 81       	ldd	r20, Y+2	; 0x02
    10d4:	5b 81       	ldd	r21, Y+3	; 0x03
    10d6:	9e 01       	movw	r18, r28
    10d8:	41 15       	cp	r20, r1
    10da:	51 05       	cpc	r21, r1
    10dc:	f1 f0       	breq	.+60     	; 0x111a <__stack+0x1b>
    10de:	ea 01       	movw	r28, r20
    10e0:	f5 cf       	rjmp	.-22     	; 0x10cc <free+0x44>
    10e2:	d3 83       	std	Z+3, r29	; 0x03
    10e4:	c2 83       	std	Z+2, r28	; 0x02
    10e6:	40 81       	ld	r20, Z
    10e8:	51 81       	ldd	r21, Z+1	; 0x01
    10ea:	84 0f       	add	r24, r20
    10ec:	95 1f       	adc	r25, r21
    10ee:	c8 17       	cp	r28, r24
    10f0:	d9 07       	cpc	r29, r25
    10f2:	59 f4       	brne	.+22     	; 0x110a <__stack+0xb>
    10f4:	88 81       	ld	r24, Y
    10f6:	99 81       	ldd	r25, Y+1	; 0x01
    10f8:	84 0f       	add	r24, r20
    10fa:	95 1f       	adc	r25, r21
    10fc:	02 96       	adiw	r24, 0x02	; 2
    10fe:	91 83       	std	Z+1, r25	; 0x01
    1100:	80 83       	st	Z, r24
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	9b 81       	ldd	r25, Y+3	; 0x03
    1106:	93 83       	std	Z+3, r25	; 0x03
    1108:	82 83       	std	Z+2, r24	; 0x02
    110a:	21 15       	cp	r18, r1
    110c:	31 05       	cpc	r19, r1
    110e:	29 f4       	brne	.+10     	; 0x111a <__stack+0x1b>
    1110:	f0 93 fa 02 	sts	0x02FA, r31	; 0x8002fa <__flp+0x1>
    1114:	e0 93 f9 02 	sts	0x02F9, r30	; 0x8002f9 <__flp>
    1118:	3d c0       	rjmp	.+122    	; 0x1194 <__stack+0x95>
    111a:	e9 01       	movw	r28, r18
    111c:	fb 83       	std	Y+3, r31	; 0x03
    111e:	ea 83       	std	Y+2, r30	; 0x02
    1120:	49 91       	ld	r20, Y+
    1122:	59 91       	ld	r21, Y+
    1124:	c4 0f       	add	r28, r20
    1126:	d5 1f       	adc	r29, r21
    1128:	ec 17       	cp	r30, r28
    112a:	fd 07       	cpc	r31, r29
    112c:	61 f4       	brne	.+24     	; 0x1146 <__stack+0x47>
    112e:	80 81       	ld	r24, Z
    1130:	91 81       	ldd	r25, Z+1	; 0x01
    1132:	84 0f       	add	r24, r20
    1134:	95 1f       	adc	r25, r21
    1136:	02 96       	adiw	r24, 0x02	; 2
    1138:	e9 01       	movw	r28, r18
    113a:	99 83       	std	Y+1, r25	; 0x01
    113c:	88 83       	st	Y, r24
    113e:	82 81       	ldd	r24, Z+2	; 0x02
    1140:	93 81       	ldd	r25, Z+3	; 0x03
    1142:	9b 83       	std	Y+3, r25	; 0x03
    1144:	8a 83       	std	Y+2, r24	; 0x02
    1146:	e0 e0       	ldi	r30, 0x00	; 0
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	12 96       	adiw	r26, 0x02	; 2
    114c:	8d 91       	ld	r24, X+
    114e:	9c 91       	ld	r25, X
    1150:	13 97       	sbiw	r26, 0x03	; 3
    1152:	00 97       	sbiw	r24, 0x00	; 0
    1154:	19 f0       	breq	.+6      	; 0x115c <__stack+0x5d>
    1156:	fd 01       	movw	r30, r26
    1158:	dc 01       	movw	r26, r24
    115a:	f7 cf       	rjmp	.-18     	; 0x114a <__stack+0x4b>
    115c:	8d 91       	ld	r24, X+
    115e:	9c 91       	ld	r25, X
    1160:	11 97       	sbiw	r26, 0x01	; 1
    1162:	9d 01       	movw	r18, r26
    1164:	2e 5f       	subi	r18, 0xFE	; 254
    1166:	3f 4f       	sbci	r19, 0xFF	; 255
    1168:	82 0f       	add	r24, r18
    116a:	93 1f       	adc	r25, r19
    116c:	20 91 f7 02 	lds	r18, 0x02F7	; 0x8002f7 <__brkval>
    1170:	30 91 f8 02 	lds	r19, 0x02F8	; 0x8002f8 <__brkval+0x1>
    1174:	28 17       	cp	r18, r24
    1176:	39 07       	cpc	r19, r25
    1178:	69 f4       	brne	.+26     	; 0x1194 <__stack+0x95>
    117a:	30 97       	sbiw	r30, 0x00	; 0
    117c:	29 f4       	brne	.+10     	; 0x1188 <__stack+0x89>
    117e:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <__flp+0x1>
    1182:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <__flp>
    1186:	02 c0       	rjmp	.+4      	; 0x118c <__stack+0x8d>
    1188:	13 82       	std	Z+3, r1	; 0x03
    118a:	12 82       	std	Z+2, r1	; 0x02
    118c:	b0 93 f8 02 	sts	0x02F8, r27	; 0x8002f8 <__brkval+0x1>
    1190:	a0 93 f7 02 	sts	0x02F7, r26	; 0x8002f7 <__brkval>
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	08 95       	ret

0000119a <memset>:
    119a:	dc 01       	movw	r26, r24
    119c:	01 c0       	rjmp	.+2      	; 0x11a0 <memset+0x6>
    119e:	6d 93       	st	X+, r22
    11a0:	41 50       	subi	r20, 0x01	; 1
    11a2:	50 40       	sbci	r21, 0x00	; 0
    11a4:	e0 f7       	brcc	.-8      	; 0x119e <memset+0x4>
    11a6:	08 95       	ret

000011a8 <_exit>:
    11a8:	f8 94       	cli

000011aa <__stop_program>:
    11aa:	ff cf       	rjmp	.-2      	; 0x11aa <__stop_program>
