
MotorController_2018.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000019e4  00001a78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001fc  00800110  00800110  00001a88  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a88  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ae4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00001b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002588  00000000  00000000  00001d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013d1  00000000  00000000  0000429c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000114a  00000000  00000000  0000566d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000608  00000000  00000000  000067b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d1a  00000000  00000000  00006dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001274  00000000  00000000  00007ada  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00008d4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	3d c2       	rjmp	.+1146   	; 0x4ac <__vector_12>
      32:	00 00       	nop
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	65 c2       	rjmp	.+1226   	; 0x50c <__vector_16>
      42:	00 00       	nop
      44:	d9 c5       	rjmp	.+2994   	; 0xbf8 <__vector_17>
      46:	00 00       	nop
      48:	5e c3       	rjmp	.+1724   	; 0x706 <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	3d c0       	rjmp	.+122    	; 0xd0 <__bad_interrupt>
      56:	00 00       	nop
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	39 c0       	rjmp	.+114    	; 0xd0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9e c2       	rjmp	.+1340   	; 0x5a2 <__vector_25>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c0       	rjmp	.+78     	; 0xd0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c0       	rjmp	.+70     	; 0xd0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e4 ee       	ldi	r30, 0xE4	; 228
      a8:	f9 e1       	ldi	r31, 0x19	; 25
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a0 31       	cpi	r26, 0x10	; 16
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	23 e0       	ldi	r18, 0x03	; 3
      bc:	a0 e1       	ldi	r26, 0x10	; 16
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	ac 30       	cpi	r26, 0x0C	; 12
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	77 d1       	rcall	.+750    	; 0x3ba <main>
      cc:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <controller>:


static float f32_Integrator = 0.0 ;
static float f32_DutyCycleCmd = 50.0 ;

void controller(float f32_current_cmd, float f32_prev_current){
      d2:	8f 92       	push	r8
      d4:	9f 92       	push	r9
      d6:	af 92       	push	r10
      d8:	bf 92       	push	r11
      da:	cf 92       	push	r12
      dc:	df 92       	push	r13
      de:	ef 92       	push	r14
      e0:	ff 92       	push	r15
      e2:	cf 93       	push	r28
	
	float f32_CurrentDelta=f32_current_cmd-f32_prev_current	;
      e4:	df 93       	push	r29
      e6:	e2 d5       	rcall	.+3012   	; 0xcac <__subsf3>
      e8:	4b 01       	movw	r8, r22

	f32_Integrator+=f32_CurrentDelta*TimeStep ;
      ea:	5c 01       	movw	r10, r24
      ec:	2a e0       	ldi	r18, 0x0A	; 10
      ee:	37 ed       	ldi	r19, 0xD7	; 215
      f0:	43 e2       	ldi	r20, 0x23	; 35
      f2:	5c e3       	ldi	r21, 0x3C	; 60
      f4:	93 d7       	rcall	.+3878   	; 0x101c <__mulsf3>
      f6:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__data_end>
      fa:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__data_end+0x1>
      fe:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__data_end+0x2>
     102:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__data_end+0x3>
     106:	d3 d5       	rcall	.+2982   	; 0xcae <__addsf3>
     108:	6b 01       	movw	r12, r22
     10a:	7c 01       	movw	r14, r24
     10c:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <__data_end>
     110:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <__data_end+0x1>
     114:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end+0x2>
     118:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x3>
	f32_DutyCycleCmd=Kp*f32_CurrentDelta+f32_Integrator/Ti ;
	f32_DutyCycleCmd=(f32_DutyCycleCmd+50) ;
     11c:	23 ea       	ldi	r18, 0xA3	; 163
     11e:	36 e0       	ldi	r19, 0x06	; 6
     120:	43 ed       	ldi	r20, 0xD3	; 211
     122:	5a e3       	ldi	r21, 0x3A	; 58
     124:	c5 01       	movw	r24, r10
     126:	b4 01       	movw	r22, r8
     128:	79 d7       	rcall	.+3826   	; 0x101c <__mulsf3>
     12a:	4b 01       	movw	r8, r22
     12c:	5c 01       	movw	r10, r24
     12e:	2c e5       	ldi	r18, 0x5C	; 92
     130:	3f e8       	ldi	r19, 0x8F	; 143
     132:	42 ec       	ldi	r20, 0xC2	; 194
     134:	50 e4       	ldi	r21, 0x40	; 64
     136:	c7 01       	movw	r24, r14
     138:	b6 01       	movw	r22, r12
     13a:	21 d6       	rcall	.+3138   	; 0xd7e <__divsf3>
     13c:	9b 01       	movw	r18, r22
     13e:	ac 01       	movw	r20, r24
     140:	c5 01       	movw	r24, r10
     142:	b4 01       	movw	r22, r8
     144:	b4 d5       	rcall	.+2920   	; 0xcae <__addsf3>
     146:	20 e0       	ldi	r18, 0x00	; 0
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	48 e4       	ldi	r20, 0x48	; 72
     14c:	52 e4       	ldi	r21, 0x42	; 66
     14e:	af d5       	rcall	.+2910   	; 0xcae <__addsf3>
     150:	6b 01       	movw	r12, r22
     152:	7c 01       	movw	r14, r24
     154:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <f32_DutyCycleCmd>
     158:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <f32_DutyCycleCmd+0x1>
     15c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <f32_DutyCycleCmd+0x2>
	
	//bounding of duty cycle for well function of bootstrap capacitors

	if (f32_DutyCycleCmd > 95)
     160:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <f32_DutyCycleCmd+0x3>
     164:	20 e0       	ldi	r18, 0x00	; 0
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	4e eb       	ldi	r20, 0xBE	; 190
     16a:	52 e4       	ldi	r21, 0x42	; 66
     16c:	53 d7       	rcall	.+3750   	; 0x1014 <__gesf2>
     16e:	18 16       	cp	r1, r24
	{
		f32_DutyCycleCmd = 95;
     170:	6c f4       	brge	.+26     	; 0x18c <controller+0xba>
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	ae eb       	ldi	r26, 0xBE	; 190
     178:	b2 e4       	ldi	r27, 0x42	; 66
     17a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <f32_DutyCycleCmd>
     17e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <f32_DutyCycleCmd+0x1>
     182:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <f32_DutyCycleCmd+0x2>
     186:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <f32_DutyCycleCmd+0x3>
	}
	
	if (f32_DutyCycleCmd < 5)
     18a:	15 c0       	rjmp	.+42     	; 0x1b6 <controller+0xe4>
     18c:	20 e0       	ldi	r18, 0x00	; 0
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	40 ea       	ldi	r20, 0xA0	; 160
     192:	50 e4       	ldi	r21, 0x40	; 64
     194:	c7 01       	movw	r24, r14
     196:	b6 01       	movw	r22, r12
     198:	ee d5       	rcall	.+3036   	; 0xd76 <__cmpsf2>
     19a:	88 23       	and	r24, r24
	{
		f32_DutyCycleCmd = 5;
     19c:	64 f4       	brge	.+24     	; 0x1b6 <controller+0xe4>
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	a0 ea       	ldi	r26, 0xA0	; 160
     1a4:	b0 e4       	ldi	r27, 0x40	; 64
     1a6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <f32_DutyCycleCmd>
     1aa:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <f32_DutyCycleCmd+0x1>
     1ae:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <f32_DutyCycleCmd+0x2>
     1b2:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <f32_DutyCycleCmd+0x3>
	}
	
	OCR3A = (int)((f32_DutyCycleCmd/100)*ICR3) ; //PWM_PE3 (non inverted)
     1b6:	c0 91 96 00 	lds	r28, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
     1ba:	d0 91 97 00 	lds	r29, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
     1be:	20 e0       	ldi	r18, 0x00	; 0
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	48 ec       	ldi	r20, 0xC8	; 200
     1c4:	52 e4       	ldi	r21, 0x42	; 66
     1c6:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <f32_DutyCycleCmd>
     1ca:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <f32_DutyCycleCmd+0x1>
     1ce:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <f32_DutyCycleCmd+0x2>
     1d2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <f32_DutyCycleCmd+0x3>
     1d6:	d3 d5       	rcall	.+2982   	; 0xd7e <__divsf3>
     1d8:	6b 01       	movw	r12, r22
     1da:	7c 01       	movw	r14, r24
     1dc:	be 01       	movw	r22, r28
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	66 d6       	rcall	.+3276   	; 0xeb0 <__floatunsisf>
     1e4:	9b 01       	movw	r18, r22
     1e6:	ac 01       	movw	r20, r24
     1e8:	c7 01       	movw	r24, r14
     1ea:	b6 01       	movw	r22, r12
     1ec:	17 d7       	rcall	.+3630   	; 0x101c <__mulsf3>
     1ee:	2f d6       	rcall	.+3166   	; 0xe4e <__fixsfsi>
     1f0:	e8 e9       	ldi	r30, 0x98	; 152
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	71 83       	std	Z+1, r23	; 0x01
	OCR3B = OCR3A ; //PWM_PE4 (inverted)
     1f6:	60 83       	st	Z, r22
     1f8:	80 81       	ld	r24, Z
     1fa:	91 81       	ldd	r25, Z+1	; 0x01
     1fc:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     200:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
}
     204:	df 91       	pop	r29
     206:	cf 91       	pop	r28
     208:	ff 90       	pop	r15
     20a:	ef 90       	pop	r14
     20c:	df 90       	pop	r13
     20e:	cf 90       	pop	r12
     210:	bf 90       	pop	r11
     212:	af 90       	pop	r10
     214:	9f 90       	pop	r9
     216:	8f 90       	pop	r8
     218:	08 95       	ret

0000021a <timer1_init_ts>:




void timer1_init_ts(){
	TCCR1B |= (1<<CS10)|(1<<CS11); // timer 1 prescaler set CLK/64
     21a:	e1 e8       	ldi	r30, 0x81	; 129
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	83 60       	ori	r24, 0x03	; 3
     222:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12); //CTC
     224:	80 81       	ld	r24, Z
     226:	88 60       	ori	r24, 0x08	; 8
     228:	80 83       	st	Z, r24
	TCNT1 = 0; //reset timer value
     22a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     22e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIMSK1 |= (1<<OCIE1A); //enable interrupt
     232:	ef e6       	ldi	r30, 0x6F	; 111
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	80 81       	ld	r24, Z
     238:	82 60       	ori	r24, 0x02	; 2
     23a:	80 83       	st	Z, r24
	OCR1A = 125 - 1; //compare value //every 1ms
     23c:	8c e7       	ldi	r24, 0x7C	; 124
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     244:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     248:	08 95       	ret

0000024a <timer0_init_ts>:
}

void timer0_init_ts(){ 
	TCCR0A |= (1<<CS10)|(1<<CS11); // timer 0 prescaler set CLK/1024
     24a:	84 b5       	in	r24, 0x24	; 36
     24c:	83 60       	ori	r24, 0x03	; 3
     24e:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM01); //CTC
     250:	84 b5       	in	r24, 0x24	; 36
     252:	88 60       	ori	r24, 0x08	; 8
     254:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0; //reset timer value
     256:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1<<OCIE0A); //enable interrupt
     258:	ee e6       	ldi	r30, 0x6E	; 110
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	80 81       	ld	r24, Z
     25e:	82 60       	ori	r24, 0x02	; 2
     260:	80 83       	st	Z, r24
	OCR0A = 79; //compare value
     262:	8f e4       	ldi	r24, 0x4F	; 79
     264:	87 bd       	out	0x27, r24	; 39
     266:	08 95       	ret

00000268 <handle_can>:
	.motor_status = IDLE,
	.deadman = 0
};


void handle_can(ModuleValues_t *vals, CanMessage_t *rx){
     268:	0f 93       	push	r16
     26a:	1f 93       	push	r17
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	8c 01       	movw	r16, r24
     272:	eb 01       	movw	r28, r22
	if (can_read_message_if_new(rx)){
     274:	cb 01       	movw	r24, r22
     276:	8d d3       	rcall	.+1818   	; 0x992 <can_read_message_if_new>
     278:	88 23       	and	r24, r24
     27a:	49 f1       	breq	.+82     	; 0x2ce <handle_can+0x66>
		switch (rx->id){
     27c:	88 81       	ld	r24, Y
     27e:	99 81       	ldd	r25, Y+1	; 0x01
     280:	80 32       	cpi	r24, 0x20	; 32
     282:	22 e0       	ldi	r18, 0x02	; 2
     284:	92 07       	cpc	r25, r18
     286:	f1 f0       	breq	.+60     	; 0x2c4 <handle_can+0x5c>
     288:	20 f4       	brcc	.+8      	; 0x292 <handle_can+0x2a>
     28a:	80 31       	cpi	r24, 0x10	; 16
     28c:	91 40       	sbci	r25, 0x01	; 1
     28e:	49 f0       	breq	.+18     	; 0x2a2 <handle_can+0x3a>
     290:	1e c0       	rjmp	.+60     	; 0x2ce <handle_can+0x66>
     292:	80 33       	cpi	r24, 0x30	; 48
     294:	22 e0       	ldi	r18, 0x02	; 2
     296:	92 07       	cpc	r25, r18
     298:	61 f0       	breq	.+24     	; 0x2b2 <handle_can+0x4a>
     29a:	88 34       	cpi	r24, 0x48	; 72
     29c:	94 40       	sbci	r25, 0x04	; 4
     29e:	29 f0       	breq	.+10     	; 0x2aa <handle_can+0x42>
     2a0:	16 c0       	rjmp	.+44     	; 0x2ce <handle_can+0x66>
			case BRAKE_CAN_ID:
				vals->braking = rx->data.u8[0];
     2a2:	8b 81       	ldd	r24, Y+3	; 0x03
     2a4:	f8 01       	movw	r30, r16
     2a6:	85 83       	std	Z+5, r24	; 0x05
				break;
     2a8:	12 c0       	rjmp	.+36     	; 0x2ce <handle_can+0x66>
			case BMS_STATUS_CAN_ID:
				vals->BMS_status = rx->data.u8[0];
     2aa:	8b 81       	ldd	r24, Y+3	; 0x03
     2ac:	f8 01       	movw	r30, r16
     2ae:	80 83       	st	Z, r24
				break;
     2b0:	0e c0       	rjmp	.+28     	; 0x2ce <handle_can+0x66>
			case STEERING_WHEEL_CAN_ID:
				vals->throttle_cmd = rx->data.u8[3];
     2b2:	8e 81       	ldd	r24, Y+6	; 0x06
     2b4:	f8 01       	movw	r30, r16
     2b6:	81 83       	std	Z+1, r24	; 0x01
				vals->restart_overload = rx->data.u8[1] & HORN;
     2b8:	8c 81       	ldd	r24, Y+4	; 0x04
     2ba:	82 70       	andi	r24, 0x02	; 2
     2bc:	82 83       	std	Z+2, r24	; 0x02
				vals->deadman = rx->data.u8[2];
     2be:	8d 81       	ldd	r24, Y+5	; 0x05
     2c0:	83 87       	std	Z+11, r24	; 0x0b
				break;
     2c2:	05 c0       	rjmp	.+10     	; 0x2ce <handle_can+0x66>
			case ENCODER_CAN_ID:
				vals->rpm = rx->data.u16[ENCODER_CHANNEL];
     2c4:	8b 81       	ldd	r24, Y+3	; 0x03
     2c6:	9c 81       	ldd	r25, Y+4	; 0x04
     2c8:	f8 01       	movw	r30, r16
     2ca:	94 83       	std	Z+4, r25	; 0x04
     2cc:	83 83       	std	Z+3, r24	; 0x03
				break;
		}
	}
}
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	1f 91       	pop	r17
     2d4:	0f 91       	pop	r16
     2d6:	08 95       	ret

000002d8 <handle_motor_status_can_msg>:

void handle_motor_status_can_msg(uint8_t *send, ModuleValues_t *vals){
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
	if(*send){
     2dc:	fc 01       	movw	r30, r24
     2de:	20 81       	ld	r18, Z
     2e0:	22 23       	and	r18, r18
     2e2:	d9 f0       	breq	.+54     	; 0x31a <handle_motor_status_can_msg+0x42>
     2e4:	fb 01       	movw	r30, r22
     2e6:	ec 01       	movw	r28, r24
		txFrame.data.u8[0] = vals->motor_status;
     2e8:	a7 ef       	ldi	r26, 0xF7	; 247
     2ea:	b2 e0       	ldi	r27, 0x02	; 2
     2ec:	82 85       	ldd	r24, Z+10	; 0x0a
     2ee:	13 96       	adiw	r26, 0x03	; 3
     2f0:	8c 93       	st	X, r24
     2f2:	13 97       	sbiw	r26, 0x03	; 3
		txFrame.data.u8[1] = vals->throttle_cmd;
     2f4:	81 81       	ldd	r24, Z+1	; 0x01
     2f6:	14 96       	adiw	r26, 0x04	; 4
     2f8:	8c 93       	st	X, r24
     2fa:	14 97       	sbiw	r26, 0x04	; 4
		txFrame.data.u16[1] = vals->mamp;
     2fc:	86 81       	ldd	r24, Z+6	; 0x06
     2fe:	97 81       	ldd	r25, Z+7	; 0x07
     300:	16 96       	adiw	r26, 0x06	; 6
     302:	9c 93       	st	X, r25
     304:	8e 93       	st	-X, r24
     306:	15 97       	sbiw	r26, 0x05	; 5
		//txFrame.data.u16[2] = OCR3B ;   
		txFrame.data.u16[3] = vals->rpm;
     308:	83 81       	ldd	r24, Z+3	; 0x03
     30a:	94 81       	ldd	r25, Z+4	; 0x04
     30c:	1a 96       	adiw	r26, 0x0a	; 10
     30e:	9c 93       	st	X, r25
     310:	8e 93       	st	-X, r24
     312:	19 97       	sbiw	r26, 0x09	; 9
		
		can_send_message(&txFrame);
     314:	cd 01       	movw	r24, r26
     316:	80 d3       	rcall	.+1792   	; 0xa18 <can_send_message>
		*send = 0;
     318:	18 82       	st	Y, r1
	}
}
     31a:	df 91       	pop	r29
     31c:	cf 91       	pop	r28
     31e:	08 95       	ret

00000320 <handle_current_sensor>:
void handle_current_sensor(float *f32_prev_current, uint16_t u16_ADC_reg){ //----------------------------------------------------------------------------TODO test if ok with uint32, otherwise use float
     320:	0f 93       	push	r16
     322:	1f 93       	push	r17
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	00 d0       	rcall	.+0      	; 0x32a <handle_current_sensor+0xa>
     32a:	00 d0       	rcall	.+0      	; 0x32c <handle_current_sensor+0xc>
     32c:	cd b7       	in	r28, 0x3d	; 61
     32e:	de b7       	in	r29, 0x3e	; 62
     330:	8c 01       	movw	r16, r24
	
	volatile float f_new_current = ((((float)u16_ADC_reg*3.3/1024) - TRANSDUCER_OFFSET)/TRANSDUCER_SENSIBILITY)/3 ;// /3 because current passes 3x in transducer for more precision.
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	bc d5       	rcall	.+2936   	; 0xeb0 <__floatunsisf>
     338:	23 e3       	ldi	r18, 0x33	; 51
     33a:	33 e3       	ldi	r19, 0x33	; 51
     33c:	43 e5       	ldi	r20, 0x53	; 83
     33e:	50 e4       	ldi	r21, 0x40	; 64
     340:	6d d6       	rcall	.+3290   	; 0x101c <__mulsf3>
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	40 e8       	ldi	r20, 0x80	; 128
     348:	5a e3       	ldi	r21, 0x3A	; 58
     34a:	68 d6       	rcall	.+3280   	; 0x101c <__mulsf3>
     34c:	27 ed       	ldi	r18, 0xD7	; 215
     34e:	33 ea       	ldi	r19, 0xA3	; 163
     350:	40 e1       	ldi	r20, 0x10	; 16
     352:	50 e4       	ldi	r21, 0x40	; 64
     354:	ab d4       	rcall	.+2390   	; 0xcac <__subsf3>
     356:	23 ec       	ldi	r18, 0xC3	; 195
     358:	34 e6       	ldi	r19, 0x64	; 100
     35a:	4a e2       	ldi	r20, 0x2A	; 42
     35c:	5d e3       	ldi	r21, 0x3D	; 61
     35e:	0f d5       	rcall	.+2590   	; 0xd7e <__divsf3>
     360:	20 e0       	ldi	r18, 0x00	; 0
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	40 e4       	ldi	r20, 0x40	; 64
     366:	50 e4       	ldi	r21, 0x40	; 64
     368:	0a d5       	rcall	.+2580   	; 0xd7e <__divsf3>
     36a:	69 83       	std	Y+1, r22	; 0x01
     36c:	7a 83       	std	Y+2, r23	; 0x02
     36e:	8b 83       	std	Y+3, r24	; 0x03
     370:	9c 83       	std	Y+4, r25	; 0x04
	f_new_current = (f_new_current+0.11)*1.1 ;// correction of offset and ramp error (conversion + hardware) measured with ampmeter of the power supply : bad
     372:	69 81       	ldd	r22, Y+1	; 0x01
     374:	7a 81       	ldd	r23, Y+2	; 0x02
     376:	8b 81       	ldd	r24, Y+3	; 0x03
     378:	9c 81       	ldd	r25, Y+4	; 0x04
     37a:	2e ea       	ldi	r18, 0xAE	; 174
     37c:	37 e4       	ldi	r19, 0x47	; 71
     37e:	41 ee       	ldi	r20, 0xE1	; 225
     380:	5d e3       	ldi	r21, 0x3D	; 61
     382:	95 d4       	rcall	.+2346   	; 0xcae <__addsf3>
     384:	2d ec       	ldi	r18, 0xCD	; 205
     386:	3c ec       	ldi	r19, 0xCC	; 204
     388:	4c e8       	ldi	r20, 0x8C	; 140
     38a:	5f e3       	ldi	r21, 0x3F	; 63
     38c:	47 d6       	rcall	.+3214   	; 0x101c <__mulsf3>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
	//*f32_prev_current = (*f32_prev_current)*(1-LOWPASS_CONSTANT) + LOWPASS_CONSTANT*f_new_current ;// low pass filter ---------------------TODO test
	*f32_prev_current = f_new_current;
     396:	89 81       	ldd	r24, Y+1	; 0x01
     398:	9a 81       	ldd	r25, Y+2	; 0x02
     39a:	ab 81       	ldd	r26, Y+3	; 0x03
     39c:	bc 81       	ldd	r27, Y+4	; 0x04
     39e:	f8 01       	movw	r30, r16
     3a0:	80 83       	st	Z, r24
     3a2:	91 83       	std	Z+1, r25	; 0x01
     3a4:	a2 83       	std	Z+2, r26	; 0x02
     3a6:	b3 83       	std	Z+3, r27	; 0x03
}
     3a8:	0f 90       	pop	r0
     3aa:	0f 90       	pop	r0
     3ac:	0f 90       	pop	r0
     3ae:	0f 90       	pop	r0
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	1f 91       	pop	r17
     3b6:	0f 91       	pop	r16
     3b8:	08 95       	ret

000003ba <main>:

int main(void)	
{
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	cd b7       	in	r28, 0x3d	; 61
     3c0:	de b7       	in	r29, 0x3e	; 62
     3c2:	28 97       	sbiw	r28, 0x08	; 8
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	f8 94       	cli
     3c8:	de bf       	out	0x3e, r29	; 62
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	cd bf       	out	0x3d, r28	; 61
	cli();
     3ce:	f8 94       	cli
	pid_init(&Current, 0.1, 0.05, 0, 0);
     3d0:	81 2c       	mov	r8, r1
     3d2:	91 2c       	mov	r9, r1
     3d4:	54 01       	movw	r10, r8
     3d6:	75 01       	movw	r14, r10
     3d8:	64 01       	movw	r12, r8
     3da:	0d ec       	ldi	r16, 0xCD	; 205
     3dc:	1c ec       	ldi	r17, 0xCC	; 204
     3de:	2c e4       	ldi	r18, 0x4C	; 76
     3e0:	3d e3       	ldi	r19, 0x3D	; 61
     3e2:	4d ec       	ldi	r20, 0xCD	; 205
     3e4:	5c ec       	ldi	r21, 0xCC	; 204
     3e6:	6c ec       	ldi	r22, 0xCC	; 204
     3e8:	7d e3       	ldi	r23, 0x3D	; 61
     3ea:	8f ed       	ldi	r24, 0xDF	; 223
	usbdbg_init();
     3ec:	92 e0       	ldi	r25, 0x02	; 2
	//uart_init();
	//USART0_Init ((unsigned int)(9600));
	pwm_init();
     3ee:	3b d1       	rcall	.+630    	; 0x666 <pid_init>
     3f0:	49 d4       	rcall	.+2194   	; 0xc84 <usbdbg_init>
	//pwm_set_top_t3(0x319);
	can_init(0,0);
     3f2:	90 d3       	rcall	.+1824   	; 0xb14 <pwm_init>
     3f4:	60 e0       	ldi	r22, 0x00	; 0
	timer1_init_ts();
     3f6:	70 e0       	ldi	r23, 0x00	; 0
     3f8:	80 e0       	ldi	r24, 0x00	; 0
	timer0_init_ts();
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	75 d2       	rcall	.+1258   	; 0x8e8 <can_init>
	//ADC
	adc_Free_running_init();
     3fe:	0d df       	rcall	.-486    	; 0x21a <timer1_init_ts>
     400:	24 df       	rcall	.-440    	; 0x24a <timer0_init_ts>
	ADMUX &= 0b11100000;
     402:	5d d1       	rcall	.+698    	; 0x6be <adc_Free_running_init>
     404:	ec e7       	ldi	r30, 0x7C	; 124
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	80 81       	ld	r24, Z
	ADMUX |= CH_ADC2;
     40a:	80 7e       	andi	r24, 0xE0	; 224
     40c:	80 83       	st	Z, r24
     40e:	80 81       	ld	r24, Z
	
	rgbled_init();
     410:	82 60       	ori	r24, 0x02	; 2
     412:	80 83       	st	Z, r24
	txFrame.id = MOTOR_CAN_ID;
     414:	e6 d3       	rcall	.+1996   	; 0xbe2 <rgbled_init>
     416:	e7 ef       	ldi	r30, 0xF7	; 247
     418:	f2 e0       	ldi	r31, 0x02	; 2
     41a:	80 e5       	ldi	r24, 0x50	; 80
     41c:	94 e0       	ldi	r25, 0x04	; 4
	txFrame.length = 8;
     41e:	91 83       	std	Z+1, r25	; 0x01
     420:	80 83       	st	Z, r24
	sei();
     422:	88 e0       	ldi	r24, 0x08	; 8
	
	rgbled_turn_on(LED_BLUE);
     424:	82 83       	std	Z+2, r24	; 0x02
     426:	78 94       	sei
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     428:	80 e8       	ldi	r24, 0x80	; 128
     42a:	e1 d3       	rcall	.+1986   	; 0xbee <rgbled_turn_on>
		//simple mode with pwm controlled by potentiometer /
	
		pot_val = (float)u16_ADC2_reg/1024 ;
		char buff1 [8];
		itoa(100*pot_val,buff1,10);
		printf("%s,\n",buff1);
     42c:	ce 01       	movw	r24, r28
	
	rgbled_turn_on(LED_BLUE);
	
    while (1){
		
		handle_motor_status_can_msg(&send_can, &ComValues);
     42e:	01 96       	adiw	r24, 0x01	; 1
     430:	7c 01       	movw	r14, r24
     432:	0a e0       	ldi	r16, 0x0A	; 10
     434:	11 e0       	ldi	r17, 0x01	; 1
     436:	64 e1       	ldi	r22, 0x14	; 20
		handle_can(&ComValues, &rxFrame);
     438:	71 e0       	ldi	r23, 0x01	; 1
     43a:	89 e2       	ldi	r24, 0x29	; 41
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	4c df       	rcall	.-360    	; 0x2d8 <handle_motor_status_can_msg>
		
	
		//simple mode with pwm controlled by potentiometer /
	
		pot_val = (float)u16_ADC2_reg/1024 ;
     440:	64 ed       	ldi	r22, 0xD4	; 212
     442:	72 e0       	ldi	r23, 0x02	; 2
     444:	84 e1       	ldi	r24, 0x14	; 20
     446:	91 e0       	ldi	r25, 0x01	; 1
     448:	0f df       	rcall	.-482    	; 0x268 <handle_can>
     44a:	60 91 27 01 	lds	r22, 0x0127	; 0x800127 <u16_ADC2_reg>
     44e:	70 91 28 01 	lds	r23, 0x0128	; 0x800128 <u16_ADC2_reg+0x1>
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	2c d5       	rcall	.+2648   	; 0xeb0 <__floatunsisf>
     458:	20 e0       	ldi	r18, 0x00	; 0
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	40 e8       	ldi	r20, 0x80	; 128
     45e:	5a e3       	ldi	r21, 0x3A	; 58
     460:	dd d5       	rcall	.+3002   	; 0x101c <__mulsf3>
     462:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <pot_val>
		char buff1 [8];
		itoa(100*pot_val,buff1,10);
     466:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <pot_val+0x1>
     46a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <pot_val+0x2>
     46e:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <pot_val+0x3>
     472:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <pot_val>
     476:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <pot_val+0x1>
     47a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <pot_val+0x2>
     47e:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <pot_val+0x3>
     482:	20 e0       	ldi	r18, 0x00	; 0
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	48 ec       	ldi	r20, 0xC8	; 200
     488:	52 e4       	ldi	r21, 0x42	; 66
     48a:	c8 d5       	rcall	.+2960   	; 0x101c <__mulsf3>
		printf("%s,\n",buff1);
     48c:	e0 d4       	rcall	.+2496   	; 0xe4e <__fixsfsi>
     48e:	dc 01       	movw	r26, r24
     490:	cb 01       	movw	r24, r22
     492:	4a e0       	ldi	r20, 0x0A	; 10
     494:	b7 01       	movw	r22, r14
     496:	25 d6       	rcall	.+3146   	; 0x10e2 <__itoa_ncheck>
     498:	ff 92       	push	r15
     49a:	ef 92       	push	r14
     49c:	1f 93       	push	r17
     49e:	0f 93       	push	r16
     4a0:	8d d6       	rcall	.+3354   	; 0x11bc <printf>
     4a2:	0f 90       	pop	r0
     4a4:	0f 90       	pop	r0
     4a6:	0f 90       	pop	r0
     4a8:	0f 90       	pop	r0
     4aa:	c5 cf       	rjmp	.-118    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>

000004ac <__vector_12>:
		
		
	}
}

ISR(TIMER1_COMPA_vect){// every 1ms
     4ac:	1f 92       	push	r1
     4ae:	0f 92       	push	r0
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	0f 92       	push	r0
     4b4:	11 24       	eor	r1, r1
     4b6:	0b b6       	in	r0, 0x3b	; 59
     4b8:	0f 92       	push	r0
     4ba:	2f 93       	push	r18
     4bc:	3f 93       	push	r19
     4be:	4f 93       	push	r20
     4c0:	5f 93       	push	r21
     4c2:	6f 93       	push	r22
     4c4:	7f 93       	push	r23
     4c6:	8f 93       	push	r24
     4c8:	9f 93       	push	r25
     4ca:	af 93       	push	r26
     4cc:	bf 93       	push	r27
     4ce:	ef 93       	push	r30
     4d0:	ff 93       	push	r31
	send_can = 1;
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <send_can>
	read_current = 1;
	handle_current_sensor(&f32_prev_current, u16_ADC3_reg);
     4d8:	60 91 25 01 	lds	r22, 0x0125	; 0x800125 <u16_ADC3_reg>
     4dc:	70 91 26 01 	lds	r23, 0x0126	; 0x800126 <u16_ADC3_reg+0x1>
     4e0:	8a e2       	ldi	r24, 0x2A	; 42
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	1d df       	rcall	.-454    	; 0x320 <handle_current_sensor>
	
}
     4e6:	ff 91       	pop	r31
     4e8:	ef 91       	pop	r30
     4ea:	bf 91       	pop	r27
     4ec:	af 91       	pop	r26
     4ee:	9f 91       	pop	r25
     4f0:	8f 91       	pop	r24
     4f2:	7f 91       	pop	r23
     4f4:	6f 91       	pop	r22
     4f6:	5f 91       	pop	r21
     4f8:	4f 91       	pop	r20
     4fa:	3f 91       	pop	r19
     4fc:	2f 91       	pop	r18
     4fe:	0f 90       	pop	r0
     500:	0b be       	out	0x3b, r0	; 59
     502:	0f 90       	pop	r0
     504:	0f be       	out	0x3f, r0	; 63
     506:	0f 90       	pop	r0
     508:	1f 90       	pop	r1
     50a:	18 95       	reti

0000050c <__vector_16>:

ISR(TIMER0_COMP_vect){ // every 100ms
     50c:	1f 92       	push	r1
     50e:	0f 92       	push	r0
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	0f 92       	push	r0
     514:	11 24       	eor	r1, r1
     516:	0b b6       	in	r0, 0x3b	; 59
     518:	0f 92       	push	r0
     51a:	cf 92       	push	r12
     51c:	df 92       	push	r13
     51e:	ef 92       	push	r14
     520:	ff 92       	push	r15
     522:	2f 93       	push	r18
     524:	3f 93       	push	r19
     526:	4f 93       	push	r20
     528:	5f 93       	push	r21
     52a:	6f 93       	push	r22
     52c:	7f 93       	push	r23
     52e:	8f 93       	push	r24
     530:	9f 93       	push	r25
     532:	af 93       	push	r26
     534:	bf 93       	push	r27
     536:	ef 93       	push	r30
     538:	ff 93       	push	r31
	controller(pot_val*20-10, f32_prev_current); // 
     53a:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <pot_val>
     53e:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <pot_val+0x1>
     542:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <pot_val+0x2>
     546:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <pot_val+0x3>
     54a:	c0 90 2a 01 	lds	r12, 0x012A	; 0x80012a <f32_prev_current>
     54e:	d0 90 2b 01 	lds	r13, 0x012B	; 0x80012b <f32_prev_current+0x1>
     552:	e0 90 2c 01 	lds	r14, 0x012C	; 0x80012c <f32_prev_current+0x2>
     556:	f0 90 2d 01 	lds	r15, 0x012D	; 0x80012d <f32_prev_current+0x3>
     55a:	20 e0       	ldi	r18, 0x00	; 0
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	40 ea       	ldi	r20, 0xA0	; 160
     560:	51 e4       	ldi	r21, 0x41	; 65
     562:	5c d5       	rcall	.+2744   	; 0x101c <__mulsf3>
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	40 e2       	ldi	r20, 0x20	; 32
     56a:	51 e4       	ldi	r21, 0x41	; 65
     56c:	9f d3       	rcall	.+1854   	; 0xcac <__subsf3>
     56e:	a7 01       	movw	r20, r14
     570:	96 01       	movw	r18, r12
     572:	af dd       	rcall	.-1186   	; 0xd2 <controller>
}
     574:	ff 91       	pop	r31
     576:	ef 91       	pop	r30
     578:	bf 91       	pop	r27
     57a:	af 91       	pop	r26
     57c:	9f 91       	pop	r25
     57e:	8f 91       	pop	r24
     580:	7f 91       	pop	r23
     582:	6f 91       	pop	r22
     584:	5f 91       	pop	r21
     586:	4f 91       	pop	r20
     588:	3f 91       	pop	r19
     58a:	2f 91       	pop	r18
     58c:	ff 90       	pop	r15
     58e:	ef 90       	pop	r14
     590:	df 90       	pop	r13
     592:	cf 90       	pop	r12
     594:	0f 90       	pop	r0
     596:	0b be       	out	0x3b, r0	; 59
     598:	0f 90       	pop	r0
     59a:	0f be       	out	0x3f, r0	; 63
     59c:	0f 90       	pop	r0
     59e:	1f 90       	pop	r1
     5a0:	18 95       	reti

000005a2 <__vector_25>:


ISR(ADC_vect)
{
     5a2:	1f 92       	push	r1
     5a4:	0f 92       	push	r0
     5a6:	0f b6       	in	r0, 0x3f	; 63
     5a8:	0f 92       	push	r0
     5aa:	11 24       	eor	r1, r1
     5ac:	0b b6       	in	r0, 0x3b	; 59
     5ae:	0f 92       	push	r0
     5b0:	2f 93       	push	r18
     5b2:	3f 93       	push	r19
     5b4:	4f 93       	push	r20
     5b6:	5f 93       	push	r21
     5b8:	6f 93       	push	r22
     5ba:	7f 93       	push	r23
     5bc:	8f 93       	push	r24
     5be:	9f 93       	push	r25
     5c0:	af 93       	push	r26
     5c2:	bf 93       	push	r27
     5c4:	ef 93       	push	r30
     5c6:	ff 93       	push	r31
	if (u8_ADC_mux == 3)
     5c8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <u8_ADC_mux>
     5cc:	83 30       	cpi	r24, 0x03	; 3
     5ce:	89 f4       	brne	.+34     	; 0x5f2 <__vector_25+0x50>
	{
		u16_ADC3_reg = (ADCL+(ADCH<<8)); // reading conversion result
     5d0:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     5d4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	98 2f       	mov	r25, r24
     5dc:	88 27       	eor	r24, r24
     5de:	82 0f       	add	r24, r18
     5e0:	91 1d       	adc	r25, r1
     5e2:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <u16_ADC3_reg+0x1>
     5e6:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <u16_ADC3_reg>
		u8_ADC_mux = 0;
     5ea:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <u8_ADC_mux>
	if (u8_ADC_mux == 2)
	{
		Set_ADC_Channel(CH_ADC3);
		u8_ADC_mux++ ;
	}
	if (u8_ADC_mux == 1)
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	1e c0       	rjmp	.+60     	; 0x62e <__vector_25+0x8c>
	if (u8_ADC_mux == 3)
	{
		u16_ADC3_reg = (ADCL+(ADCH<<8)); // reading conversion result
		u8_ADC_mux = 0;
	}
	if (u8_ADC_mux == 2)
     5f2:	82 30       	cpi	r24, 0x02	; 2
     5f4:	39 f4       	brne	.+14     	; 0x604 <__vector_25+0x62>
	{
		Set_ADC_Channel(CH_ADC3);
     5f6:	83 e0       	ldi	r24, 0x03	; 3
     5f8:	7e d0       	rcall	.+252    	; 0x6f6 <Set_ADC_Channel>
		u8_ADC_mux++ ;
     5fa:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <u8_ADC_mux>
     5fe:	8f 5f       	subi	r24, 0xFF	; 255
     600:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <u8_ADC_mux>
	}
	if (u8_ADC_mux == 1)
     604:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <u8_ADC_mux>
     608:	81 30       	cpi	r24, 0x01	; 1
     60a:	89 f4       	brne	.+34     	; 0x62e <__vector_25+0x8c>
	{
		u16_ADC2_reg = (ADCL+(ADCH<<8)); // reading conversion result
     60c:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     610:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	98 2f       	mov	r25, r24
     618:	88 27       	eor	r24, r24
     61a:	82 0f       	add	r24, r18
     61c:	91 1d       	adc	r25, r1
     61e:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <u16_ADC2_reg+0x1>
     622:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <u16_ADC2_reg>
		u8_ADC_mux++ ;
     626:	82 e0       	ldi	r24, 0x02	; 2
     628:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <u8_ADC_mux>
     62c:	09 c0       	rjmp	.+18     	; 0x640 <__vector_25+0x9e>
	}
	if (u8_ADC_mux == 0)
     62e:	81 11       	cpse	r24, r1
	{
		Set_ADC_Channel(CH_ADC2);
     630:	07 c0       	rjmp	.+14     	; 0x640 <__vector_25+0x9e>
     632:	82 e0       	ldi	r24, 0x02	; 2
		u8_ADC_mux++ ;
     634:	60 d0       	rcall	.+192    	; 0x6f6 <Set_ADC_Channel>
     636:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <u8_ADC_mux>
     63a:	8f 5f       	subi	r24, 0xFF	; 255
     63c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <u8_ADC_mux>
	}
}
     640:	ff 91       	pop	r31
     642:	ef 91       	pop	r30
     644:	bf 91       	pop	r27
     646:	af 91       	pop	r26
     648:	9f 91       	pop	r25
     64a:	8f 91       	pop	r24
     64c:	7f 91       	pop	r23
     64e:	6f 91       	pop	r22
     650:	5f 91       	pop	r21
     652:	4f 91       	pop	r20
     654:	3f 91       	pop	r19
     656:	2f 91       	pop	r18
     658:	0f 90       	pop	r0
     65a:	0b be       	out	0x3b, r0	; 59
     65c:	0f 90       	pop	r0
     65e:	0f be       	out	0x3f, r0	; 63
     660:	0f 90       	pop	r0
     662:	1f 90       	pop	r1
     664:	18 95       	reti

00000666 <pid_init>:
	output = propGain + intGain + derGain;
	//printf("Out: %d \n", output);
	return output;
}

void pid_init(Pid_t *PID, float t, float p, float i, float d){
     666:	8f 92       	push	r8
     668:	9f 92       	push	r9
     66a:	af 92       	push	r10
     66c:	bf 92       	push	r11
     66e:	cf 92       	push	r12
     670:	df 92       	push	r13
     672:	ef 92       	push	r14
     674:	ff 92       	push	r15
     676:	0f 93       	push	r16
     678:	1f 93       	push	r17
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	cd b7       	in	r28, 0x3d	; 61
     680:	de b7       	in	r29, 0x3e	; 62
     682:	fc 01       	movw	r30, r24
	PID->Kp = p;
     684:	04 87       	std	Z+12, r16	; 0x0c
     686:	15 87       	std	Z+13, r17	; 0x0d
     688:	26 87       	std	Z+14, r18	; 0x0e
     68a:	37 87       	std	Z+15, r19	; 0x0f
	PID->Ki = i;
     68c:	c4 8a       	std	Z+20, r12	; 0x14
     68e:	d5 8a       	std	Z+21, r13	; 0x15
     690:	e6 8a       	std	Z+22, r14	; 0x16
     692:	f7 8a       	std	Z+23, r15	; 0x17
	PID->Kd = d;
     694:	80 8a       	std	Z+16, r8	; 0x10
     696:	91 8a       	std	Z+17, r9	; 0x11
     698:	a2 8a       	std	Z+18, r10	; 0x12
     69a:	b3 8a       	std	Z+19, r11	; 0x13
	PID->timeStep = t;
     69c:	40 87       	std	Z+8, r20	; 0x08
     69e:	51 87       	std	Z+9, r21	; 0x09
     6a0:	62 87       	std	Z+10, r22	; 0x0a
     6a2:	73 87       	std	Z+11, r23	; 0x0b
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	1f 91       	pop	r17
     6aa:	0f 91       	pop	r16
     6ac:	ff 90       	pop	r15
     6ae:	ef 90       	pop	r14
     6b0:	df 90       	pop	r13
     6b2:	cf 90       	pop	r12
     6b4:	bf 90       	pop	r11
     6b6:	af 90       	pop	r10
     6b8:	9f 90       	pop	r9
     6ba:	8f 90       	pop	r8
     6bc:	08 95       	ret

000006be <adc_Free_running_init>:
	//Setting channel and type of reading, see enum in adc.h
	ADMUX &= 0b11100000;
	ADMUX |= (int8_t)channel;

	return (ADCL+(ADCH<<8));
}
     6be:	ec e7       	ldi	r30, 0x7C	; 124
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	80 81       	ld	r24, Z
     6c4:	80 64       	ori	r24, 0x40	; 64
     6c6:	80 83       	st	Z, r24
     6c8:	ea e7       	ldi	r30, 0x7A	; 122
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	80 81       	ld	r24, Z
     6ce:	84 60       	ori	r24, 0x04	; 4
     6d0:	80 83       	st	Z, r24
     6d2:	80 81       	ld	r24, Z
     6d4:	80 62       	ori	r24, 0x20	; 32
     6d6:	80 83       	st	Z, r24
     6d8:	80 81       	ld	r24, Z
     6da:	88 60       	ori	r24, 0x08	; 8
     6dc:	80 83       	st	Z, r24
     6de:	ab e7       	ldi	r26, 0x7B	; 123
     6e0:	b0 e0       	ldi	r27, 0x00	; 0
     6e2:	8c 91       	ld	r24, X
     6e4:	88 7f       	andi	r24, 0xF8	; 248
     6e6:	8c 93       	st	X, r24
     6e8:	80 81       	ld	r24, Z
     6ea:	80 68       	ori	r24, 0x80	; 128
     6ec:	80 83       	st	Z, r24
     6ee:	80 81       	ld	r24, Z
     6f0:	80 64       	ori	r24, 0x40	; 64
     6f2:	80 83       	st	Z, r24
     6f4:	08 95       	ret

000006f6 <Set_ADC_Channel>:

void Set_ADC_Channel(adc_channel_t channel)
{
	channel &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|channel; // clears the bottom 3 bits before ORing
     6f6:	ec e7       	ldi	r30, 0x7C	; 124
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	90 81       	ld	r25, Z
     6fc:	98 7f       	andi	r25, 0xF8	; 248
     6fe:	87 70       	andi	r24, 0x07	; 7
     700:	89 2b       	or	r24, r25
     702:	80 83       	st	Z, r24
     704:	08 95       	ret

00000706 <__vector_18>:

/**************************************************************************************************
*   CAN ISR - See 'can.h' Header file for Description
**************************************************************************************************/
ISR(CANIT_vect)
{
     706:	1f 92       	push	r1
     708:	0f 92       	push	r0
     70a:	0f b6       	in	r0, 0x3f	; 63
     70c:	0f 92       	push	r0
     70e:	11 24       	eor	r1, r1
     710:	0b b6       	in	r0, 0x3b	; 59
     712:	0f 92       	push	r0
     714:	2f 93       	push	r18
     716:	3f 93       	push	r19
     718:	4f 93       	push	r20
     71a:	5f 93       	push	r21
     71c:	6f 93       	push	r22
     71e:	8f 93       	push	r24
     720:	9f 93       	push	r25
     722:	af 93       	push	r26
     724:	bf 93       	push	r27
     726:	ef 93       	push	r30
     728:	ff 93       	push	r31
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	1f 92       	push	r1
     730:	cd b7       	in	r28, 0x3d	; 61
     732:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t mob_status;

	uint8_t mob_interrupts = CANSIT2;
     734:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>

	// TX
	if ((mob_interrupts & (1 << SIT0)) && (CANIE2 & (1 << ENMOB0))) {
     738:	80 ff       	sbrs	r24, 0
     73a:	47 c0       	rjmp	.+142    	; 0x7ca <__vector_18+0xc4>
     73c:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     740:	90 ff       	sbrs	r25, 0
     742:	43 c0       	rjmp	.+134    	; 0x7ca <__vector_18+0xc4>
		CANPAGE = (0x0 << MOBNB0); //Select TX Mob (Mob0)
     744:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		mob_status = CANSTMOB;
     748:	ee ee       	ldi	r30, 0xEE	; 238
     74a:	f0 e0       	ldi	r31, 0x00	; 0
     74c:	80 81       	ld	r24, Z
     74e:	89 83       	std	Y+1, r24	; 0x01
		CANSTMOB &= ~(1 << TXOK); //clear MB1, TX interrupt
     750:	80 81       	ld	r24, Z
     752:	8f 7b       	andi	r24, 0xBF	; 191
     754:	80 83       	st	Z, r24

		if (tx_on != tx_off) {
     756:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <tx_off>
     75a:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <tx_on>
     75e:	98 17       	cp	r25, r24
     760:	89 f1       	breq	.+98     	; 0x7c4 <__vector_18+0xbe>
			unsigned char pos;
			pos = tx_off & (TX_SIZE-1);
			//set ID
			CANIDT4 = tx_frames[pos].array[0];
     762:	8f 70       	andi	r24, 0x0F	; 15
     764:	2b e0       	ldi	r18, 0x0B	; 11
     766:	82 9f       	mul	r24, r18
     768:	c0 01       	movw	r24, r0
     76a:	11 24       	eor	r1, r1
     76c:	fc 01       	movw	r30, r24
     76e:	ec 51       	subi	r30, 0x1C	; 28
     770:	fe 4f       	sbci	r31, 0xFE	; 254
     772:	20 81       	ld	r18, Z
     774:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			CANIDT2 = tx_frames[pos].array[0];
     778:	20 81       	ld	r18, Z
     77a:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			CANIDT1 = tx_frames[pos].array[1];
     77e:	21 81       	ldd	r18, Z+1	; 0x01
     780:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

			//program data registers - auto increment CANMSG
			CANMSG = tx_frames[pos].data[0];
     784:	23 81       	ldd	r18, Z+3	; 0x03
     786:	aa ef       	ldi	r26, 0xFA	; 250
     788:	b0 e0       	ldi	r27, 0x00	; 0
     78a:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[1];
     78c:	24 81       	ldd	r18, Z+4	; 0x04
     78e:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[2];
     790:	25 81       	ldd	r18, Z+5	; 0x05
     792:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[3];
     794:	26 81       	ldd	r18, Z+6	; 0x06
     796:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[4];
     798:	27 81       	ldd	r18, Z+7	; 0x07
     79a:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[5];
     79c:	20 85       	ldd	r18, Z+8	; 0x08
     79e:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[6];
     7a0:	21 85       	ldd	r18, Z+9	; 0x09
     7a2:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[7];
     7a4:	22 85       	ldd	r18, Z+10	; 0x0a
     7a6:	2c 93       	st	X, r18

			//set length and request send
			CANCDMOB = (1 << CONMOB0) | tx_frames[pos].length;
     7a8:	fc 01       	movw	r30, r24
     7aa:	ea 51       	subi	r30, 0x1A	; 26
     7ac:	fe 4f       	sbci	r31, 0xFE	; 254
     7ae:	80 81       	ld	r24, Z
     7b0:	8f 70       	andi	r24, 0x0F	; 15
     7b2:	80 64       	ori	r24, 0x40	; 64
     7b4:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
			tx_off++;
     7b8:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <tx_off>
     7bc:	8f 5f       	subi	r24, 0xFF	; 255
     7be:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <tx_off>
     7c2:	7d c0       	rjmp	.+250    	; 0x8be <__vector_18+0x1b8>
		} else {
			tx_busy = 0;
     7c4:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <tx_busy>
     7c8:	7a c0       	rjmp	.+244    	; 0x8be <__vector_18+0x1b8>
		}
	}
	// RX
	else if ((mob_interrupts & (1 << SIT1)) && (CANIE2 & (1 << ENMOB1))) {
     7ca:	81 ff       	sbrs	r24, 1
     7cc:	78 c0       	rjmp	.+240    	; 0x8be <__vector_18+0x1b8>
     7ce:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     7d2:	81 ff       	sbrs	r24, 1
     7d4:	74 c0       	rjmp	.+232    	; 0x8be <__vector_18+0x1b8>
		//Select RX Mob (Mob1)
		CANPAGE = (0x1 << MOBNB0);
     7d6:	80 e1       	ldi	r24, 0x10	; 16
     7d8:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		if (((rx_on - rx_off) & RX_ABS_MASK) < RX_SIZE) {
     7dc:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <rx_on>
     7e0:	28 2f       	mov	r18, r24
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <rx_off>
     7e8:	29 1b       	sub	r18, r25
     7ea:	31 09       	sbc	r19, r1
     7ec:	2f 77       	andi	r18, 0x7F	; 127
     7ee:	33 27       	eor	r19, r19
     7f0:	20 31       	cpi	r18, 0x10	; 16
     7f2:	31 05       	cpc	r19, r1
     7f4:	0c f0       	brlt	.+2      	; 0x7f8 <__vector_18+0xf2>
     7f6:	58 c0       	rjmp	.+176    	; 0x8a8 <__vector_18+0x1a2>
			unsigned char pos;
			pos = rx_on & (RX_SIZE-1);
			//Read length
			rx_frames[pos].length = CANCDMOB & 0x0F;
     7f8:	e8 2f       	mov	r30, r24
     7fa:	ef 70       	andi	r30, 0x0F	; 15
     7fc:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     800:	2e 2f       	mov	r18, r30
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	4b e0       	ldi	r20, 0x0B	; 11
     806:	e4 9f       	mul	r30, r20
     808:	f0 01       	movw	r30, r0
     80a:	11 24       	eor	r1, r1
     80c:	ec 5c       	subi	r30, 0xCC	; 204
     80e:	fe 4f       	sbci	r31, 0xFE	; 254
     810:	9f 70       	andi	r25, 0x0F	; 15
     812:	42 81       	ldd	r20, Z+2	; 0x02
     814:	40 7f       	andi	r20, 0xF0	; 240
     816:	94 2b       	or	r25, r20
     818:	92 83       	std	Z+2, r25	; 0x02
			//Read ID
			rx_frames[pos].array[0] = (CANIDT2 & 0xE0) | (CANIDT4 & 0x07);
     81a:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     81e:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     822:	40 7e       	andi	r20, 0xE0	; 224
     824:	97 70       	andi	r25, 0x07	; 7
     826:	94 2b       	or	r25, r20
     828:	90 83       	st	Z, r25
			rx_frames[pos].array[1] = CANIDT1;
     82a:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     82e:	91 83       	std	Z+1, r25	; 0x01

			//read data registers - auto increment CANMSG
			rx_frames[pos].data[0] = CANMSG;
     830:	aa ef       	ldi	r26, 0xFA	; 250
     832:	b0 e0       	ldi	r27, 0x00	; 0
     834:	9c 91       	ld	r25, X
     836:	93 83       	std	Z+3, r25	; 0x03
			rx_frames[pos].data[1] = CANMSG;
     838:	9c 91       	ld	r25, X
     83a:	94 83       	std	Z+4, r25	; 0x04
			rx_frames[pos].data[2] = CANMSG;
     83c:	9c 91       	ld	r25, X
     83e:	95 83       	std	Z+5, r25	; 0x05
			rx_frames[pos].data[3] = CANMSG;
     840:	9c 91       	ld	r25, X
     842:	96 83       	std	Z+6, r25	; 0x06
			rx_frames[pos].data[4] = CANMSG;
     844:	9c 91       	ld	r25, X
     846:	97 83       	std	Z+7, r25	; 0x07
			rx_frames[pos].data[5] = CANMSG;
     848:	9c 91       	ld	r25, X
     84a:	90 87       	std	Z+8, r25	; 0x08
			rx_frames[pos].data[6] = CANMSG;
     84c:	9c 91       	ld	r25, X
     84e:	91 87       	std	Z+9, r25	; 0x09
			rx_frames[pos].data[7] = CANMSG;
     850:	9c 91       	ld	r25, X
     852:	92 87       	std	Z+10, r25	; 0x0a
			rx_on++;
     854:	8f 5f       	subi	r24, 0xFF	; 255
     856:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <rx_on>

			// Reset if reset can message
			if(rx_frames[pos].id == 0x000 && rx_frames[pos].data[0] == 0x03){
     85a:	40 81       	ld	r20, Z
     85c:	42 95       	swap	r20
     85e:	46 95       	lsr	r20
     860:	47 70       	andi	r20, 0x07	; 7
     862:	51 81       	ldd	r21, Z+1	; 0x01
     864:	65 2f       	mov	r22, r21
     866:	66 0f       	add	r22, r22
     868:	66 0f       	add	r22, r22
     86a:	66 0f       	add	r22, r22
     86c:	86 2f       	mov	r24, r22
     86e:	84 2b       	or	r24, r20
     870:	95 2f       	mov	r25, r21
     872:	92 95       	swap	r25
     874:	96 95       	lsr	r25
     876:	97 70       	andi	r25, 0x07	; 7
     878:	89 2b       	or	r24, r25
     87a:	b1 f4       	brne	.+44     	; 0x8a8 <__vector_18+0x1a2>
     87c:	8b e0       	ldi	r24, 0x0B	; 11
     87e:	82 9f       	mul	r24, r18
     880:	f0 01       	movw	r30, r0
     882:	83 9f       	mul	r24, r19
     884:	f0 0d       	add	r31, r0
     886:	11 24       	eor	r1, r1
     888:	ec 5c       	subi	r30, 0xCC	; 204
     88a:	fe 4f       	sbci	r31, 0xFE	; 254
     88c:	83 81       	ldd	r24, Z+3	; 0x03
     88e:	83 30       	cpi	r24, 0x03	; 3
     890:	59 f4       	brne	.+22     	; 0x8a8 <__vector_18+0x1a2>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     892:	98 e0       	ldi	r25, 0x08	; 8
     894:	88 e1       	ldi	r24, 0x18	; 24
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	f8 94       	cli
     89a:	a8 95       	wdr
     89c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     8a6:	ff cf       	rjmp	.-2      	; 0x8a6 <__vector_18+0x1a0>
				while(1); //wait for watchdog
			}
		}

		// Clear irq
		mob_status = CANSTMOB;
     8a8:	ee ee       	ldi	r30, 0xEE	; 238
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	80 81       	ld	r24, Z
     8ae:	89 83       	std	Y+1, r24	; 0x01
		(void)mob_status;
     8b0:	89 81       	ldd	r24, Y+1	; 0x01

		CANSTMOB &= ~(1 << RXOK);
     8b2:	80 81       	ld	r24, Z
     8b4:	8f 7d       	andi	r24, 0xDF	; 223
     8b6:	80 83       	st	Z, r24
		CANCDMOB = (1 << CONMOB1);			//Set Mob 1 as RX
     8b8:	80 e8       	ldi	r24, 0x80	; 128
     8ba:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	}
}
     8be:	0f 90       	pop	r0
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	ff 91       	pop	r31
     8c6:	ef 91       	pop	r30
     8c8:	bf 91       	pop	r27
     8ca:	af 91       	pop	r26
     8cc:	9f 91       	pop	r25
     8ce:	8f 91       	pop	r24
     8d0:	6f 91       	pop	r22
     8d2:	5f 91       	pop	r21
     8d4:	4f 91       	pop	r20
     8d6:	3f 91       	pop	r19
     8d8:	2f 91       	pop	r18
     8da:	0f 90       	pop	r0
     8dc:	0b be       	out	0x3b, r0	; 59
     8de:	0f 90       	pop	r0
     8e0:	0f be       	out	0x3f, r0	; 63
     8e2:	0f 90       	pop	r0
     8e4:	1f 90       	pop	r1
     8e6:	18 95       	reti

000008e8 <can_init>:


void can_init(uint16_t accept_mask_id, uint16_t accept_tag_id) {
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
	// Reset CAN controller
	CANGCON = (1 << SWRES);
     8ec:	e8 ed       	ldi	r30, 0xD8	; 216
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	21 e0       	ldi	r18, 0x01	; 1
     8f2:	20 83       	st	Z, r18

	CANBT1 = (BRP_VALUE - 1) << 1;
     8f4:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = ((SJW_VALUE - 1) << 5) | ((PROP_SEG - 1) << 1);
     8f8:	2c e0       	ldi	r18, 0x0C	; 12
     8fa:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = ((PHASE_SEG_2 - 1) << 4) | ((PHASE_SEG_1 - 1) << 1) | 1;
     8fe:	27 e3       	ldi	r18, 0x37	; 55
     900:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	CANTIM = 0;
     904:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
     908:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	CANTTC = 0;
     90c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     910:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	CANHPMOB = 0;
     914:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	CANTCON = 0;
     918:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	// Switch to Mob 0 access
	CANPAGE = (0x0 << MOBNB0);
     91c:	cd ee       	ldi	r28, 0xED	; 237
     91e:	d0 e0       	ldi	r29, 0x00	; 0
     920:	18 82       	st	Y, r1
	CANSTMOB = 0;
     922:	ae ee       	ldi	r26, 0xEE	; 238
     924:	b0 e0       	ldi	r27, 0x00	; 0
     926:	1c 92       	st	X, r1

	// Switch to Mob 1 access
	CANPAGE = (0x1 << MOBNB0);
     928:	20 e1       	ldi	r18, 0x10	; 16
     92a:	28 83       	st	Y, r18
	CANSTMOB = 0;
     92c:	1c 92       	st	X, r1
	CANIDM4 = 0;
     92e:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANIDM2 = (accept_mask_id << 5) & 0xFF;
     932:	28 2f       	mov	r18, r24
     934:	22 95       	swap	r18
     936:	22 0f       	add	r18, r18
     938:	20 7e       	andi	r18, 0xE0	; 224
     93a:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = (accept_mask_id >> 3) & 0xFF;
     93e:	96 95       	lsr	r25
     940:	87 95       	ror	r24
     942:	96 95       	lsr	r25
     944:	87 95       	ror	r24
     946:	96 95       	lsr	r25
     948:	87 95       	ror	r24
     94a:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDT4 = 0;
     94e:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT2 = (accept_tag_id << 5) & 0xFF;
     952:	86 2f       	mov	r24, r22
     954:	82 95       	swap	r24
     956:	88 0f       	add	r24, r24
     958:	80 7e       	andi	r24, 0xE0	; 224
     95a:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (accept_tag_id >> 3) & 0xFF;
     95e:	76 95       	lsr	r23
     960:	67 95       	ror	r22
     962:	76 95       	lsr	r23
     964:	67 95       	ror	r22
     966:	76 95       	lsr	r23
     968:	67 95       	ror	r22
     96a:	60 93 f3 00 	sts	0x00F3, r22	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

	// Set Mob 1 as RX
	CANCDMOB = (1 << CONMOB1);
     96e:	80 e8       	ldi	r24, 0x80	; 128
     970:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	// Enable Mob 0 and 1
	CANEN2 = (1 << ENMOB1) | (1 << ENMOB0);
     974:	83 e0       	ldi	r24, 0x03	; 3
     976:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	// Enable Mob 0 and 1 Interrupt
	CANIE2 = (1 << ENMOB1) | (1 << ENMOB0);
     97a:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	// Enable TX and RX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);	
     97e:	80 eb       	ldi	r24, 0xB0	; 176
     980:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>

	// Enable CAN controller
	CANGCON = (1 << ENASTB);
     984:	82 e0       	ldi	r24, 0x02	; 2
     986:	80 83       	st	Z, r24

	reset = 0;
     988:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <reset>
}
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	08 95       	ret

00000992 <can_read_message_if_new>:

bool can_read_message_if_new(CanMessage_t* message) {
     992:	cf 93       	push	r28
     994:	df 93       	push	r29
     996:	ec 01       	movw	r28, r24
	// Check if there is a new message
	if (rx_on == rx_off) {
     998:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <rx_off>
     99c:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <rx_on>
     9a0:	24 17       	cp	r18, r20
     9a2:	89 f1       	breq	.+98     	; 0xa06 <can_read_message_if_new+0x74>
     9a4:	a4 2f       	mov	r26, r20
     9a6:	af 70       	andi	r26, 0x0F	; 15
	}

	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
     9a8:	8b e0       	ldi	r24, 0x0B	; 11
     9aa:	a8 9f       	mul	r26, r24
     9ac:	b0 01       	movw	r22, r0
     9ae:	11 24       	eor	r1, r1
     9b0:	fb 01       	movw	r30, r22
     9b2:	ec 5c       	subi	r30, 0xCC	; 204
     9b4:	fe 4f       	sbci	r31, 0xFE	; 254
     9b6:	20 81       	ld	r18, Z
     9b8:	22 95       	swap	r18
     9ba:	26 95       	lsr	r18
     9bc:	27 70       	andi	r18, 0x07	; 7
     9be:	31 81       	ldd	r19, Z+1	; 0x01
     9c0:	53 2f       	mov	r21, r19
     9c2:	55 0f       	add	r21, r21
     9c4:	55 0f       	add	r21, r21
     9c6:	55 0f       	add	r21, r21
     9c8:	25 2b       	or	r18, r21
     9ca:	32 95       	swap	r19
     9cc:	36 95       	lsr	r19
     9ce:	37 70       	andi	r19, 0x07	; 7
     9d0:	28 83       	st	Y, r18
     9d2:	39 83       	std	Y+1, r19	; 0x01
	message->length = frame->length;
     9d4:	fb 01       	movw	r30, r22
     9d6:	ea 5c       	subi	r30, 0xCA	; 202
     9d8:	fe 4f       	sbci	r31, 0xFE	; 254
     9da:	20 81       	ld	r18, Z
     9dc:	2f 70       	andi	r18, 0x0F	; 15
     9de:	2a 83       	std	Y+2, r18	; 0x02
	for (int i = 0; i < message->length; i++) {
     9e0:	22 23       	and	r18, r18
     9e2:	99 f0       	breq	.+38     	; 0xa0a <can_read_message_if_new+0x78>
     9e4:	db 01       	movw	r26, r22
     9e6:	a9 5c       	subi	r26, 0xC9	; 201
     9e8:	be 4f       	sbci	r27, 0xFE	; 254
     9ea:	fe 01       	movw	r30, r28
     9ec:	33 96       	adiw	r30, 0x03	; 3
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	2d 5f       	subi	r18, 0xFD	; 253
     9f2:	3f 4f       	sbci	r19, 0xFF	; 255
     9f4:	ce 01       	movw	r24, r28
     9f6:	82 0f       	add	r24, r18
     9f8:	93 1f       	adc	r25, r19
		message->data.u8[i] = frame->data[i];
     9fa:	2d 91       	ld	r18, X+
     9fc:	21 93       	st	Z+, r18
	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
	message->length = frame->length;
	for (int i = 0; i < message->length; i++) {
     9fe:	e8 17       	cp	r30, r24
     a00:	f9 07       	cpc	r31, r25
     a02:	d9 f7       	brne	.-10     	; 0x9fa <can_read_message_if_new+0x68>
     a04:	02 c0       	rjmp	.+4      	; 0xa0a <can_read_message_if_new+0x78>
}

bool can_read_message_if_new(CanMessage_t* message) {
	// Check if there is a new message
	if (rx_on == rx_off) {
		return false;
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	04 c0       	rjmp	.+8      	; 0xa12 <can_read_message_if_new+0x80>
		message->data.u8[i] = frame->data[i];
	}

	// Advance to next can message
	if (rx_on != rx_off) {
		rx_off++;
     a0a:	4f 5f       	subi	r20, 0xFF	; 255
     a0c:	40 93 30 01 	sts	0x0130, r20	; 0x800130 <rx_off>
	}

	return true;
     a10:	81 e0       	ldi	r24, 0x01	; 1
}
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	08 95       	ret

00000a18 <can_send_message>:

bool can_send_message(CanMessage_t* message) {
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	fc 01       	movw	r30, r24
	bool result = false;

	CANGIE &= ~(1 << ENIT);
     a1e:	ab ed       	ldi	r26, 0xDB	; 219
     a20:	b0 e0       	ldi	r27, 0x00	; 0
     a22:	8c 91       	ld	r24, X
     a24:	8f 77       	andi	r24, 0x7F	; 127
     a26:	8c 93       	st	X, r24

	if (!tx_busy) {
     a28:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <tx_busy>
     a2c:	81 11       	cpse	r24, r1
     a2e:	27 c0       	rjmp	.+78     	; 0xa7e <can_send_message+0x66>
		// Switch to Mob 0 access
		CANPAGE = 0 << 4;
     a30:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		// Set ID
		CANIDT2 = message->id << 5;
     a34:	80 81       	ld	r24, Z
     a36:	82 95       	swap	r24
     a38:	88 0f       	add	r24, r24
     a3a:	80 7e       	andi	r24, 0xE0	; 224
     a3c:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT1 = message->id >> 3;
     a40:	80 81       	ld	r24, Z
     a42:	91 81       	ldd	r25, Z+1	; 0x01
     a44:	96 95       	lsr	r25
     a46:	87 95       	ror	r24
     a48:	96 95       	lsr	r25
     a4a:	87 95       	ror	r24
     a4c:	96 95       	lsr	r25
     a4e:	87 95       	ror	r24
     a50:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     a54:	df 01       	movw	r26, r30
     a56:	13 96       	adiw	r26, 0x03	; 3
     a58:	9f 01       	movw	r18, r30
     a5a:	25 5f       	subi	r18, 0xF5	; 245
     a5c:	3f 4f       	sbci	r19, 0xFF	; 255

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
     a5e:	ca ef       	ldi	r28, 0xFA	; 250
     a60:	d0 e0       	ldi	r29, 0x00	; 0
     a62:	9d 91       	ld	r25, X+
     a64:	98 83       	st	Y, r25
		// Set ID
		CANIDT2 = message->id << 5;
		CANIDT1 = message->id >> 3;

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
     a66:	a2 17       	cp	r26, r18
     a68:	b3 07       	cpc	r27, r19
     a6a:	d9 f7       	brne	.-10     	; 0xa62 <can_send_message+0x4a>
			CANMSG = message->data.u8[i];
		}
		
		result = true;
		tx_busy = 1;
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <tx_busy>

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
     a72:	82 81       	ldd	r24, Z+2	; 0x02
     a74:	80 64       	ori	r24, 0x40	; 64
     a76:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
		}
		
		result = true;
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	43 c0       	rjmp	.+134    	; 0xb04 <can_send_message+0xec>
		tx_busy = 1;

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
	}
	else if (TX_SIZE - ((tx_on - tx_off) & TX_ABS_MASK)) {
     a7e:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <tx_on>
     a82:	82 2f       	mov	r24, r18
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <tx_off>
     a8a:	83 1b       	sub	r24, r19
     a8c:	91 09       	sbc	r25, r1
     a8e:	8f 77       	andi	r24, 0x7F	; 127
     a90:	99 27       	eor	r25, r25
     a92:	40 97       	sbiw	r24, 0x10	; 16
     a94:	b1 f1       	breq	.+108    	; 0xb02 <can_send_message+0xea>
		// Copy data into TX buffer
		tx_frames[tx_on & (TX_SIZE-1)].id = message->id;
     a96:	a2 2f       	mov	r26, r18
     a98:	af 70       	andi	r26, 0x0F	; 15
     a9a:	8b e0       	ldi	r24, 0x0B	; 11
     a9c:	a8 9f       	mul	r26, r24
     a9e:	d0 01       	movw	r26, r0
     aa0:	11 24       	eor	r1, r1
     aa2:	ed 01       	movw	r28, r26
     aa4:	cc 51       	subi	r28, 0x1C	; 28
     aa6:	de 4f       	sbci	r29, 0xFE	; 254
     aa8:	80 81       	ld	r24, Z
     aaa:	98 2f       	mov	r25, r24
     aac:	92 95       	swap	r25
     aae:	99 0f       	add	r25, r25
     ab0:	90 7e       	andi	r25, 0xE0	; 224
     ab2:	88 81       	ld	r24, Y
     ab4:	8f 71       	andi	r24, 0x1F	; 31
     ab6:	89 2b       	or	r24, r25
     ab8:	88 83       	st	Y, r24
     aba:	80 81       	ld	r24, Z
     abc:	98 2f       	mov	r25, r24
     abe:	96 95       	lsr	r25
     ac0:	96 95       	lsr	r25
     ac2:	96 95       	lsr	r25
     ac4:	89 81       	ldd	r24, Y+1	; 0x01
     ac6:	80 7e       	andi	r24, 0xE0	; 224
     ac8:	89 2b       	or	r24, r25
     aca:	89 83       	std	Y+1, r24	; 0x01
     acc:	91 81       	ldd	r25, Z+1	; 0x01
     ace:	92 95       	swap	r25
     ad0:	99 0f       	add	r25, r25
     ad2:	90 7e       	andi	r25, 0xE0	; 224
     ad4:	8f 71       	andi	r24, 0x1F	; 31
     ad6:	89 2b       	or	r24, r25
     ad8:	89 83       	std	Y+1, r24	; 0x01
		tx_frames[tx_on & (TX_SIZE-1)].length = message->length;
     ada:	82 81       	ldd	r24, Z+2	; 0x02
     adc:	98 2f       	mov	r25, r24
     ade:	9f 70       	andi	r25, 0x0F	; 15
     ae0:	8a 81       	ldd	r24, Y+2	; 0x02
     ae2:	80 7f       	andi	r24, 0xF0	; 240
     ae4:	89 2b       	or	r24, r25
     ae6:	8a 83       	std	Y+2, r24	; 0x02
		memcpy(tx_frames[tx_on & (TX_SIZE-1)].data, &message->data, CAN_FRAME_DATA_MAX_LENGTH);
     ae8:	a9 51       	subi	r26, 0x19	; 25
     aea:	be 4f       	sbci	r27, 0xFE	; 254
     aec:	33 96       	adiw	r30, 0x03	; 3
     aee:	88 e0       	ldi	r24, 0x08	; 8
     af0:	01 90       	ld	r0, Z+
     af2:	0d 92       	st	X+, r0
     af4:	8a 95       	dec	r24
     af6:	e1 f7       	brne	.-8      	; 0xaf0 <can_send_message+0xd8>

		/*for (int i = 0; i < 8; i++) {
			tx_frames[tx_on & (TX_SIZE-1)].data[i] = message->data.u8[i];
		}*/

		tx_on++;
     af8:	2f 5f       	subi	r18, 0xFF	; 255
     afa:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <tx_on>
		result = true;
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	01 c0       	rjmp	.+2      	; 0xb04 <can_send_message+0xec>

	return true;
}

bool can_send_message(CanMessage_t* message) {
	bool result = false;
     b02:	80 e0       	ldi	r24, 0x00	; 0

		tx_on++;
		result = true;
	}

	CANGIE |= (1 << ENIT);
     b04:	eb ed       	ldi	r30, 0xDB	; 219
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	90 81       	ld	r25, Z
     b0a:	90 68       	ori	r25, 0x80	; 128
     b0c:	90 83       	st	Z, r25

	return result;
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	08 95       	ret

00000b14 <pwm_init>:
#include "pwm.h"

#include <avr/interrupt.h>
#include <avr/io.h>

void pwm_init(void){
     b14:	0f 93       	push	r16
     b16:	1f 93       	push	r17
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
	
	//Set pwm_pins as output;
	PORTE &= ~((1<<PE3)|(1<<PE4)|(1<<PE5));
     b1c:	8e b1       	in	r24, 0x0e	; 14
     b1e:	87 7c       	andi	r24, 0xC7	; 199
     b20:	8e b9       	out	0x0e, r24	; 14
	DDRE |= (1<<PE3)|(1<<PE4)|(1<<PE5);
     b22:	8d b1       	in	r24, 0x0d	; 13
     b24:	88 63       	ori	r24, 0x38	; 56
     b26:	8d b9       	out	0x0d, r24	; 13
	
	PORTB &= ~(1<<PB4);
     b28:	2c 98       	cbi	0x05, 4	; 5
	DDRB |= (1<<PB4);
     b2a:	24 9a       	sbi	0x04, 4	; 4
	
	//Timer 3 fast pwm, mode 14, TOP at ICR
	TCCR3B |= (1<<WGM33)|(1<<WGM32);
     b2c:	a1 e9       	ldi	r26, 0x91	; 145
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	8c 91       	ld	r24, X
     b32:	88 61       	ori	r24, 0x18	; 24
     b34:	8c 93       	st	X, r24
	TCCR3A |= (1<<WGM31);
     b36:	e0 e9       	ldi	r30, 0x90	; 144
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	80 81       	ld	r24, Z
     b3c:	82 60       	ori	r24, 0x02	; 2
     b3e:	80 83       	st	Z, r24
	TCCR3A &= ~(1<<WGM30);
     b40:	80 81       	ld	r24, Z
     b42:	8e 7f       	andi	r24, 0xFE	; 254
     b44:	80 83       	st	Z, r24
	
	//Timer 2 fast pwm, mode 3, Top at 0xFF
	TCCR2A |= (1<<WGM21)|(1<<WGM20);
     b46:	c0 eb       	ldi	r28, 0xB0	; 176
     b48:	d0 e0       	ldi	r29, 0x00	; 0
     b4a:	88 81       	ld	r24, Y
     b4c:	88 64       	ori	r24, 0x48	; 72
     b4e:	88 83       	st	Y, r24

	// Non inverted PWM for A
	TCCR3A |= (1<<COM3A1);
     b50:	80 81       	ld	r24, Z
     b52:	80 68       	ori	r24, 0x80	; 128
     b54:	80 83       	st	Z, r24
	TCCR3A &= ~(1<<COM3A0);
     b56:	80 81       	ld	r24, Z
     b58:	8f 7b       	andi	r24, 0xBF	; 191
     b5a:	80 83       	st	Z, r24
	
	// Inverted PWM for B
	TCCR3A |= (1<<COM3B1);
     b5c:	80 81       	ld	r24, Z
     b5e:	80 62       	ori	r24, 0x20	; 32
     b60:	80 83       	st	Z, r24
	TCCR3A |= (1<<COM3B0);
     b62:	80 81       	ld	r24, Z
     b64:	80 61       	ori	r24, 0x10	; 16
     b66:	80 83       	st	Z, r24
	
	TCCR2A |= (1<<COM2A1);
     b68:	88 81       	ld	r24, Y
     b6a:	80 62       	ori	r24, 0x20	; 32
     b6c:	88 83       	st	Y, r24
	TCCR2A &=  ~((1<<COM2A0));
     b6e:	88 81       	ld	r24, Y
     b70:	8f 7e       	andi	r24, 0xEF	; 239
     b72:	88 83       	st	Y, r24
	
	//Set prescale clk/1 for timer 3
	
	TCCR3B |= (1<<CS30);
     b74:	8c 91       	ld	r24, X
     b76:	81 60       	ori	r24, 0x01	; 1
     b78:	8c 93       	st	X, r24
	TCCR3B &= ~((1<<CS32)|(1<<CS31));
     b7a:	8c 91       	ld	r24, X
     b7c:	89 7f       	andi	r24, 0xF9	; 249
     b7e:	8c 93       	st	X, r24
	
	//Set top value for timer 3
	ICR3 = 0x199; //20kHz
     b80:	e6 e9       	ldi	r30, 0x96	; 150
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	89 e9       	ldi	r24, 0x99	; 153
     b86:	91 e0       	ldi	r25, 0x01	; 1
     b88:	91 83       	std	Z+1, r25	; 0x01
     b8a:	80 83       	st	Z, r24
	
	//Set off 
	OCR3A = 0;
     b8c:	c8 e9       	ldi	r28, 0x98	; 152
     b8e:	d0 e0       	ldi	r29, 0x00	; 0
     b90:	19 82       	std	Y+1, r1	; 0x01
     b92:	18 82       	st	Y, r1
	OCR3B = 0;
     b94:	0a e9       	ldi	r16, 0x9A	; 154
     b96:	10 e0       	ldi	r17, 0x00	; 0
     b98:	d8 01       	movw	r26, r16
     b9a:	11 96       	adiw	r26, 0x01	; 1
     b9c:	1c 92       	st	X, r1
     b9e:	1e 92       	st	-X, r1
	OCR3C = 0;
     ba0:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
     ba4:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	OCR2A = 0;	
     ba8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	
	OCR3A = (int)((0.5)*ICR3) ; //PWM_PE3 (non inverted)
     bac:	60 81       	ld	r22, Z
     bae:	71 81       	ldd	r23, Z+1	; 0x01
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	7d d1       	rcall	.+762    	; 0xeb0 <__floatunsisf>
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	40 e0       	ldi	r20, 0x00	; 0
     bbc:	5f e3       	ldi	r21, 0x3F	; 63
     bbe:	2e d2       	rcall	.+1116   	; 0x101c <__mulsf3>
     bc0:	46 d1       	rcall	.+652    	; 0xe4e <__fixsfsi>
     bc2:	79 83       	std	Y+1, r23	; 0x01
     bc4:	68 83       	st	Y, r22
	OCR3B = OCR3A ; //PWM_PE4 (inverted)
     bc6:	88 81       	ld	r24, Y
     bc8:	99 81       	ldd	r25, Y+1	; 0x01
     bca:	f8 01       	movw	r30, r16
     bcc:	91 83       	std	Z+1, r25	; 0x01
     bce:	80 83       	st	Z, r24
}
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	08 95       	ret

00000bda <rgbled_turn_off>:
	DDRB |= LED_ALL;
	rgbled_turn_off(LED_ALL);
}

void rgbled_turn_off(RgbLedColor_t color) {
	PORTB |= color;
     bda:	95 b1       	in	r25, 0x05	; 5
     bdc:	89 2b       	or	r24, r25
     bde:	85 b9       	out	0x05, r24	; 5
     be0:	08 95       	ret

00000be2 <rgbled_init>:
#include "rgbled.h"
#include <avr/io.h>


void rgbled_init() {
	DDRB |= LED_ALL;
     be2:	84 b1       	in	r24, 0x04	; 4
     be4:	80 6e       	ori	r24, 0xE0	; 224
     be6:	84 b9       	out	0x04, r24	; 4
	rgbled_turn_off(LED_ALL);
     be8:	80 ee       	ldi	r24, 0xE0	; 224
     bea:	f7 cf       	rjmp	.-18     	; 0xbda <rgbled_turn_off>
     bec:	08 95       	ret

00000bee <rgbled_turn_on>:
void rgbled_turn_off(RgbLedColor_t color) {
	PORTB |= color;
}

void rgbled_turn_on(RgbLedColor_t color) {
	PORTB &= ~color;
     bee:	95 b1       	in	r25, 0x05	; 5
     bf0:	80 95       	com	r24
     bf2:	98 23       	and	r25, r24
     bf4:	95 b9       	out	0x05, r25	; 5
     bf6:	08 95       	ret

00000bf8 <__vector_17>:

uint16_t timer_elapsed_ms(timer_t timer) {
	return elapsed_microseconds[timer] / 1000;
}

ISR(TIMER0_OVF_vect) {
     bf8:	1f 92       	push	r1
     bfa:	0f 92       	push	r0
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	0f 92       	push	r0
     c00:	11 24       	eor	r1, r1
     c02:	0b b6       	in	r0, 0x3b	; 59
     c04:	0f 92       	push	r0
     c06:	2f 93       	push	r18
     c08:	3f 93       	push	r19
     c0a:	4f 93       	push	r20
     c0c:	5f 93       	push	r21
     c0e:	6f 93       	push	r22
     c10:	7f 93       	push	r23
     c12:	8f 93       	push	r24
     c14:	af 93       	push	r26
     c16:	bf 93       	push	r27
     c18:	ef 93       	push	r30
     c1a:	ff 93       	push	r31
     c1c:	a4 eb       	ldi	r26, 0xB4	; 180
     c1e:	b2 e0       	ldi	r27, 0x02	; 2
     c20:	e4 e9       	ldi	r30, 0x94	; 148
     c22:	f2 e0       	ldi	r31, 0x02	; 2
     c24:	24 eb       	ldi	r18, 0xB4	; 180
     c26:	32 e0       	ldi	r19, 0x02	; 2
	for (int t = 0; t < NUMBER_OF_TIMERS; t++) {
		if (timer_enabled[t]){
     c28:	8d 91       	ld	r24, X+
     c2a:	88 23       	and	r24, r24
     c2c:	59 f0       	breq	.+22     	; 0xc44 <__vector_17+0x4c>
			elapsed_microseconds[t] += (1000000ULL * 256 * 256) / F_CPU;
     c2e:	40 81       	ld	r20, Z
     c30:	51 81       	ldd	r21, Z+1	; 0x01
     c32:	62 81       	ldd	r22, Z+2	; 0x02
     c34:	73 81       	ldd	r23, Z+3	; 0x03
     c36:	50 5e       	subi	r21, 0xE0	; 224
     c38:	6f 4f       	sbci	r22, 0xFF	; 255
     c3a:	7f 4f       	sbci	r23, 0xFF	; 255
     c3c:	40 83       	st	Z, r20
     c3e:	51 83       	std	Z+1, r21	; 0x01
     c40:	62 83       	std	Z+2, r22	; 0x02
     c42:	73 83       	std	Z+3, r23	; 0x03
     c44:	34 96       	adiw	r30, 0x04	; 4
uint16_t timer_elapsed_ms(timer_t timer) {
	return elapsed_microseconds[timer] / 1000;
}

ISR(TIMER0_OVF_vect) {
	for (int t = 0; t < NUMBER_OF_TIMERS; t++) {
     c46:	e2 17       	cp	r30, r18
     c48:	f3 07       	cpc	r31, r19
     c4a:	71 f7       	brne	.-36     	; 0xc28 <__vector_17+0x30>
		if (timer_enabled[t]){
			elapsed_microseconds[t] += (1000000ULL * 256 * 256) / F_CPU;
		}
	}
}
     c4c:	ff 91       	pop	r31
     c4e:	ef 91       	pop	r30
     c50:	bf 91       	pop	r27
     c52:	af 91       	pop	r26
     c54:	8f 91       	pop	r24
     c56:	7f 91       	pop	r23
     c58:	6f 91       	pop	r22
     c5a:	5f 91       	pop	r21
     c5c:	4f 91       	pop	r20
     c5e:	3f 91       	pop	r19
     c60:	2f 91       	pop	r18
     c62:	0f 90       	pop	r0
     c64:	0b be       	out	0x3b, r0	; 59
     c66:	0f 90       	pop	r0
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	0f 90       	pop	r0
     c6c:	1f 90       	pop	r1
     c6e:	18 95       	reti

00000c70 <usbdbg_tx_char>:
	fdevopen(usbdbg_tx_char, NULL);
}

int usbdbg_tx_char(char c, FILE* stream)
{
	while (!(UCSR0A & (1 << UDRE0))) { }; // Wait until data register is empty
     c70:	e0 ec       	ldi	r30, 0xC0	; 192
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	90 81       	ld	r25, Z
     c76:	95 ff       	sbrs	r25, 5
     c78:	fd cf       	rjmp	.-6      	; 0xc74 <usbdbg_tx_char+0x4>
	UDR0 = c;
     c7a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 1;
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	08 95       	ret

00000c84 <usbdbg_init>:
#include <stdlib.h>

void usbdbg_init()
{
	const uint32_t baud_rate = 9600;
	UBRR0 = (F_CPU / 16) / baud_rate - 1;
     c84:	83 e3       	ldi	r24, 0x33	; 51
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     c8c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C = (3 << UCSZ0);	// 8 bit transfer
     c90:	86 e0       	ldi	r24, 0x06	; 6
     c92:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B |= (1 << TXEN0); // Enable transmit
     c96:	e1 ec       	ldi	r30, 0xC1	; 193
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	88 60       	ori	r24, 0x08	; 8
     c9e:	80 83       	st	Z, r24
	
	fdevopen(usbdbg_tx_char, NULL);
     ca0:	60 e0       	ldi	r22, 0x00	; 0
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	88 e3       	ldi	r24, 0x38	; 56
     ca6:	96 e0       	ldi	r25, 0x06	; 6
     ca8:	3f c2       	rjmp	.+1150   	; 0x1128 <fdevopen>
     caa:	08 95       	ret

00000cac <__subsf3>:
     cac:	50 58       	subi	r21, 0x80	; 128

00000cae <__addsf3>:
     cae:	bb 27       	eor	r27, r27
     cb0:	aa 27       	eor	r26, r26
     cb2:	0e d0       	rcall	.+28     	; 0xcd0 <__addsf3x>
     cb4:	75 c1       	rjmp	.+746    	; 0xfa0 <__fp_round>
     cb6:	66 d1       	rcall	.+716    	; 0xf84 <__fp_pscA>
     cb8:	30 f0       	brcs	.+12     	; 0xcc6 <__addsf3+0x18>
     cba:	6b d1       	rcall	.+726    	; 0xf92 <__fp_pscB>
     cbc:	20 f0       	brcs	.+8      	; 0xcc6 <__addsf3+0x18>
     cbe:	31 f4       	brne	.+12     	; 0xccc <__addsf3+0x1e>
     cc0:	9f 3f       	cpi	r25, 0xFF	; 255
     cc2:	11 f4       	brne	.+4      	; 0xcc8 <__addsf3+0x1a>
     cc4:	1e f4       	brtc	.+6      	; 0xccc <__addsf3+0x1e>
     cc6:	5b c1       	rjmp	.+694    	; 0xf7e <__fp_nan>
     cc8:	0e f4       	brtc	.+2      	; 0xccc <__addsf3+0x1e>
     cca:	e0 95       	com	r30
     ccc:	e7 fb       	bst	r30, 7
     cce:	51 c1       	rjmp	.+674    	; 0xf72 <__fp_inf>

00000cd0 <__addsf3x>:
     cd0:	e9 2f       	mov	r30, r25
     cd2:	77 d1       	rcall	.+750    	; 0xfc2 <__fp_split3>
     cd4:	80 f3       	brcs	.-32     	; 0xcb6 <__addsf3+0x8>
     cd6:	ba 17       	cp	r27, r26
     cd8:	62 07       	cpc	r22, r18
     cda:	73 07       	cpc	r23, r19
     cdc:	84 07       	cpc	r24, r20
     cde:	95 07       	cpc	r25, r21
     ce0:	18 f0       	brcs	.+6      	; 0xce8 <__addsf3x+0x18>
     ce2:	71 f4       	brne	.+28     	; 0xd00 <__addsf3x+0x30>
     ce4:	9e f5       	brtc	.+102    	; 0xd4c <__addsf3x+0x7c>
     ce6:	8f c1       	rjmp	.+798    	; 0x1006 <__fp_zero>
     ce8:	0e f4       	brtc	.+2      	; 0xcec <__addsf3x+0x1c>
     cea:	e0 95       	com	r30
     cec:	0b 2e       	mov	r0, r27
     cee:	ba 2f       	mov	r27, r26
     cf0:	a0 2d       	mov	r26, r0
     cf2:	0b 01       	movw	r0, r22
     cf4:	b9 01       	movw	r22, r18
     cf6:	90 01       	movw	r18, r0
     cf8:	0c 01       	movw	r0, r24
     cfa:	ca 01       	movw	r24, r20
     cfc:	a0 01       	movw	r20, r0
     cfe:	11 24       	eor	r1, r1
     d00:	ff 27       	eor	r31, r31
     d02:	59 1b       	sub	r21, r25
     d04:	99 f0       	breq	.+38     	; 0xd2c <__addsf3x+0x5c>
     d06:	59 3f       	cpi	r21, 0xF9	; 249
     d08:	50 f4       	brcc	.+20     	; 0xd1e <__addsf3x+0x4e>
     d0a:	50 3e       	cpi	r21, 0xE0	; 224
     d0c:	68 f1       	brcs	.+90     	; 0xd68 <__addsf3x+0x98>
     d0e:	1a 16       	cp	r1, r26
     d10:	f0 40       	sbci	r31, 0x00	; 0
     d12:	a2 2f       	mov	r26, r18
     d14:	23 2f       	mov	r18, r19
     d16:	34 2f       	mov	r19, r20
     d18:	44 27       	eor	r20, r20
     d1a:	58 5f       	subi	r21, 0xF8	; 248
     d1c:	f3 cf       	rjmp	.-26     	; 0xd04 <__addsf3x+0x34>
     d1e:	46 95       	lsr	r20
     d20:	37 95       	ror	r19
     d22:	27 95       	ror	r18
     d24:	a7 95       	ror	r26
     d26:	f0 40       	sbci	r31, 0x00	; 0
     d28:	53 95       	inc	r21
     d2a:	c9 f7       	brne	.-14     	; 0xd1e <__addsf3x+0x4e>
     d2c:	7e f4       	brtc	.+30     	; 0xd4c <__addsf3x+0x7c>
     d2e:	1f 16       	cp	r1, r31
     d30:	ba 0b       	sbc	r27, r26
     d32:	62 0b       	sbc	r22, r18
     d34:	73 0b       	sbc	r23, r19
     d36:	84 0b       	sbc	r24, r20
     d38:	ba f0       	brmi	.+46     	; 0xd68 <__addsf3x+0x98>
     d3a:	91 50       	subi	r25, 0x01	; 1
     d3c:	a1 f0       	breq	.+40     	; 0xd66 <__addsf3x+0x96>
     d3e:	ff 0f       	add	r31, r31
     d40:	bb 1f       	adc	r27, r27
     d42:	66 1f       	adc	r22, r22
     d44:	77 1f       	adc	r23, r23
     d46:	88 1f       	adc	r24, r24
     d48:	c2 f7       	brpl	.-16     	; 0xd3a <__addsf3x+0x6a>
     d4a:	0e c0       	rjmp	.+28     	; 0xd68 <__addsf3x+0x98>
     d4c:	ba 0f       	add	r27, r26
     d4e:	62 1f       	adc	r22, r18
     d50:	73 1f       	adc	r23, r19
     d52:	84 1f       	adc	r24, r20
     d54:	48 f4       	brcc	.+18     	; 0xd68 <__addsf3x+0x98>
     d56:	87 95       	ror	r24
     d58:	77 95       	ror	r23
     d5a:	67 95       	ror	r22
     d5c:	b7 95       	ror	r27
     d5e:	f7 95       	ror	r31
     d60:	9e 3f       	cpi	r25, 0xFE	; 254
     d62:	08 f0       	brcs	.+2      	; 0xd66 <__addsf3x+0x96>
     d64:	b3 cf       	rjmp	.-154    	; 0xccc <__addsf3+0x1e>
     d66:	93 95       	inc	r25
     d68:	88 0f       	add	r24, r24
     d6a:	08 f0       	brcs	.+2      	; 0xd6e <__addsf3x+0x9e>
     d6c:	99 27       	eor	r25, r25
     d6e:	ee 0f       	add	r30, r30
     d70:	97 95       	ror	r25
     d72:	87 95       	ror	r24
     d74:	08 95       	ret

00000d76 <__cmpsf2>:
     d76:	d9 d0       	rcall	.+434    	; 0xf2a <__fp_cmp>
     d78:	08 f4       	brcc	.+2      	; 0xd7c <__cmpsf2+0x6>
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	08 95       	ret

00000d7e <__divsf3>:
     d7e:	0c d0       	rcall	.+24     	; 0xd98 <__divsf3x>
     d80:	0f c1       	rjmp	.+542    	; 0xfa0 <__fp_round>
     d82:	07 d1       	rcall	.+526    	; 0xf92 <__fp_pscB>
     d84:	40 f0       	brcs	.+16     	; 0xd96 <__divsf3+0x18>
     d86:	fe d0       	rcall	.+508    	; 0xf84 <__fp_pscA>
     d88:	30 f0       	brcs	.+12     	; 0xd96 <__divsf3+0x18>
     d8a:	21 f4       	brne	.+8      	; 0xd94 <__divsf3+0x16>
     d8c:	5f 3f       	cpi	r21, 0xFF	; 255
     d8e:	19 f0       	breq	.+6      	; 0xd96 <__divsf3+0x18>
     d90:	f0 c0       	rjmp	.+480    	; 0xf72 <__fp_inf>
     d92:	51 11       	cpse	r21, r1
     d94:	39 c1       	rjmp	.+626    	; 0x1008 <__fp_szero>
     d96:	f3 c0       	rjmp	.+486    	; 0xf7e <__fp_nan>

00000d98 <__divsf3x>:
     d98:	14 d1       	rcall	.+552    	; 0xfc2 <__fp_split3>
     d9a:	98 f3       	brcs	.-26     	; 0xd82 <__divsf3+0x4>

00000d9c <__divsf3_pse>:
     d9c:	99 23       	and	r25, r25
     d9e:	c9 f3       	breq	.-14     	; 0xd92 <__divsf3+0x14>
     da0:	55 23       	and	r21, r21
     da2:	b1 f3       	breq	.-20     	; 0xd90 <__divsf3+0x12>
     da4:	95 1b       	sub	r25, r21
     da6:	55 0b       	sbc	r21, r21
     da8:	bb 27       	eor	r27, r27
     daa:	aa 27       	eor	r26, r26
     dac:	62 17       	cp	r22, r18
     dae:	73 07       	cpc	r23, r19
     db0:	84 07       	cpc	r24, r20
     db2:	38 f0       	brcs	.+14     	; 0xdc2 <__divsf3_pse+0x26>
     db4:	9f 5f       	subi	r25, 0xFF	; 255
     db6:	5f 4f       	sbci	r21, 0xFF	; 255
     db8:	22 0f       	add	r18, r18
     dba:	33 1f       	adc	r19, r19
     dbc:	44 1f       	adc	r20, r20
     dbe:	aa 1f       	adc	r26, r26
     dc0:	a9 f3       	breq	.-22     	; 0xdac <__divsf3_pse+0x10>
     dc2:	33 d0       	rcall	.+102    	; 0xe2a <__divsf3_pse+0x8e>
     dc4:	0e 2e       	mov	r0, r30
     dc6:	3a f0       	brmi	.+14     	; 0xdd6 <__divsf3_pse+0x3a>
     dc8:	e0 e8       	ldi	r30, 0x80	; 128
     dca:	30 d0       	rcall	.+96     	; 0xe2c <__divsf3_pse+0x90>
     dcc:	91 50       	subi	r25, 0x01	; 1
     dce:	50 40       	sbci	r21, 0x00	; 0
     dd0:	e6 95       	lsr	r30
     dd2:	00 1c       	adc	r0, r0
     dd4:	ca f7       	brpl	.-14     	; 0xdc8 <__divsf3_pse+0x2c>
     dd6:	29 d0       	rcall	.+82     	; 0xe2a <__divsf3_pse+0x8e>
     dd8:	fe 2f       	mov	r31, r30
     dda:	27 d0       	rcall	.+78     	; 0xe2a <__divsf3_pse+0x8e>
     ddc:	66 0f       	add	r22, r22
     dde:	77 1f       	adc	r23, r23
     de0:	88 1f       	adc	r24, r24
     de2:	bb 1f       	adc	r27, r27
     de4:	26 17       	cp	r18, r22
     de6:	37 07       	cpc	r19, r23
     de8:	48 07       	cpc	r20, r24
     dea:	ab 07       	cpc	r26, r27
     dec:	b0 e8       	ldi	r27, 0x80	; 128
     dee:	09 f0       	breq	.+2      	; 0xdf2 <__divsf3_pse+0x56>
     df0:	bb 0b       	sbc	r27, r27
     df2:	80 2d       	mov	r24, r0
     df4:	bf 01       	movw	r22, r30
     df6:	ff 27       	eor	r31, r31
     df8:	93 58       	subi	r25, 0x83	; 131
     dfa:	5f 4f       	sbci	r21, 0xFF	; 255
     dfc:	2a f0       	brmi	.+10     	; 0xe08 <__divsf3_pse+0x6c>
     dfe:	9e 3f       	cpi	r25, 0xFE	; 254
     e00:	51 05       	cpc	r21, r1
     e02:	68 f0       	brcs	.+26     	; 0xe1e <__divsf3_pse+0x82>
     e04:	b6 c0       	rjmp	.+364    	; 0xf72 <__fp_inf>
     e06:	00 c1       	rjmp	.+512    	; 0x1008 <__fp_szero>
     e08:	5f 3f       	cpi	r21, 0xFF	; 255
     e0a:	ec f3       	brlt	.-6      	; 0xe06 <__divsf3_pse+0x6a>
     e0c:	98 3e       	cpi	r25, 0xE8	; 232
     e0e:	dc f3       	brlt	.-10     	; 0xe06 <__divsf3_pse+0x6a>
     e10:	86 95       	lsr	r24
     e12:	77 95       	ror	r23
     e14:	67 95       	ror	r22
     e16:	b7 95       	ror	r27
     e18:	f7 95       	ror	r31
     e1a:	9f 5f       	subi	r25, 0xFF	; 255
     e1c:	c9 f7       	brne	.-14     	; 0xe10 <__divsf3_pse+0x74>
     e1e:	88 0f       	add	r24, r24
     e20:	91 1d       	adc	r25, r1
     e22:	96 95       	lsr	r25
     e24:	87 95       	ror	r24
     e26:	97 f9       	bld	r25, 7
     e28:	08 95       	ret
     e2a:	e1 e0       	ldi	r30, 0x01	; 1
     e2c:	66 0f       	add	r22, r22
     e2e:	77 1f       	adc	r23, r23
     e30:	88 1f       	adc	r24, r24
     e32:	bb 1f       	adc	r27, r27
     e34:	62 17       	cp	r22, r18
     e36:	73 07       	cpc	r23, r19
     e38:	84 07       	cpc	r24, r20
     e3a:	ba 07       	cpc	r27, r26
     e3c:	20 f0       	brcs	.+8      	; 0xe46 <__divsf3_pse+0xaa>
     e3e:	62 1b       	sub	r22, r18
     e40:	73 0b       	sbc	r23, r19
     e42:	84 0b       	sbc	r24, r20
     e44:	ba 0b       	sbc	r27, r26
     e46:	ee 1f       	adc	r30, r30
     e48:	88 f7       	brcc	.-30     	; 0xe2c <__divsf3_pse+0x90>
     e4a:	e0 95       	com	r30
     e4c:	08 95       	ret

00000e4e <__fixsfsi>:
     e4e:	04 d0       	rcall	.+8      	; 0xe58 <__fixunssfsi>
     e50:	68 94       	set
     e52:	b1 11       	cpse	r27, r1
     e54:	d9 c0       	rjmp	.+434    	; 0x1008 <__fp_szero>
     e56:	08 95       	ret

00000e58 <__fixunssfsi>:
     e58:	bc d0       	rcall	.+376    	; 0xfd2 <__fp_splitA>
     e5a:	88 f0       	brcs	.+34     	; 0xe7e <__fixunssfsi+0x26>
     e5c:	9f 57       	subi	r25, 0x7F	; 127
     e5e:	90 f0       	brcs	.+36     	; 0xe84 <__fixunssfsi+0x2c>
     e60:	b9 2f       	mov	r27, r25
     e62:	99 27       	eor	r25, r25
     e64:	b7 51       	subi	r27, 0x17	; 23
     e66:	a0 f0       	brcs	.+40     	; 0xe90 <__fixunssfsi+0x38>
     e68:	d1 f0       	breq	.+52     	; 0xe9e <__fixunssfsi+0x46>
     e6a:	66 0f       	add	r22, r22
     e6c:	77 1f       	adc	r23, r23
     e6e:	88 1f       	adc	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	1a f0       	brmi	.+6      	; 0xe7a <__fixunssfsi+0x22>
     e74:	ba 95       	dec	r27
     e76:	c9 f7       	brne	.-14     	; 0xe6a <__fixunssfsi+0x12>
     e78:	12 c0       	rjmp	.+36     	; 0xe9e <__fixunssfsi+0x46>
     e7a:	b1 30       	cpi	r27, 0x01	; 1
     e7c:	81 f0       	breq	.+32     	; 0xe9e <__fixunssfsi+0x46>
     e7e:	c3 d0       	rcall	.+390    	; 0x1006 <__fp_zero>
     e80:	b1 e0       	ldi	r27, 0x01	; 1
     e82:	08 95       	ret
     e84:	c0 c0       	rjmp	.+384    	; 0x1006 <__fp_zero>
     e86:	67 2f       	mov	r22, r23
     e88:	78 2f       	mov	r23, r24
     e8a:	88 27       	eor	r24, r24
     e8c:	b8 5f       	subi	r27, 0xF8	; 248
     e8e:	39 f0       	breq	.+14     	; 0xe9e <__fixunssfsi+0x46>
     e90:	b9 3f       	cpi	r27, 0xF9	; 249
     e92:	cc f3       	brlt	.-14     	; 0xe86 <__fixunssfsi+0x2e>
     e94:	86 95       	lsr	r24
     e96:	77 95       	ror	r23
     e98:	67 95       	ror	r22
     e9a:	b3 95       	inc	r27
     e9c:	d9 f7       	brne	.-10     	; 0xe94 <__fixunssfsi+0x3c>
     e9e:	3e f4       	brtc	.+14     	; 0xeae <__fixunssfsi+0x56>
     ea0:	90 95       	com	r25
     ea2:	80 95       	com	r24
     ea4:	70 95       	com	r23
     ea6:	61 95       	neg	r22
     ea8:	7f 4f       	sbci	r23, 0xFF	; 255
     eaa:	8f 4f       	sbci	r24, 0xFF	; 255
     eac:	9f 4f       	sbci	r25, 0xFF	; 255
     eae:	08 95       	ret

00000eb0 <__floatunsisf>:
     eb0:	e8 94       	clt
     eb2:	09 c0       	rjmp	.+18     	; 0xec6 <__floatsisf+0x12>

00000eb4 <__floatsisf>:
     eb4:	97 fb       	bst	r25, 7
     eb6:	3e f4       	brtc	.+14     	; 0xec6 <__floatsisf+0x12>
     eb8:	90 95       	com	r25
     eba:	80 95       	com	r24
     ebc:	70 95       	com	r23
     ebe:	61 95       	neg	r22
     ec0:	7f 4f       	sbci	r23, 0xFF	; 255
     ec2:	8f 4f       	sbci	r24, 0xFF	; 255
     ec4:	9f 4f       	sbci	r25, 0xFF	; 255
     ec6:	99 23       	and	r25, r25
     ec8:	a9 f0       	breq	.+42     	; 0xef4 <__floatsisf+0x40>
     eca:	f9 2f       	mov	r31, r25
     ecc:	96 e9       	ldi	r25, 0x96	; 150
     ece:	bb 27       	eor	r27, r27
     ed0:	93 95       	inc	r25
     ed2:	f6 95       	lsr	r31
     ed4:	87 95       	ror	r24
     ed6:	77 95       	ror	r23
     ed8:	67 95       	ror	r22
     eda:	b7 95       	ror	r27
     edc:	f1 11       	cpse	r31, r1
     ede:	f8 cf       	rjmp	.-16     	; 0xed0 <__floatsisf+0x1c>
     ee0:	fa f4       	brpl	.+62     	; 0xf20 <__floatsisf+0x6c>
     ee2:	bb 0f       	add	r27, r27
     ee4:	11 f4       	brne	.+4      	; 0xeea <__floatsisf+0x36>
     ee6:	60 ff       	sbrs	r22, 0
     ee8:	1b c0       	rjmp	.+54     	; 0xf20 <__floatsisf+0x6c>
     eea:	6f 5f       	subi	r22, 0xFF	; 255
     eec:	7f 4f       	sbci	r23, 0xFF	; 255
     eee:	8f 4f       	sbci	r24, 0xFF	; 255
     ef0:	9f 4f       	sbci	r25, 0xFF	; 255
     ef2:	16 c0       	rjmp	.+44     	; 0xf20 <__floatsisf+0x6c>
     ef4:	88 23       	and	r24, r24
     ef6:	11 f0       	breq	.+4      	; 0xefc <__floatsisf+0x48>
     ef8:	96 e9       	ldi	r25, 0x96	; 150
     efa:	11 c0       	rjmp	.+34     	; 0xf1e <__floatsisf+0x6a>
     efc:	77 23       	and	r23, r23
     efe:	21 f0       	breq	.+8      	; 0xf08 <__floatsisf+0x54>
     f00:	9e e8       	ldi	r25, 0x8E	; 142
     f02:	87 2f       	mov	r24, r23
     f04:	76 2f       	mov	r23, r22
     f06:	05 c0       	rjmp	.+10     	; 0xf12 <__floatsisf+0x5e>
     f08:	66 23       	and	r22, r22
     f0a:	71 f0       	breq	.+28     	; 0xf28 <__floatsisf+0x74>
     f0c:	96 e8       	ldi	r25, 0x86	; 134
     f0e:	86 2f       	mov	r24, r22
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	2a f0       	brmi	.+10     	; 0xf20 <__floatsisf+0x6c>
     f16:	9a 95       	dec	r25
     f18:	66 0f       	add	r22, r22
     f1a:	77 1f       	adc	r23, r23
     f1c:	88 1f       	adc	r24, r24
     f1e:	da f7       	brpl	.-10     	; 0xf16 <__floatsisf+0x62>
     f20:	88 0f       	add	r24, r24
     f22:	96 95       	lsr	r25
     f24:	87 95       	ror	r24
     f26:	97 f9       	bld	r25, 7
     f28:	08 95       	ret

00000f2a <__fp_cmp>:
     f2a:	99 0f       	add	r25, r25
     f2c:	00 08       	sbc	r0, r0
     f2e:	55 0f       	add	r21, r21
     f30:	aa 0b       	sbc	r26, r26
     f32:	e0 e8       	ldi	r30, 0x80	; 128
     f34:	fe ef       	ldi	r31, 0xFE	; 254
     f36:	16 16       	cp	r1, r22
     f38:	17 06       	cpc	r1, r23
     f3a:	e8 07       	cpc	r30, r24
     f3c:	f9 07       	cpc	r31, r25
     f3e:	c0 f0       	brcs	.+48     	; 0xf70 <__fp_cmp+0x46>
     f40:	12 16       	cp	r1, r18
     f42:	13 06       	cpc	r1, r19
     f44:	e4 07       	cpc	r30, r20
     f46:	f5 07       	cpc	r31, r21
     f48:	98 f0       	brcs	.+38     	; 0xf70 <__fp_cmp+0x46>
     f4a:	62 1b       	sub	r22, r18
     f4c:	73 0b       	sbc	r23, r19
     f4e:	84 0b       	sbc	r24, r20
     f50:	95 0b       	sbc	r25, r21
     f52:	39 f4       	brne	.+14     	; 0xf62 <__fp_cmp+0x38>
     f54:	0a 26       	eor	r0, r26
     f56:	61 f0       	breq	.+24     	; 0xf70 <__fp_cmp+0x46>
     f58:	23 2b       	or	r18, r19
     f5a:	24 2b       	or	r18, r20
     f5c:	25 2b       	or	r18, r21
     f5e:	21 f4       	brne	.+8      	; 0xf68 <__fp_cmp+0x3e>
     f60:	08 95       	ret
     f62:	0a 26       	eor	r0, r26
     f64:	09 f4       	brne	.+2      	; 0xf68 <__fp_cmp+0x3e>
     f66:	a1 40       	sbci	r26, 0x01	; 1
     f68:	a6 95       	lsr	r26
     f6a:	8f ef       	ldi	r24, 0xFF	; 255
     f6c:	81 1d       	adc	r24, r1
     f6e:	81 1d       	adc	r24, r1
     f70:	08 95       	ret

00000f72 <__fp_inf>:
     f72:	97 f9       	bld	r25, 7
     f74:	9f 67       	ori	r25, 0x7F	; 127
     f76:	80 e8       	ldi	r24, 0x80	; 128
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	08 95       	ret

00000f7e <__fp_nan>:
     f7e:	9f ef       	ldi	r25, 0xFF	; 255
     f80:	80 ec       	ldi	r24, 0xC0	; 192
     f82:	08 95       	ret

00000f84 <__fp_pscA>:
     f84:	00 24       	eor	r0, r0
     f86:	0a 94       	dec	r0
     f88:	16 16       	cp	r1, r22
     f8a:	17 06       	cpc	r1, r23
     f8c:	18 06       	cpc	r1, r24
     f8e:	09 06       	cpc	r0, r25
     f90:	08 95       	ret

00000f92 <__fp_pscB>:
     f92:	00 24       	eor	r0, r0
     f94:	0a 94       	dec	r0
     f96:	12 16       	cp	r1, r18
     f98:	13 06       	cpc	r1, r19
     f9a:	14 06       	cpc	r1, r20
     f9c:	05 06       	cpc	r0, r21
     f9e:	08 95       	ret

00000fa0 <__fp_round>:
     fa0:	09 2e       	mov	r0, r25
     fa2:	03 94       	inc	r0
     fa4:	00 0c       	add	r0, r0
     fa6:	11 f4       	brne	.+4      	; 0xfac <__fp_round+0xc>
     fa8:	88 23       	and	r24, r24
     faa:	52 f0       	brmi	.+20     	; 0xfc0 <__fp_round+0x20>
     fac:	bb 0f       	add	r27, r27
     fae:	40 f4       	brcc	.+16     	; 0xfc0 <__fp_round+0x20>
     fb0:	bf 2b       	or	r27, r31
     fb2:	11 f4       	brne	.+4      	; 0xfb8 <__fp_round+0x18>
     fb4:	60 ff       	sbrs	r22, 0
     fb6:	04 c0       	rjmp	.+8      	; 0xfc0 <__fp_round+0x20>
     fb8:	6f 5f       	subi	r22, 0xFF	; 255
     fba:	7f 4f       	sbci	r23, 0xFF	; 255
     fbc:	8f 4f       	sbci	r24, 0xFF	; 255
     fbe:	9f 4f       	sbci	r25, 0xFF	; 255
     fc0:	08 95       	ret

00000fc2 <__fp_split3>:
     fc2:	57 fd       	sbrc	r21, 7
     fc4:	90 58       	subi	r25, 0x80	; 128
     fc6:	44 0f       	add	r20, r20
     fc8:	55 1f       	adc	r21, r21
     fca:	59 f0       	breq	.+22     	; 0xfe2 <__fp_splitA+0x10>
     fcc:	5f 3f       	cpi	r21, 0xFF	; 255
     fce:	71 f0       	breq	.+28     	; 0xfec <__fp_splitA+0x1a>
     fd0:	47 95       	ror	r20

00000fd2 <__fp_splitA>:
     fd2:	88 0f       	add	r24, r24
     fd4:	97 fb       	bst	r25, 7
     fd6:	99 1f       	adc	r25, r25
     fd8:	61 f0       	breq	.+24     	; 0xff2 <__fp_splitA+0x20>
     fda:	9f 3f       	cpi	r25, 0xFF	; 255
     fdc:	79 f0       	breq	.+30     	; 0xffc <__fp_splitA+0x2a>
     fde:	87 95       	ror	r24
     fe0:	08 95       	ret
     fe2:	12 16       	cp	r1, r18
     fe4:	13 06       	cpc	r1, r19
     fe6:	14 06       	cpc	r1, r20
     fe8:	55 1f       	adc	r21, r21
     fea:	f2 cf       	rjmp	.-28     	; 0xfd0 <__fp_split3+0xe>
     fec:	46 95       	lsr	r20
     fee:	f1 df       	rcall	.-30     	; 0xfd2 <__fp_splitA>
     ff0:	08 c0       	rjmp	.+16     	; 0x1002 <__fp_splitA+0x30>
     ff2:	16 16       	cp	r1, r22
     ff4:	17 06       	cpc	r1, r23
     ff6:	18 06       	cpc	r1, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	f1 cf       	rjmp	.-30     	; 0xfde <__fp_splitA+0xc>
     ffc:	86 95       	lsr	r24
     ffe:	71 05       	cpc	r23, r1
    1000:	61 05       	cpc	r22, r1
    1002:	08 94       	sec
    1004:	08 95       	ret

00001006 <__fp_zero>:
    1006:	e8 94       	clt

00001008 <__fp_szero>:
    1008:	bb 27       	eor	r27, r27
    100a:	66 27       	eor	r22, r22
    100c:	77 27       	eor	r23, r23
    100e:	cb 01       	movw	r24, r22
    1010:	97 f9       	bld	r25, 7
    1012:	08 95       	ret

00001014 <__gesf2>:
    1014:	8a df       	rcall	.-236    	; 0xf2a <__fp_cmp>
    1016:	08 f4       	brcc	.+2      	; 0x101a <__gesf2+0x6>
    1018:	8f ef       	ldi	r24, 0xFF	; 255
    101a:	08 95       	ret

0000101c <__mulsf3>:
    101c:	0b d0       	rcall	.+22     	; 0x1034 <__mulsf3x>
    101e:	c0 cf       	rjmp	.-128    	; 0xfa0 <__fp_round>
    1020:	b1 df       	rcall	.-158    	; 0xf84 <__fp_pscA>
    1022:	28 f0       	brcs	.+10     	; 0x102e <__mulsf3+0x12>
    1024:	b6 df       	rcall	.-148    	; 0xf92 <__fp_pscB>
    1026:	18 f0       	brcs	.+6      	; 0x102e <__mulsf3+0x12>
    1028:	95 23       	and	r25, r21
    102a:	09 f0       	breq	.+2      	; 0x102e <__mulsf3+0x12>
    102c:	a2 cf       	rjmp	.-188    	; 0xf72 <__fp_inf>
    102e:	a7 cf       	rjmp	.-178    	; 0xf7e <__fp_nan>
    1030:	11 24       	eor	r1, r1
    1032:	ea cf       	rjmp	.-44     	; 0x1008 <__fp_szero>

00001034 <__mulsf3x>:
    1034:	c6 df       	rcall	.-116    	; 0xfc2 <__fp_split3>
    1036:	a0 f3       	brcs	.-24     	; 0x1020 <__mulsf3+0x4>

00001038 <__mulsf3_pse>:
    1038:	95 9f       	mul	r25, r21
    103a:	d1 f3       	breq	.-12     	; 0x1030 <__mulsf3+0x14>
    103c:	95 0f       	add	r25, r21
    103e:	50 e0       	ldi	r21, 0x00	; 0
    1040:	55 1f       	adc	r21, r21
    1042:	62 9f       	mul	r22, r18
    1044:	f0 01       	movw	r30, r0
    1046:	72 9f       	mul	r23, r18
    1048:	bb 27       	eor	r27, r27
    104a:	f0 0d       	add	r31, r0
    104c:	b1 1d       	adc	r27, r1
    104e:	63 9f       	mul	r22, r19
    1050:	aa 27       	eor	r26, r26
    1052:	f0 0d       	add	r31, r0
    1054:	b1 1d       	adc	r27, r1
    1056:	aa 1f       	adc	r26, r26
    1058:	64 9f       	mul	r22, r20
    105a:	66 27       	eor	r22, r22
    105c:	b0 0d       	add	r27, r0
    105e:	a1 1d       	adc	r26, r1
    1060:	66 1f       	adc	r22, r22
    1062:	82 9f       	mul	r24, r18
    1064:	22 27       	eor	r18, r18
    1066:	b0 0d       	add	r27, r0
    1068:	a1 1d       	adc	r26, r1
    106a:	62 1f       	adc	r22, r18
    106c:	73 9f       	mul	r23, r19
    106e:	b0 0d       	add	r27, r0
    1070:	a1 1d       	adc	r26, r1
    1072:	62 1f       	adc	r22, r18
    1074:	83 9f       	mul	r24, r19
    1076:	a0 0d       	add	r26, r0
    1078:	61 1d       	adc	r22, r1
    107a:	22 1f       	adc	r18, r18
    107c:	74 9f       	mul	r23, r20
    107e:	33 27       	eor	r19, r19
    1080:	a0 0d       	add	r26, r0
    1082:	61 1d       	adc	r22, r1
    1084:	23 1f       	adc	r18, r19
    1086:	84 9f       	mul	r24, r20
    1088:	60 0d       	add	r22, r0
    108a:	21 1d       	adc	r18, r1
    108c:	82 2f       	mov	r24, r18
    108e:	76 2f       	mov	r23, r22
    1090:	6a 2f       	mov	r22, r26
    1092:	11 24       	eor	r1, r1
    1094:	9f 57       	subi	r25, 0x7F	; 127
    1096:	50 40       	sbci	r21, 0x00	; 0
    1098:	8a f0       	brmi	.+34     	; 0x10bc <__mulsf3_pse+0x84>
    109a:	e1 f0       	breq	.+56     	; 0x10d4 <__mulsf3_pse+0x9c>
    109c:	88 23       	and	r24, r24
    109e:	4a f0       	brmi	.+18     	; 0x10b2 <__mulsf3_pse+0x7a>
    10a0:	ee 0f       	add	r30, r30
    10a2:	ff 1f       	adc	r31, r31
    10a4:	bb 1f       	adc	r27, r27
    10a6:	66 1f       	adc	r22, r22
    10a8:	77 1f       	adc	r23, r23
    10aa:	88 1f       	adc	r24, r24
    10ac:	91 50       	subi	r25, 0x01	; 1
    10ae:	50 40       	sbci	r21, 0x00	; 0
    10b0:	a9 f7       	brne	.-22     	; 0x109c <__mulsf3_pse+0x64>
    10b2:	9e 3f       	cpi	r25, 0xFE	; 254
    10b4:	51 05       	cpc	r21, r1
    10b6:	70 f0       	brcs	.+28     	; 0x10d4 <__mulsf3_pse+0x9c>
    10b8:	5c cf       	rjmp	.-328    	; 0xf72 <__fp_inf>
    10ba:	a6 cf       	rjmp	.-180    	; 0x1008 <__fp_szero>
    10bc:	5f 3f       	cpi	r21, 0xFF	; 255
    10be:	ec f3       	brlt	.-6      	; 0x10ba <__mulsf3_pse+0x82>
    10c0:	98 3e       	cpi	r25, 0xE8	; 232
    10c2:	dc f3       	brlt	.-10     	; 0x10ba <__mulsf3_pse+0x82>
    10c4:	86 95       	lsr	r24
    10c6:	77 95       	ror	r23
    10c8:	67 95       	ror	r22
    10ca:	b7 95       	ror	r27
    10cc:	f7 95       	ror	r31
    10ce:	e7 95       	ror	r30
    10d0:	9f 5f       	subi	r25, 0xFF	; 255
    10d2:	c1 f7       	brne	.-16     	; 0x10c4 <__mulsf3_pse+0x8c>
    10d4:	fe 2b       	or	r31, r30
    10d6:	88 0f       	add	r24, r24
    10d8:	91 1d       	adc	r25, r1
    10da:	96 95       	lsr	r25
    10dc:	87 95       	ror	r24
    10de:	97 f9       	bld	r25, 7
    10e0:	08 95       	ret

000010e2 <__itoa_ncheck>:
    10e2:	bb 27       	eor	r27, r27
    10e4:	4a 30       	cpi	r20, 0x0A	; 10
    10e6:	31 f4       	brne	.+12     	; 0x10f4 <__itoa_ncheck+0x12>
    10e8:	99 23       	and	r25, r25
    10ea:	22 f4       	brpl	.+8      	; 0x10f4 <__itoa_ncheck+0x12>
    10ec:	bd e2       	ldi	r27, 0x2D	; 45
    10ee:	90 95       	com	r25
    10f0:	81 95       	neg	r24
    10f2:	9f 4f       	sbci	r25, 0xFF	; 255
    10f4:	01 c0       	rjmp	.+2      	; 0x10f8 <__utoa_common>

000010f6 <__utoa_ncheck>:
    10f6:	bb 27       	eor	r27, r27

000010f8 <__utoa_common>:
    10f8:	fb 01       	movw	r30, r22
    10fa:	55 27       	eor	r21, r21
    10fc:	aa 27       	eor	r26, r26
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	aa 1f       	adc	r26, r26
    1104:	a4 17       	cp	r26, r20
    1106:	10 f0       	brcs	.+4      	; 0x110c <__stack+0xd>
    1108:	a4 1b       	sub	r26, r20
    110a:	83 95       	inc	r24
    110c:	50 51       	subi	r21, 0x10	; 16
    110e:	b9 f7       	brne	.-18     	; 0x10fe <__utoa_common+0x6>
    1110:	a0 5d       	subi	r26, 0xD0	; 208
    1112:	aa 33       	cpi	r26, 0x3A	; 58
    1114:	08 f0       	brcs	.+2      	; 0x1118 <__stack+0x19>
    1116:	a9 5d       	subi	r26, 0xD9	; 217
    1118:	a1 93       	st	Z+, r26
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	79 f7       	brne	.-34     	; 0x10fc <__utoa_common+0x4>
    111e:	b1 11       	cpse	r27, r1
    1120:	b1 93       	st	Z+, r27
    1122:	11 92       	st	Z+, r1
    1124:	cb 01       	movw	r24, r22
    1126:	b2 c3       	rjmp	.+1892   	; 0x188c <strrev>

00001128 <fdevopen>:
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	00 97       	sbiw	r24, 0x00	; 0
    1132:	31 f4       	brne	.+12     	; 0x1140 <fdevopen+0x18>
    1134:	61 15       	cp	r22, r1
    1136:	71 05       	cpc	r23, r1
    1138:	19 f4       	brne	.+6      	; 0x1140 <fdevopen+0x18>
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	39 c0       	rjmp	.+114    	; 0x11b2 <fdevopen+0x8a>
    1140:	8b 01       	movw	r16, r22
    1142:	ec 01       	movw	r28, r24
    1144:	6e e0       	ldi	r22, 0x0E	; 14
    1146:	70 e0       	ldi	r23, 0x00	; 0
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	47 d2       	rcall	.+1166   	; 0x15dc <calloc>
    114e:	fc 01       	movw	r30, r24
    1150:	89 2b       	or	r24, r25
    1152:	99 f3       	breq	.-26     	; 0x113a <fdevopen+0x12>
    1154:	80 e8       	ldi	r24, 0x80	; 128
    1156:	83 83       	std	Z+3, r24	; 0x03
    1158:	01 15       	cp	r16, r1
    115a:	11 05       	cpc	r17, r1
    115c:	71 f0       	breq	.+28     	; 0x117a <fdevopen+0x52>
    115e:	13 87       	std	Z+11, r17	; 0x0b
    1160:	02 87       	std	Z+10, r16	; 0x0a
    1162:	81 e8       	ldi	r24, 0x81	; 129
    1164:	83 83       	std	Z+3, r24	; 0x03
    1166:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <__iob>
    116a:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <__iob+0x1>
    116e:	89 2b       	or	r24, r25
    1170:	21 f4       	brne	.+8      	; 0x117a <fdevopen+0x52>
    1172:	f0 93 03 03 	sts	0x0303, r31	; 0x800303 <__iob+0x1>
    1176:	e0 93 02 03 	sts	0x0302, r30	; 0x800302 <__iob>
    117a:	20 97       	sbiw	r28, 0x00	; 0
    117c:	c9 f0       	breq	.+50     	; 0x11b0 <fdevopen+0x88>
    117e:	d1 87       	std	Z+9, r29	; 0x09
    1180:	c0 87       	std	Z+8, r28	; 0x08
    1182:	83 81       	ldd	r24, Z+3	; 0x03
    1184:	82 60       	ori	r24, 0x02	; 2
    1186:	83 83       	std	Z+3, r24	; 0x03
    1188:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <__iob+0x2>
    118c:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <__iob+0x3>
    1190:	89 2b       	or	r24, r25
    1192:	71 f4       	brne	.+28     	; 0x11b0 <fdevopen+0x88>
    1194:	f0 93 05 03 	sts	0x0305, r31	; 0x800305 <__iob+0x3>
    1198:	e0 93 04 03 	sts	0x0304, r30	; 0x800304 <__iob+0x2>
    119c:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <__iob+0x4>
    11a0:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <__iob+0x5>
    11a4:	89 2b       	or	r24, r25
    11a6:	21 f4       	brne	.+8      	; 0x11b0 <fdevopen+0x88>
    11a8:	f0 93 07 03 	sts	0x0307, r31	; 0x800307 <__iob+0x5>
    11ac:	e0 93 06 03 	sts	0x0306, r30	; 0x800306 <__iob+0x4>
    11b0:	cf 01       	movw	r24, r30
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
    11b6:	1f 91       	pop	r17
    11b8:	0f 91       	pop	r16
    11ba:	08 95       	ret

000011bc <printf>:
    11bc:	cf 93       	push	r28
    11be:	df 93       	push	r29
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	ae 01       	movw	r20, r28
    11c6:	4b 5f       	subi	r20, 0xFB	; 251
    11c8:	5f 4f       	sbci	r21, 0xFF	; 255
    11ca:	fa 01       	movw	r30, r20
    11cc:	61 91       	ld	r22, Z+
    11ce:	71 91       	ld	r23, Z+
    11d0:	af 01       	movw	r20, r30
    11d2:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <__iob+0x2>
    11d6:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <__iob+0x3>
    11da:	03 d0       	rcall	.+6      	; 0x11e2 <vfprintf>
    11dc:	df 91       	pop	r29
    11de:	cf 91       	pop	r28
    11e0:	08 95       	ret

000011e2 <vfprintf>:
    11e2:	2f 92       	push	r2
    11e4:	3f 92       	push	r3
    11e6:	4f 92       	push	r4
    11e8:	5f 92       	push	r5
    11ea:	6f 92       	push	r6
    11ec:	7f 92       	push	r7
    11ee:	8f 92       	push	r8
    11f0:	9f 92       	push	r9
    11f2:	af 92       	push	r10
    11f4:	bf 92       	push	r11
    11f6:	cf 92       	push	r12
    11f8:	df 92       	push	r13
    11fa:	ef 92       	push	r14
    11fc:	ff 92       	push	r15
    11fe:	0f 93       	push	r16
    1200:	1f 93       	push	r17
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	2b 97       	sbiw	r28, 0x0b	; 11
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	cd bf       	out	0x3d, r28	; 61
    1216:	6c 01       	movw	r12, r24
    1218:	7b 01       	movw	r14, r22
    121a:	8a 01       	movw	r16, r20
    121c:	fc 01       	movw	r30, r24
    121e:	17 82       	std	Z+7, r1	; 0x07
    1220:	16 82       	std	Z+6, r1	; 0x06
    1222:	83 81       	ldd	r24, Z+3	; 0x03
    1224:	81 ff       	sbrs	r24, 1
    1226:	bf c1       	rjmp	.+894    	; 0x15a6 <vfprintf+0x3c4>
    1228:	ce 01       	movw	r24, r28
    122a:	01 96       	adiw	r24, 0x01	; 1
    122c:	3c 01       	movw	r6, r24
    122e:	f6 01       	movw	r30, r12
    1230:	93 81       	ldd	r25, Z+3	; 0x03
    1232:	f7 01       	movw	r30, r14
    1234:	93 fd       	sbrc	r25, 3
    1236:	85 91       	lpm	r24, Z+
    1238:	93 ff       	sbrs	r25, 3
    123a:	81 91       	ld	r24, Z+
    123c:	7f 01       	movw	r14, r30
    123e:	88 23       	and	r24, r24
    1240:	09 f4       	brne	.+2      	; 0x1244 <vfprintf+0x62>
    1242:	ad c1       	rjmp	.+858    	; 0x159e <vfprintf+0x3bc>
    1244:	85 32       	cpi	r24, 0x25	; 37
    1246:	39 f4       	brne	.+14     	; 0x1256 <vfprintf+0x74>
    1248:	93 fd       	sbrc	r25, 3
    124a:	85 91       	lpm	r24, Z+
    124c:	93 ff       	sbrs	r25, 3
    124e:	81 91       	ld	r24, Z+
    1250:	7f 01       	movw	r14, r30
    1252:	85 32       	cpi	r24, 0x25	; 37
    1254:	21 f4       	brne	.+8      	; 0x125e <vfprintf+0x7c>
    1256:	b6 01       	movw	r22, r12
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	28 d3       	rcall	.+1616   	; 0x18ac <fputc>
    125c:	e8 cf       	rjmp	.-48     	; 0x122e <vfprintf+0x4c>
    125e:	91 2c       	mov	r9, r1
    1260:	21 2c       	mov	r2, r1
    1262:	31 2c       	mov	r3, r1
    1264:	ff e1       	ldi	r31, 0x1F	; 31
    1266:	f3 15       	cp	r31, r3
    1268:	d8 f0       	brcs	.+54     	; 0x12a0 <vfprintf+0xbe>
    126a:	8b 32       	cpi	r24, 0x2B	; 43
    126c:	79 f0       	breq	.+30     	; 0x128c <vfprintf+0xaa>
    126e:	38 f4       	brcc	.+14     	; 0x127e <vfprintf+0x9c>
    1270:	80 32       	cpi	r24, 0x20	; 32
    1272:	79 f0       	breq	.+30     	; 0x1292 <vfprintf+0xb0>
    1274:	83 32       	cpi	r24, 0x23	; 35
    1276:	a1 f4       	brne	.+40     	; 0x12a0 <vfprintf+0xbe>
    1278:	23 2d       	mov	r18, r3
    127a:	20 61       	ori	r18, 0x10	; 16
    127c:	1d c0       	rjmp	.+58     	; 0x12b8 <vfprintf+0xd6>
    127e:	8d 32       	cpi	r24, 0x2D	; 45
    1280:	61 f0       	breq	.+24     	; 0x129a <vfprintf+0xb8>
    1282:	80 33       	cpi	r24, 0x30	; 48
    1284:	69 f4       	brne	.+26     	; 0x12a0 <vfprintf+0xbe>
    1286:	23 2d       	mov	r18, r3
    1288:	21 60       	ori	r18, 0x01	; 1
    128a:	16 c0       	rjmp	.+44     	; 0x12b8 <vfprintf+0xd6>
    128c:	83 2d       	mov	r24, r3
    128e:	82 60       	ori	r24, 0x02	; 2
    1290:	38 2e       	mov	r3, r24
    1292:	e3 2d       	mov	r30, r3
    1294:	e4 60       	ori	r30, 0x04	; 4
    1296:	3e 2e       	mov	r3, r30
    1298:	2a c0       	rjmp	.+84     	; 0x12ee <vfprintf+0x10c>
    129a:	f3 2d       	mov	r31, r3
    129c:	f8 60       	ori	r31, 0x08	; 8
    129e:	1d c0       	rjmp	.+58     	; 0x12da <vfprintf+0xf8>
    12a0:	37 fc       	sbrc	r3, 7
    12a2:	2d c0       	rjmp	.+90     	; 0x12fe <vfprintf+0x11c>
    12a4:	20 ed       	ldi	r18, 0xD0	; 208
    12a6:	28 0f       	add	r18, r24
    12a8:	2a 30       	cpi	r18, 0x0A	; 10
    12aa:	40 f0       	brcs	.+16     	; 0x12bc <vfprintf+0xda>
    12ac:	8e 32       	cpi	r24, 0x2E	; 46
    12ae:	b9 f4       	brne	.+46     	; 0x12de <vfprintf+0xfc>
    12b0:	36 fc       	sbrc	r3, 6
    12b2:	75 c1       	rjmp	.+746    	; 0x159e <vfprintf+0x3bc>
    12b4:	23 2d       	mov	r18, r3
    12b6:	20 64       	ori	r18, 0x40	; 64
    12b8:	32 2e       	mov	r3, r18
    12ba:	19 c0       	rjmp	.+50     	; 0x12ee <vfprintf+0x10c>
    12bc:	36 fe       	sbrs	r3, 6
    12be:	06 c0       	rjmp	.+12     	; 0x12cc <vfprintf+0xea>
    12c0:	8a e0       	ldi	r24, 0x0A	; 10
    12c2:	98 9e       	mul	r9, r24
    12c4:	20 0d       	add	r18, r0
    12c6:	11 24       	eor	r1, r1
    12c8:	92 2e       	mov	r9, r18
    12ca:	11 c0       	rjmp	.+34     	; 0x12ee <vfprintf+0x10c>
    12cc:	ea e0       	ldi	r30, 0x0A	; 10
    12ce:	2e 9e       	mul	r2, r30
    12d0:	20 0d       	add	r18, r0
    12d2:	11 24       	eor	r1, r1
    12d4:	22 2e       	mov	r2, r18
    12d6:	f3 2d       	mov	r31, r3
    12d8:	f0 62       	ori	r31, 0x20	; 32
    12da:	3f 2e       	mov	r3, r31
    12dc:	08 c0       	rjmp	.+16     	; 0x12ee <vfprintf+0x10c>
    12de:	8c 36       	cpi	r24, 0x6C	; 108
    12e0:	21 f4       	brne	.+8      	; 0x12ea <vfprintf+0x108>
    12e2:	83 2d       	mov	r24, r3
    12e4:	80 68       	ori	r24, 0x80	; 128
    12e6:	38 2e       	mov	r3, r24
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <vfprintf+0x10c>
    12ea:	88 36       	cpi	r24, 0x68	; 104
    12ec:	41 f4       	brne	.+16     	; 0x12fe <vfprintf+0x11c>
    12ee:	f7 01       	movw	r30, r14
    12f0:	93 fd       	sbrc	r25, 3
    12f2:	85 91       	lpm	r24, Z+
    12f4:	93 ff       	sbrs	r25, 3
    12f6:	81 91       	ld	r24, Z+
    12f8:	7f 01       	movw	r14, r30
    12fa:	81 11       	cpse	r24, r1
    12fc:	b3 cf       	rjmp	.-154    	; 0x1264 <vfprintf+0x82>
    12fe:	98 2f       	mov	r25, r24
    1300:	9f 7d       	andi	r25, 0xDF	; 223
    1302:	95 54       	subi	r25, 0x45	; 69
    1304:	93 30       	cpi	r25, 0x03	; 3
    1306:	28 f4       	brcc	.+10     	; 0x1312 <vfprintf+0x130>
    1308:	0c 5f       	subi	r16, 0xFC	; 252
    130a:	1f 4f       	sbci	r17, 0xFF	; 255
    130c:	9f e3       	ldi	r25, 0x3F	; 63
    130e:	99 83       	std	Y+1, r25	; 0x01
    1310:	0d c0       	rjmp	.+26     	; 0x132c <vfprintf+0x14a>
    1312:	83 36       	cpi	r24, 0x63	; 99
    1314:	31 f0       	breq	.+12     	; 0x1322 <vfprintf+0x140>
    1316:	83 37       	cpi	r24, 0x73	; 115
    1318:	71 f0       	breq	.+28     	; 0x1336 <vfprintf+0x154>
    131a:	83 35       	cpi	r24, 0x53	; 83
    131c:	09 f0       	breq	.+2      	; 0x1320 <vfprintf+0x13e>
    131e:	55 c0       	rjmp	.+170    	; 0x13ca <vfprintf+0x1e8>
    1320:	20 c0       	rjmp	.+64     	; 0x1362 <vfprintf+0x180>
    1322:	f8 01       	movw	r30, r16
    1324:	80 81       	ld	r24, Z
    1326:	89 83       	std	Y+1, r24	; 0x01
    1328:	0e 5f       	subi	r16, 0xFE	; 254
    132a:	1f 4f       	sbci	r17, 0xFF	; 255
    132c:	88 24       	eor	r8, r8
    132e:	83 94       	inc	r8
    1330:	91 2c       	mov	r9, r1
    1332:	53 01       	movw	r10, r6
    1334:	12 c0       	rjmp	.+36     	; 0x135a <vfprintf+0x178>
    1336:	28 01       	movw	r4, r16
    1338:	f2 e0       	ldi	r31, 0x02	; 2
    133a:	4f 0e       	add	r4, r31
    133c:	51 1c       	adc	r5, r1
    133e:	f8 01       	movw	r30, r16
    1340:	a0 80       	ld	r10, Z
    1342:	b1 80       	ldd	r11, Z+1	; 0x01
    1344:	36 fe       	sbrs	r3, 6
    1346:	03 c0       	rjmp	.+6      	; 0x134e <vfprintf+0x16c>
    1348:	69 2d       	mov	r22, r9
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <vfprintf+0x170>
    134e:	6f ef       	ldi	r22, 0xFF	; 255
    1350:	7f ef       	ldi	r23, 0xFF	; 255
    1352:	c5 01       	movw	r24, r10
    1354:	90 d2       	rcall	.+1312   	; 0x1876 <strnlen>
    1356:	4c 01       	movw	r8, r24
    1358:	82 01       	movw	r16, r4
    135a:	f3 2d       	mov	r31, r3
    135c:	ff 77       	andi	r31, 0x7F	; 127
    135e:	3f 2e       	mov	r3, r31
    1360:	15 c0       	rjmp	.+42     	; 0x138c <vfprintf+0x1aa>
    1362:	28 01       	movw	r4, r16
    1364:	22 e0       	ldi	r18, 0x02	; 2
    1366:	42 0e       	add	r4, r18
    1368:	51 1c       	adc	r5, r1
    136a:	f8 01       	movw	r30, r16
    136c:	a0 80       	ld	r10, Z
    136e:	b1 80       	ldd	r11, Z+1	; 0x01
    1370:	36 fe       	sbrs	r3, 6
    1372:	03 c0       	rjmp	.+6      	; 0x137a <vfprintf+0x198>
    1374:	69 2d       	mov	r22, r9
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	02 c0       	rjmp	.+4      	; 0x137e <vfprintf+0x19c>
    137a:	6f ef       	ldi	r22, 0xFF	; 255
    137c:	7f ef       	ldi	r23, 0xFF	; 255
    137e:	c5 01       	movw	r24, r10
    1380:	68 d2       	rcall	.+1232   	; 0x1852 <strnlen_P>
    1382:	4c 01       	movw	r8, r24
    1384:	f3 2d       	mov	r31, r3
    1386:	f0 68       	ori	r31, 0x80	; 128
    1388:	3f 2e       	mov	r3, r31
    138a:	82 01       	movw	r16, r4
    138c:	33 fc       	sbrc	r3, 3
    138e:	19 c0       	rjmp	.+50     	; 0x13c2 <vfprintf+0x1e0>
    1390:	82 2d       	mov	r24, r2
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	88 16       	cp	r8, r24
    1396:	99 06       	cpc	r9, r25
    1398:	a0 f4       	brcc	.+40     	; 0x13c2 <vfprintf+0x1e0>
    139a:	b6 01       	movw	r22, r12
    139c:	80 e2       	ldi	r24, 0x20	; 32
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	85 d2       	rcall	.+1290   	; 0x18ac <fputc>
    13a2:	2a 94       	dec	r2
    13a4:	f5 cf       	rjmp	.-22     	; 0x1390 <vfprintf+0x1ae>
    13a6:	f5 01       	movw	r30, r10
    13a8:	37 fc       	sbrc	r3, 7
    13aa:	85 91       	lpm	r24, Z+
    13ac:	37 fe       	sbrs	r3, 7
    13ae:	81 91       	ld	r24, Z+
    13b0:	5f 01       	movw	r10, r30
    13b2:	b6 01       	movw	r22, r12
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	7a d2       	rcall	.+1268   	; 0x18ac <fputc>
    13b8:	21 10       	cpse	r2, r1
    13ba:	2a 94       	dec	r2
    13bc:	21 e0       	ldi	r18, 0x01	; 1
    13be:	82 1a       	sub	r8, r18
    13c0:	91 08       	sbc	r9, r1
    13c2:	81 14       	cp	r8, r1
    13c4:	91 04       	cpc	r9, r1
    13c6:	79 f7       	brne	.-34     	; 0x13a6 <vfprintf+0x1c4>
    13c8:	e1 c0       	rjmp	.+450    	; 0x158c <vfprintf+0x3aa>
    13ca:	84 36       	cpi	r24, 0x64	; 100
    13cc:	11 f0       	breq	.+4      	; 0x13d2 <vfprintf+0x1f0>
    13ce:	89 36       	cpi	r24, 0x69	; 105
    13d0:	39 f5       	brne	.+78     	; 0x1420 <vfprintf+0x23e>
    13d2:	f8 01       	movw	r30, r16
    13d4:	37 fe       	sbrs	r3, 7
    13d6:	07 c0       	rjmp	.+14     	; 0x13e6 <vfprintf+0x204>
    13d8:	60 81       	ld	r22, Z
    13da:	71 81       	ldd	r23, Z+1	; 0x01
    13dc:	82 81       	ldd	r24, Z+2	; 0x02
    13de:	93 81       	ldd	r25, Z+3	; 0x03
    13e0:	0c 5f       	subi	r16, 0xFC	; 252
    13e2:	1f 4f       	sbci	r17, 0xFF	; 255
    13e4:	08 c0       	rjmp	.+16     	; 0x13f6 <vfprintf+0x214>
    13e6:	60 81       	ld	r22, Z
    13e8:	71 81       	ldd	r23, Z+1	; 0x01
    13ea:	07 2e       	mov	r0, r23
    13ec:	00 0c       	add	r0, r0
    13ee:	88 0b       	sbc	r24, r24
    13f0:	99 0b       	sbc	r25, r25
    13f2:	0e 5f       	subi	r16, 0xFE	; 254
    13f4:	1f 4f       	sbci	r17, 0xFF	; 255
    13f6:	f3 2d       	mov	r31, r3
    13f8:	ff 76       	andi	r31, 0x6F	; 111
    13fa:	3f 2e       	mov	r3, r31
    13fc:	97 ff       	sbrs	r25, 7
    13fe:	09 c0       	rjmp	.+18     	; 0x1412 <vfprintf+0x230>
    1400:	90 95       	com	r25
    1402:	80 95       	com	r24
    1404:	70 95       	com	r23
    1406:	61 95       	neg	r22
    1408:	7f 4f       	sbci	r23, 0xFF	; 255
    140a:	8f 4f       	sbci	r24, 0xFF	; 255
    140c:	9f 4f       	sbci	r25, 0xFF	; 255
    140e:	f0 68       	ori	r31, 0x80	; 128
    1410:	3f 2e       	mov	r3, r31
    1412:	2a e0       	ldi	r18, 0x0A	; 10
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	a3 01       	movw	r20, r6
    1418:	85 d2       	rcall	.+1290   	; 0x1924 <__ultoa_invert>
    141a:	88 2e       	mov	r8, r24
    141c:	86 18       	sub	r8, r6
    141e:	44 c0       	rjmp	.+136    	; 0x14a8 <vfprintf+0x2c6>
    1420:	85 37       	cpi	r24, 0x75	; 117
    1422:	31 f4       	brne	.+12     	; 0x1430 <vfprintf+0x24e>
    1424:	23 2d       	mov	r18, r3
    1426:	2f 7e       	andi	r18, 0xEF	; 239
    1428:	b2 2e       	mov	r11, r18
    142a:	2a e0       	ldi	r18, 0x0A	; 10
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	25 c0       	rjmp	.+74     	; 0x147a <vfprintf+0x298>
    1430:	93 2d       	mov	r25, r3
    1432:	99 7f       	andi	r25, 0xF9	; 249
    1434:	b9 2e       	mov	r11, r25
    1436:	8f 36       	cpi	r24, 0x6F	; 111
    1438:	c1 f0       	breq	.+48     	; 0x146a <vfprintf+0x288>
    143a:	18 f4       	brcc	.+6      	; 0x1442 <vfprintf+0x260>
    143c:	88 35       	cpi	r24, 0x58	; 88
    143e:	79 f0       	breq	.+30     	; 0x145e <vfprintf+0x27c>
    1440:	ae c0       	rjmp	.+348    	; 0x159e <vfprintf+0x3bc>
    1442:	80 37       	cpi	r24, 0x70	; 112
    1444:	19 f0       	breq	.+6      	; 0x144c <vfprintf+0x26a>
    1446:	88 37       	cpi	r24, 0x78	; 120
    1448:	21 f0       	breq	.+8      	; 0x1452 <vfprintf+0x270>
    144a:	a9 c0       	rjmp	.+338    	; 0x159e <vfprintf+0x3bc>
    144c:	e9 2f       	mov	r30, r25
    144e:	e0 61       	ori	r30, 0x10	; 16
    1450:	be 2e       	mov	r11, r30
    1452:	b4 fe       	sbrs	r11, 4
    1454:	0d c0       	rjmp	.+26     	; 0x1470 <vfprintf+0x28e>
    1456:	fb 2d       	mov	r31, r11
    1458:	f4 60       	ori	r31, 0x04	; 4
    145a:	bf 2e       	mov	r11, r31
    145c:	09 c0       	rjmp	.+18     	; 0x1470 <vfprintf+0x28e>
    145e:	34 fe       	sbrs	r3, 4
    1460:	0a c0       	rjmp	.+20     	; 0x1476 <vfprintf+0x294>
    1462:	29 2f       	mov	r18, r25
    1464:	26 60       	ori	r18, 0x06	; 6
    1466:	b2 2e       	mov	r11, r18
    1468:	06 c0       	rjmp	.+12     	; 0x1476 <vfprintf+0x294>
    146a:	28 e0       	ldi	r18, 0x08	; 8
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	05 c0       	rjmp	.+10     	; 0x147a <vfprintf+0x298>
    1470:	20 e1       	ldi	r18, 0x10	; 16
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	02 c0       	rjmp	.+4      	; 0x147a <vfprintf+0x298>
    1476:	20 e1       	ldi	r18, 0x10	; 16
    1478:	32 e0       	ldi	r19, 0x02	; 2
    147a:	f8 01       	movw	r30, r16
    147c:	b7 fe       	sbrs	r11, 7
    147e:	07 c0       	rjmp	.+14     	; 0x148e <vfprintf+0x2ac>
    1480:	60 81       	ld	r22, Z
    1482:	71 81       	ldd	r23, Z+1	; 0x01
    1484:	82 81       	ldd	r24, Z+2	; 0x02
    1486:	93 81       	ldd	r25, Z+3	; 0x03
    1488:	0c 5f       	subi	r16, 0xFC	; 252
    148a:	1f 4f       	sbci	r17, 0xFF	; 255
    148c:	06 c0       	rjmp	.+12     	; 0x149a <vfprintf+0x2b8>
    148e:	60 81       	ld	r22, Z
    1490:	71 81       	ldd	r23, Z+1	; 0x01
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	0e 5f       	subi	r16, 0xFE	; 254
    1498:	1f 4f       	sbci	r17, 0xFF	; 255
    149a:	a3 01       	movw	r20, r6
    149c:	43 d2       	rcall	.+1158   	; 0x1924 <__ultoa_invert>
    149e:	88 2e       	mov	r8, r24
    14a0:	86 18       	sub	r8, r6
    14a2:	fb 2d       	mov	r31, r11
    14a4:	ff 77       	andi	r31, 0x7F	; 127
    14a6:	3f 2e       	mov	r3, r31
    14a8:	36 fe       	sbrs	r3, 6
    14aa:	0d c0       	rjmp	.+26     	; 0x14c6 <vfprintf+0x2e4>
    14ac:	23 2d       	mov	r18, r3
    14ae:	2e 7f       	andi	r18, 0xFE	; 254
    14b0:	a2 2e       	mov	r10, r18
    14b2:	89 14       	cp	r8, r9
    14b4:	58 f4       	brcc	.+22     	; 0x14cc <vfprintf+0x2ea>
    14b6:	34 fe       	sbrs	r3, 4
    14b8:	0b c0       	rjmp	.+22     	; 0x14d0 <vfprintf+0x2ee>
    14ba:	32 fc       	sbrc	r3, 2
    14bc:	09 c0       	rjmp	.+18     	; 0x14d0 <vfprintf+0x2ee>
    14be:	83 2d       	mov	r24, r3
    14c0:	8e 7e       	andi	r24, 0xEE	; 238
    14c2:	a8 2e       	mov	r10, r24
    14c4:	05 c0       	rjmp	.+10     	; 0x14d0 <vfprintf+0x2ee>
    14c6:	b8 2c       	mov	r11, r8
    14c8:	a3 2c       	mov	r10, r3
    14ca:	03 c0       	rjmp	.+6      	; 0x14d2 <vfprintf+0x2f0>
    14cc:	b8 2c       	mov	r11, r8
    14ce:	01 c0       	rjmp	.+2      	; 0x14d2 <vfprintf+0x2f0>
    14d0:	b9 2c       	mov	r11, r9
    14d2:	a4 fe       	sbrs	r10, 4
    14d4:	0f c0       	rjmp	.+30     	; 0x14f4 <vfprintf+0x312>
    14d6:	fe 01       	movw	r30, r28
    14d8:	e8 0d       	add	r30, r8
    14da:	f1 1d       	adc	r31, r1
    14dc:	80 81       	ld	r24, Z
    14de:	80 33       	cpi	r24, 0x30	; 48
    14e0:	21 f4       	brne	.+8      	; 0x14ea <vfprintf+0x308>
    14e2:	9a 2d       	mov	r25, r10
    14e4:	99 7e       	andi	r25, 0xE9	; 233
    14e6:	a9 2e       	mov	r10, r25
    14e8:	09 c0       	rjmp	.+18     	; 0x14fc <vfprintf+0x31a>
    14ea:	a2 fe       	sbrs	r10, 2
    14ec:	06 c0       	rjmp	.+12     	; 0x14fa <vfprintf+0x318>
    14ee:	b3 94       	inc	r11
    14f0:	b3 94       	inc	r11
    14f2:	04 c0       	rjmp	.+8      	; 0x14fc <vfprintf+0x31a>
    14f4:	8a 2d       	mov	r24, r10
    14f6:	86 78       	andi	r24, 0x86	; 134
    14f8:	09 f0       	breq	.+2      	; 0x14fc <vfprintf+0x31a>
    14fa:	b3 94       	inc	r11
    14fc:	a3 fc       	sbrc	r10, 3
    14fe:	10 c0       	rjmp	.+32     	; 0x1520 <vfprintf+0x33e>
    1500:	a0 fe       	sbrs	r10, 0
    1502:	06 c0       	rjmp	.+12     	; 0x1510 <vfprintf+0x32e>
    1504:	b2 14       	cp	r11, r2
    1506:	80 f4       	brcc	.+32     	; 0x1528 <vfprintf+0x346>
    1508:	28 0c       	add	r2, r8
    150a:	92 2c       	mov	r9, r2
    150c:	9b 18       	sub	r9, r11
    150e:	0d c0       	rjmp	.+26     	; 0x152a <vfprintf+0x348>
    1510:	b2 14       	cp	r11, r2
    1512:	58 f4       	brcc	.+22     	; 0x152a <vfprintf+0x348>
    1514:	b6 01       	movw	r22, r12
    1516:	80 e2       	ldi	r24, 0x20	; 32
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	c8 d1       	rcall	.+912    	; 0x18ac <fputc>
    151c:	b3 94       	inc	r11
    151e:	f8 cf       	rjmp	.-16     	; 0x1510 <vfprintf+0x32e>
    1520:	b2 14       	cp	r11, r2
    1522:	18 f4       	brcc	.+6      	; 0x152a <vfprintf+0x348>
    1524:	2b 18       	sub	r2, r11
    1526:	02 c0       	rjmp	.+4      	; 0x152c <vfprintf+0x34a>
    1528:	98 2c       	mov	r9, r8
    152a:	21 2c       	mov	r2, r1
    152c:	a4 fe       	sbrs	r10, 4
    152e:	0f c0       	rjmp	.+30     	; 0x154e <vfprintf+0x36c>
    1530:	b6 01       	movw	r22, r12
    1532:	80 e3       	ldi	r24, 0x30	; 48
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	ba d1       	rcall	.+884    	; 0x18ac <fputc>
    1538:	a2 fe       	sbrs	r10, 2
    153a:	16 c0       	rjmp	.+44     	; 0x1568 <vfprintf+0x386>
    153c:	a1 fc       	sbrc	r10, 1
    153e:	03 c0       	rjmp	.+6      	; 0x1546 <vfprintf+0x364>
    1540:	88 e7       	ldi	r24, 0x78	; 120
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	02 c0       	rjmp	.+4      	; 0x154a <vfprintf+0x368>
    1546:	88 e5       	ldi	r24, 0x58	; 88
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	b6 01       	movw	r22, r12
    154c:	0c c0       	rjmp	.+24     	; 0x1566 <vfprintf+0x384>
    154e:	8a 2d       	mov	r24, r10
    1550:	86 78       	andi	r24, 0x86	; 134
    1552:	51 f0       	breq	.+20     	; 0x1568 <vfprintf+0x386>
    1554:	a1 fe       	sbrs	r10, 1
    1556:	02 c0       	rjmp	.+4      	; 0x155c <vfprintf+0x37a>
    1558:	8b e2       	ldi	r24, 0x2B	; 43
    155a:	01 c0       	rjmp	.+2      	; 0x155e <vfprintf+0x37c>
    155c:	80 e2       	ldi	r24, 0x20	; 32
    155e:	a7 fc       	sbrc	r10, 7
    1560:	8d e2       	ldi	r24, 0x2D	; 45
    1562:	b6 01       	movw	r22, r12
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	a2 d1       	rcall	.+836    	; 0x18ac <fputc>
    1568:	89 14       	cp	r8, r9
    156a:	30 f4       	brcc	.+12     	; 0x1578 <vfprintf+0x396>
    156c:	b6 01       	movw	r22, r12
    156e:	80 e3       	ldi	r24, 0x30	; 48
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	9c d1       	rcall	.+824    	; 0x18ac <fputc>
    1574:	9a 94       	dec	r9
    1576:	f8 cf       	rjmp	.-16     	; 0x1568 <vfprintf+0x386>
    1578:	8a 94       	dec	r8
    157a:	f3 01       	movw	r30, r6
    157c:	e8 0d       	add	r30, r8
    157e:	f1 1d       	adc	r31, r1
    1580:	80 81       	ld	r24, Z
    1582:	b6 01       	movw	r22, r12
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	92 d1       	rcall	.+804    	; 0x18ac <fputc>
    1588:	81 10       	cpse	r8, r1
    158a:	f6 cf       	rjmp	.-20     	; 0x1578 <vfprintf+0x396>
    158c:	22 20       	and	r2, r2
    158e:	09 f4       	brne	.+2      	; 0x1592 <vfprintf+0x3b0>
    1590:	4e ce       	rjmp	.-868    	; 0x122e <vfprintf+0x4c>
    1592:	b6 01       	movw	r22, r12
    1594:	80 e2       	ldi	r24, 0x20	; 32
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	89 d1       	rcall	.+786    	; 0x18ac <fputc>
    159a:	2a 94       	dec	r2
    159c:	f7 cf       	rjmp	.-18     	; 0x158c <vfprintf+0x3aa>
    159e:	f6 01       	movw	r30, r12
    15a0:	86 81       	ldd	r24, Z+6	; 0x06
    15a2:	97 81       	ldd	r25, Z+7	; 0x07
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <vfprintf+0x3c8>
    15a6:	8f ef       	ldi	r24, 0xFF	; 255
    15a8:	9f ef       	ldi	r25, 0xFF	; 255
    15aa:	2b 96       	adiw	r28, 0x0b	; 11
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	1f 91       	pop	r17
    15bc:	0f 91       	pop	r16
    15be:	ff 90       	pop	r15
    15c0:	ef 90       	pop	r14
    15c2:	df 90       	pop	r13
    15c4:	cf 90       	pop	r12
    15c6:	bf 90       	pop	r11
    15c8:	af 90       	pop	r10
    15ca:	9f 90       	pop	r9
    15cc:	8f 90       	pop	r8
    15ce:	7f 90       	pop	r7
    15d0:	6f 90       	pop	r6
    15d2:	5f 90       	pop	r5
    15d4:	4f 90       	pop	r4
    15d6:	3f 90       	pop	r3
    15d8:	2f 90       	pop	r2
    15da:	08 95       	ret

000015dc <calloc>:
    15dc:	0f 93       	push	r16
    15de:	1f 93       	push	r17
    15e0:	cf 93       	push	r28
    15e2:	df 93       	push	r29
    15e4:	86 9f       	mul	r24, r22
    15e6:	80 01       	movw	r16, r0
    15e8:	87 9f       	mul	r24, r23
    15ea:	10 0d       	add	r17, r0
    15ec:	96 9f       	mul	r25, r22
    15ee:	10 0d       	add	r17, r0
    15f0:	11 24       	eor	r1, r1
    15f2:	c8 01       	movw	r24, r16
    15f4:	0d d0       	rcall	.+26     	; 0x1610 <malloc>
    15f6:	ec 01       	movw	r28, r24
    15f8:	00 97       	sbiw	r24, 0x00	; 0
    15fa:	21 f0       	breq	.+8      	; 0x1604 <calloc+0x28>
    15fc:	a8 01       	movw	r20, r16
    15fe:	60 e0       	ldi	r22, 0x00	; 0
    1600:	70 e0       	ldi	r23, 0x00	; 0
    1602:	32 d1       	rcall	.+612    	; 0x1868 <memset>
    1604:	ce 01       	movw	r24, r28
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	1f 91       	pop	r17
    160c:	0f 91       	pop	r16
    160e:	08 95       	ret

00001610 <malloc>:
    1610:	0f 93       	push	r16
    1612:	1f 93       	push	r17
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
    1618:	82 30       	cpi	r24, 0x02	; 2
    161a:	91 05       	cpc	r25, r1
    161c:	10 f4       	brcc	.+4      	; 0x1622 <malloc+0x12>
    161e:	82 e0       	ldi	r24, 0x02	; 2
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	e0 91 0a 03 	lds	r30, 0x030A	; 0x80030a <__flp>
    1626:	f0 91 0b 03 	lds	r31, 0x030B	; 0x80030b <__flp+0x1>
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	a0 e0       	ldi	r26, 0x00	; 0
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	30 97       	sbiw	r30, 0x00	; 0
    1634:	19 f1       	breq	.+70     	; 0x167c <malloc+0x6c>
    1636:	40 81       	ld	r20, Z
    1638:	51 81       	ldd	r21, Z+1	; 0x01
    163a:	02 81       	ldd	r16, Z+2	; 0x02
    163c:	13 81       	ldd	r17, Z+3	; 0x03
    163e:	48 17       	cp	r20, r24
    1640:	59 07       	cpc	r21, r25
    1642:	c8 f0       	brcs	.+50     	; 0x1676 <malloc+0x66>
    1644:	84 17       	cp	r24, r20
    1646:	95 07       	cpc	r25, r21
    1648:	69 f4       	brne	.+26     	; 0x1664 <malloc+0x54>
    164a:	10 97       	sbiw	r26, 0x00	; 0
    164c:	31 f0       	breq	.+12     	; 0x165a <malloc+0x4a>
    164e:	12 96       	adiw	r26, 0x02	; 2
    1650:	0c 93       	st	X, r16
    1652:	12 97       	sbiw	r26, 0x02	; 2
    1654:	13 96       	adiw	r26, 0x03	; 3
    1656:	1c 93       	st	X, r17
    1658:	27 c0       	rjmp	.+78     	; 0x16a8 <malloc+0x98>
    165a:	00 93 0a 03 	sts	0x030A, r16	; 0x80030a <__flp>
    165e:	10 93 0b 03 	sts	0x030B, r17	; 0x80030b <__flp+0x1>
    1662:	22 c0       	rjmp	.+68     	; 0x16a8 <malloc+0x98>
    1664:	21 15       	cp	r18, r1
    1666:	31 05       	cpc	r19, r1
    1668:	19 f0       	breq	.+6      	; 0x1670 <malloc+0x60>
    166a:	42 17       	cp	r20, r18
    166c:	53 07       	cpc	r21, r19
    166e:	18 f4       	brcc	.+6      	; 0x1676 <malloc+0x66>
    1670:	9a 01       	movw	r18, r20
    1672:	bd 01       	movw	r22, r26
    1674:	ef 01       	movw	r28, r30
    1676:	df 01       	movw	r26, r30
    1678:	f8 01       	movw	r30, r16
    167a:	db cf       	rjmp	.-74     	; 0x1632 <malloc+0x22>
    167c:	21 15       	cp	r18, r1
    167e:	31 05       	cpc	r19, r1
    1680:	f9 f0       	breq	.+62     	; 0x16c0 <malloc+0xb0>
    1682:	28 1b       	sub	r18, r24
    1684:	39 0b       	sbc	r19, r25
    1686:	24 30       	cpi	r18, 0x04	; 4
    1688:	31 05       	cpc	r19, r1
    168a:	80 f4       	brcc	.+32     	; 0x16ac <malloc+0x9c>
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	9b 81       	ldd	r25, Y+3	; 0x03
    1690:	61 15       	cp	r22, r1
    1692:	71 05       	cpc	r23, r1
    1694:	21 f0       	breq	.+8      	; 0x169e <malloc+0x8e>
    1696:	fb 01       	movw	r30, r22
    1698:	93 83       	std	Z+3, r25	; 0x03
    169a:	82 83       	std	Z+2, r24	; 0x02
    169c:	04 c0       	rjmp	.+8      	; 0x16a6 <malloc+0x96>
    169e:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <__flp+0x1>
    16a2:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <__flp>
    16a6:	fe 01       	movw	r30, r28
    16a8:	32 96       	adiw	r30, 0x02	; 2
    16aa:	44 c0       	rjmp	.+136    	; 0x1734 <malloc+0x124>
    16ac:	fe 01       	movw	r30, r28
    16ae:	e2 0f       	add	r30, r18
    16b0:	f3 1f       	adc	r31, r19
    16b2:	81 93       	st	Z+, r24
    16b4:	91 93       	st	Z+, r25
    16b6:	22 50       	subi	r18, 0x02	; 2
    16b8:	31 09       	sbc	r19, r1
    16ba:	39 83       	std	Y+1, r19	; 0x01
    16bc:	28 83       	st	Y, r18
    16be:	3a c0       	rjmp	.+116    	; 0x1734 <malloc+0x124>
    16c0:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <__brkval>
    16c4:	30 91 09 03 	lds	r19, 0x0309	; 0x800309 <__brkval+0x1>
    16c8:	23 2b       	or	r18, r19
    16ca:	41 f4       	brne	.+16     	; 0x16dc <malloc+0xcc>
    16cc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    16d0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    16d4:	30 93 09 03 	sts	0x0309, r19	; 0x800309 <__brkval+0x1>
    16d8:	20 93 08 03 	sts	0x0308, r18	; 0x800308 <__brkval>
    16dc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    16e0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    16e4:	21 15       	cp	r18, r1
    16e6:	31 05       	cpc	r19, r1
    16e8:	41 f4       	brne	.+16     	; 0x16fa <malloc+0xea>
    16ea:	2d b7       	in	r18, 0x3d	; 61
    16ec:	3e b7       	in	r19, 0x3e	; 62
    16ee:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    16f2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    16f6:	24 1b       	sub	r18, r20
    16f8:	35 0b       	sbc	r19, r21
    16fa:	e0 91 08 03 	lds	r30, 0x0308	; 0x800308 <__brkval>
    16fe:	f0 91 09 03 	lds	r31, 0x0309	; 0x800309 <__brkval+0x1>
    1702:	e2 17       	cp	r30, r18
    1704:	f3 07       	cpc	r31, r19
    1706:	a0 f4       	brcc	.+40     	; 0x1730 <malloc+0x120>
    1708:	2e 1b       	sub	r18, r30
    170a:	3f 0b       	sbc	r19, r31
    170c:	28 17       	cp	r18, r24
    170e:	39 07       	cpc	r19, r25
    1710:	78 f0       	brcs	.+30     	; 0x1730 <malloc+0x120>
    1712:	ac 01       	movw	r20, r24
    1714:	4e 5f       	subi	r20, 0xFE	; 254
    1716:	5f 4f       	sbci	r21, 0xFF	; 255
    1718:	24 17       	cp	r18, r20
    171a:	35 07       	cpc	r19, r21
    171c:	48 f0       	brcs	.+18     	; 0x1730 <malloc+0x120>
    171e:	4e 0f       	add	r20, r30
    1720:	5f 1f       	adc	r21, r31
    1722:	50 93 09 03 	sts	0x0309, r21	; 0x800309 <__brkval+0x1>
    1726:	40 93 08 03 	sts	0x0308, r20	; 0x800308 <__brkval>
    172a:	81 93       	st	Z+, r24
    172c:	91 93       	st	Z+, r25
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <malloc+0x124>
    1730:	e0 e0       	ldi	r30, 0x00	; 0
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	cf 01       	movw	r24, r30
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	1f 91       	pop	r17
    173c:	0f 91       	pop	r16
    173e:	08 95       	ret

00001740 <free>:
    1740:	cf 93       	push	r28
    1742:	df 93       	push	r29
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	09 f4       	brne	.+2      	; 0x174a <free+0xa>
    1748:	81 c0       	rjmp	.+258    	; 0x184c <free+0x10c>
    174a:	fc 01       	movw	r30, r24
    174c:	32 97       	sbiw	r30, 0x02	; 2
    174e:	13 82       	std	Z+3, r1	; 0x03
    1750:	12 82       	std	Z+2, r1	; 0x02
    1752:	a0 91 0a 03 	lds	r26, 0x030A	; 0x80030a <__flp>
    1756:	b0 91 0b 03 	lds	r27, 0x030B	; 0x80030b <__flp+0x1>
    175a:	10 97       	sbiw	r26, 0x00	; 0
    175c:	81 f4       	brne	.+32     	; 0x177e <free+0x3e>
    175e:	20 81       	ld	r18, Z
    1760:	31 81       	ldd	r19, Z+1	; 0x01
    1762:	82 0f       	add	r24, r18
    1764:	93 1f       	adc	r25, r19
    1766:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <__brkval>
    176a:	30 91 09 03 	lds	r19, 0x0309	; 0x800309 <__brkval+0x1>
    176e:	28 17       	cp	r18, r24
    1770:	39 07       	cpc	r19, r25
    1772:	51 f5       	brne	.+84     	; 0x17c8 <free+0x88>
    1774:	f0 93 09 03 	sts	0x0309, r31	; 0x800309 <__brkval+0x1>
    1778:	e0 93 08 03 	sts	0x0308, r30	; 0x800308 <__brkval>
    177c:	67 c0       	rjmp	.+206    	; 0x184c <free+0x10c>
    177e:	ed 01       	movw	r28, r26
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	ce 17       	cp	r28, r30
    1786:	df 07       	cpc	r29, r31
    1788:	40 f4       	brcc	.+16     	; 0x179a <free+0x5a>
    178a:	4a 81       	ldd	r20, Y+2	; 0x02
    178c:	5b 81       	ldd	r21, Y+3	; 0x03
    178e:	9e 01       	movw	r18, r28
    1790:	41 15       	cp	r20, r1
    1792:	51 05       	cpc	r21, r1
    1794:	f1 f0       	breq	.+60     	; 0x17d2 <free+0x92>
    1796:	ea 01       	movw	r28, r20
    1798:	f5 cf       	rjmp	.-22     	; 0x1784 <free+0x44>
    179a:	d3 83       	std	Z+3, r29	; 0x03
    179c:	c2 83       	std	Z+2, r28	; 0x02
    179e:	40 81       	ld	r20, Z
    17a0:	51 81       	ldd	r21, Z+1	; 0x01
    17a2:	84 0f       	add	r24, r20
    17a4:	95 1f       	adc	r25, r21
    17a6:	c8 17       	cp	r28, r24
    17a8:	d9 07       	cpc	r29, r25
    17aa:	59 f4       	brne	.+22     	; 0x17c2 <free+0x82>
    17ac:	88 81       	ld	r24, Y
    17ae:	99 81       	ldd	r25, Y+1	; 0x01
    17b0:	84 0f       	add	r24, r20
    17b2:	95 1f       	adc	r25, r21
    17b4:	02 96       	adiw	r24, 0x02	; 2
    17b6:	91 83       	std	Z+1, r25	; 0x01
    17b8:	80 83       	st	Z, r24
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	9b 81       	ldd	r25, Y+3	; 0x03
    17be:	93 83       	std	Z+3, r25	; 0x03
    17c0:	82 83       	std	Z+2, r24	; 0x02
    17c2:	21 15       	cp	r18, r1
    17c4:	31 05       	cpc	r19, r1
    17c6:	29 f4       	brne	.+10     	; 0x17d2 <free+0x92>
    17c8:	f0 93 0b 03 	sts	0x030B, r31	; 0x80030b <__flp+0x1>
    17cc:	e0 93 0a 03 	sts	0x030A, r30	; 0x80030a <__flp>
    17d0:	3d c0       	rjmp	.+122    	; 0x184c <free+0x10c>
    17d2:	e9 01       	movw	r28, r18
    17d4:	fb 83       	std	Y+3, r31	; 0x03
    17d6:	ea 83       	std	Y+2, r30	; 0x02
    17d8:	49 91       	ld	r20, Y+
    17da:	59 91       	ld	r21, Y+
    17dc:	c4 0f       	add	r28, r20
    17de:	d5 1f       	adc	r29, r21
    17e0:	ec 17       	cp	r30, r28
    17e2:	fd 07       	cpc	r31, r29
    17e4:	61 f4       	brne	.+24     	; 0x17fe <free+0xbe>
    17e6:	80 81       	ld	r24, Z
    17e8:	91 81       	ldd	r25, Z+1	; 0x01
    17ea:	84 0f       	add	r24, r20
    17ec:	95 1f       	adc	r25, r21
    17ee:	02 96       	adiw	r24, 0x02	; 2
    17f0:	e9 01       	movw	r28, r18
    17f2:	99 83       	std	Y+1, r25	; 0x01
    17f4:	88 83       	st	Y, r24
    17f6:	82 81       	ldd	r24, Z+2	; 0x02
    17f8:	93 81       	ldd	r25, Z+3	; 0x03
    17fa:	9b 83       	std	Y+3, r25	; 0x03
    17fc:	8a 83       	std	Y+2, r24	; 0x02
    17fe:	e0 e0       	ldi	r30, 0x00	; 0
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	12 96       	adiw	r26, 0x02	; 2
    1804:	8d 91       	ld	r24, X+
    1806:	9c 91       	ld	r25, X
    1808:	13 97       	sbiw	r26, 0x03	; 3
    180a:	00 97       	sbiw	r24, 0x00	; 0
    180c:	19 f0       	breq	.+6      	; 0x1814 <free+0xd4>
    180e:	fd 01       	movw	r30, r26
    1810:	dc 01       	movw	r26, r24
    1812:	f7 cf       	rjmp	.-18     	; 0x1802 <free+0xc2>
    1814:	8d 91       	ld	r24, X+
    1816:	9c 91       	ld	r25, X
    1818:	11 97       	sbiw	r26, 0x01	; 1
    181a:	9d 01       	movw	r18, r26
    181c:	2e 5f       	subi	r18, 0xFE	; 254
    181e:	3f 4f       	sbci	r19, 0xFF	; 255
    1820:	82 0f       	add	r24, r18
    1822:	93 1f       	adc	r25, r19
    1824:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <__brkval>
    1828:	30 91 09 03 	lds	r19, 0x0309	; 0x800309 <__brkval+0x1>
    182c:	28 17       	cp	r18, r24
    182e:	39 07       	cpc	r19, r25
    1830:	69 f4       	brne	.+26     	; 0x184c <free+0x10c>
    1832:	30 97       	sbiw	r30, 0x00	; 0
    1834:	29 f4       	brne	.+10     	; 0x1840 <free+0x100>
    1836:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <__flp+0x1>
    183a:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <__flp>
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <free+0x104>
    1840:	13 82       	std	Z+3, r1	; 0x03
    1842:	12 82       	std	Z+2, r1	; 0x02
    1844:	b0 93 09 03 	sts	0x0309, r27	; 0x800309 <__brkval+0x1>
    1848:	a0 93 08 03 	sts	0x0308, r26	; 0x800308 <__brkval>
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	08 95       	ret

00001852 <strnlen_P>:
    1852:	fc 01       	movw	r30, r24
    1854:	05 90       	lpm	r0, Z+
    1856:	61 50       	subi	r22, 0x01	; 1
    1858:	70 40       	sbci	r23, 0x00	; 0
    185a:	01 10       	cpse	r0, r1
    185c:	d8 f7       	brcc	.-10     	; 0x1854 <strnlen_P+0x2>
    185e:	80 95       	com	r24
    1860:	90 95       	com	r25
    1862:	8e 0f       	add	r24, r30
    1864:	9f 1f       	adc	r25, r31
    1866:	08 95       	ret

00001868 <memset>:
    1868:	dc 01       	movw	r26, r24
    186a:	01 c0       	rjmp	.+2      	; 0x186e <memset+0x6>
    186c:	6d 93       	st	X+, r22
    186e:	41 50       	subi	r20, 0x01	; 1
    1870:	50 40       	sbci	r21, 0x00	; 0
    1872:	e0 f7       	brcc	.-8      	; 0x186c <memset+0x4>
    1874:	08 95       	ret

00001876 <strnlen>:
    1876:	fc 01       	movw	r30, r24
    1878:	61 50       	subi	r22, 0x01	; 1
    187a:	70 40       	sbci	r23, 0x00	; 0
    187c:	01 90       	ld	r0, Z+
    187e:	01 10       	cpse	r0, r1
    1880:	d8 f7       	brcc	.-10     	; 0x1878 <strnlen+0x2>
    1882:	80 95       	com	r24
    1884:	90 95       	com	r25
    1886:	8e 0f       	add	r24, r30
    1888:	9f 1f       	adc	r25, r31
    188a:	08 95       	ret

0000188c <strrev>:
    188c:	dc 01       	movw	r26, r24
    188e:	fc 01       	movw	r30, r24
    1890:	67 2f       	mov	r22, r23
    1892:	71 91       	ld	r23, Z+
    1894:	77 23       	and	r23, r23
    1896:	e1 f7       	brne	.-8      	; 0x1890 <strrev+0x4>
    1898:	32 97       	sbiw	r30, 0x02	; 2
    189a:	04 c0       	rjmp	.+8      	; 0x18a4 <strrev+0x18>
    189c:	7c 91       	ld	r23, X
    189e:	6d 93       	st	X+, r22
    18a0:	70 83       	st	Z, r23
    18a2:	62 91       	ld	r22, -Z
    18a4:	ae 17       	cp	r26, r30
    18a6:	bf 07       	cpc	r27, r31
    18a8:	c8 f3       	brcs	.-14     	; 0x189c <strrev+0x10>
    18aa:	08 95       	ret

000018ac <fputc>:
    18ac:	0f 93       	push	r16
    18ae:	1f 93       	push	r17
    18b0:	cf 93       	push	r28
    18b2:	df 93       	push	r29
    18b4:	fb 01       	movw	r30, r22
    18b6:	23 81       	ldd	r18, Z+3	; 0x03
    18b8:	21 fd       	sbrc	r18, 1
    18ba:	03 c0       	rjmp	.+6      	; 0x18c2 <fputc+0x16>
    18bc:	8f ef       	ldi	r24, 0xFF	; 255
    18be:	9f ef       	ldi	r25, 0xFF	; 255
    18c0:	2c c0       	rjmp	.+88     	; 0x191a <fputc+0x6e>
    18c2:	22 ff       	sbrs	r18, 2
    18c4:	16 c0       	rjmp	.+44     	; 0x18f2 <fputc+0x46>
    18c6:	46 81       	ldd	r20, Z+6	; 0x06
    18c8:	57 81       	ldd	r21, Z+7	; 0x07
    18ca:	24 81       	ldd	r18, Z+4	; 0x04
    18cc:	35 81       	ldd	r19, Z+5	; 0x05
    18ce:	42 17       	cp	r20, r18
    18d0:	53 07       	cpc	r21, r19
    18d2:	44 f4       	brge	.+16     	; 0x18e4 <fputc+0x38>
    18d4:	a0 81       	ld	r26, Z
    18d6:	b1 81       	ldd	r27, Z+1	; 0x01
    18d8:	9d 01       	movw	r18, r26
    18da:	2f 5f       	subi	r18, 0xFF	; 255
    18dc:	3f 4f       	sbci	r19, 0xFF	; 255
    18de:	31 83       	std	Z+1, r19	; 0x01
    18e0:	20 83       	st	Z, r18
    18e2:	8c 93       	st	X, r24
    18e4:	26 81       	ldd	r18, Z+6	; 0x06
    18e6:	37 81       	ldd	r19, Z+7	; 0x07
    18e8:	2f 5f       	subi	r18, 0xFF	; 255
    18ea:	3f 4f       	sbci	r19, 0xFF	; 255
    18ec:	37 83       	std	Z+7, r19	; 0x07
    18ee:	26 83       	std	Z+6, r18	; 0x06
    18f0:	14 c0       	rjmp	.+40     	; 0x191a <fputc+0x6e>
    18f2:	8b 01       	movw	r16, r22
    18f4:	ec 01       	movw	r28, r24
    18f6:	fb 01       	movw	r30, r22
    18f8:	00 84       	ldd	r0, Z+8	; 0x08
    18fa:	f1 85       	ldd	r31, Z+9	; 0x09
    18fc:	e0 2d       	mov	r30, r0
    18fe:	09 95       	icall
    1900:	89 2b       	or	r24, r25
    1902:	e1 f6       	brne	.-72     	; 0x18bc <fputc+0x10>
    1904:	d8 01       	movw	r26, r16
    1906:	16 96       	adiw	r26, 0x06	; 6
    1908:	8d 91       	ld	r24, X+
    190a:	9c 91       	ld	r25, X
    190c:	17 97       	sbiw	r26, 0x07	; 7
    190e:	01 96       	adiw	r24, 0x01	; 1
    1910:	17 96       	adiw	r26, 0x07	; 7
    1912:	9c 93       	st	X, r25
    1914:	8e 93       	st	-X, r24
    1916:	16 97       	sbiw	r26, 0x06	; 6
    1918:	ce 01       	movw	r24, r28
    191a:	df 91       	pop	r29
    191c:	cf 91       	pop	r28
    191e:	1f 91       	pop	r17
    1920:	0f 91       	pop	r16
    1922:	08 95       	ret

00001924 <__ultoa_invert>:
    1924:	fa 01       	movw	r30, r20
    1926:	aa 27       	eor	r26, r26
    1928:	28 30       	cpi	r18, 0x08	; 8
    192a:	51 f1       	breq	.+84     	; 0x1980 <__ultoa_invert+0x5c>
    192c:	20 31       	cpi	r18, 0x10	; 16
    192e:	81 f1       	breq	.+96     	; 0x1990 <__ultoa_invert+0x6c>
    1930:	e8 94       	clt
    1932:	6f 93       	push	r22
    1934:	6e 7f       	andi	r22, 0xFE	; 254
    1936:	6e 5f       	subi	r22, 0xFE	; 254
    1938:	7f 4f       	sbci	r23, 0xFF	; 255
    193a:	8f 4f       	sbci	r24, 0xFF	; 255
    193c:	9f 4f       	sbci	r25, 0xFF	; 255
    193e:	af 4f       	sbci	r26, 0xFF	; 255
    1940:	b1 e0       	ldi	r27, 0x01	; 1
    1942:	3e d0       	rcall	.+124    	; 0x19c0 <__ultoa_invert+0x9c>
    1944:	b4 e0       	ldi	r27, 0x04	; 4
    1946:	3c d0       	rcall	.+120    	; 0x19c0 <__ultoa_invert+0x9c>
    1948:	67 0f       	add	r22, r23
    194a:	78 1f       	adc	r23, r24
    194c:	89 1f       	adc	r24, r25
    194e:	9a 1f       	adc	r25, r26
    1950:	a1 1d       	adc	r26, r1
    1952:	68 0f       	add	r22, r24
    1954:	79 1f       	adc	r23, r25
    1956:	8a 1f       	adc	r24, r26
    1958:	91 1d       	adc	r25, r1
    195a:	a1 1d       	adc	r26, r1
    195c:	6a 0f       	add	r22, r26
    195e:	71 1d       	adc	r23, r1
    1960:	81 1d       	adc	r24, r1
    1962:	91 1d       	adc	r25, r1
    1964:	a1 1d       	adc	r26, r1
    1966:	20 d0       	rcall	.+64     	; 0x19a8 <__ultoa_invert+0x84>
    1968:	09 f4       	brne	.+2      	; 0x196c <__ultoa_invert+0x48>
    196a:	68 94       	set
    196c:	3f 91       	pop	r19
    196e:	2a e0       	ldi	r18, 0x0A	; 10
    1970:	26 9f       	mul	r18, r22
    1972:	11 24       	eor	r1, r1
    1974:	30 19       	sub	r19, r0
    1976:	30 5d       	subi	r19, 0xD0	; 208
    1978:	31 93       	st	Z+, r19
    197a:	de f6       	brtc	.-74     	; 0x1932 <__ultoa_invert+0xe>
    197c:	cf 01       	movw	r24, r30
    197e:	08 95       	ret
    1980:	46 2f       	mov	r20, r22
    1982:	47 70       	andi	r20, 0x07	; 7
    1984:	40 5d       	subi	r20, 0xD0	; 208
    1986:	41 93       	st	Z+, r20
    1988:	b3 e0       	ldi	r27, 0x03	; 3
    198a:	0f d0       	rcall	.+30     	; 0x19aa <__ultoa_invert+0x86>
    198c:	c9 f7       	brne	.-14     	; 0x1980 <__ultoa_invert+0x5c>
    198e:	f6 cf       	rjmp	.-20     	; 0x197c <__ultoa_invert+0x58>
    1990:	46 2f       	mov	r20, r22
    1992:	4f 70       	andi	r20, 0x0F	; 15
    1994:	40 5d       	subi	r20, 0xD0	; 208
    1996:	4a 33       	cpi	r20, 0x3A	; 58
    1998:	18 f0       	brcs	.+6      	; 0x19a0 <__ultoa_invert+0x7c>
    199a:	49 5d       	subi	r20, 0xD9	; 217
    199c:	31 fd       	sbrc	r19, 1
    199e:	40 52       	subi	r20, 0x20	; 32
    19a0:	41 93       	st	Z+, r20
    19a2:	02 d0       	rcall	.+4      	; 0x19a8 <__ultoa_invert+0x84>
    19a4:	a9 f7       	brne	.-22     	; 0x1990 <__ultoa_invert+0x6c>
    19a6:	ea cf       	rjmp	.-44     	; 0x197c <__ultoa_invert+0x58>
    19a8:	b4 e0       	ldi	r27, 0x04	; 4
    19aa:	a6 95       	lsr	r26
    19ac:	97 95       	ror	r25
    19ae:	87 95       	ror	r24
    19b0:	77 95       	ror	r23
    19b2:	67 95       	ror	r22
    19b4:	ba 95       	dec	r27
    19b6:	c9 f7       	brne	.-14     	; 0x19aa <__ultoa_invert+0x86>
    19b8:	00 97       	sbiw	r24, 0x00	; 0
    19ba:	61 05       	cpc	r22, r1
    19bc:	71 05       	cpc	r23, r1
    19be:	08 95       	ret
    19c0:	9b 01       	movw	r18, r22
    19c2:	ac 01       	movw	r20, r24
    19c4:	0a 2e       	mov	r0, r26
    19c6:	06 94       	lsr	r0
    19c8:	57 95       	ror	r21
    19ca:	47 95       	ror	r20
    19cc:	37 95       	ror	r19
    19ce:	27 95       	ror	r18
    19d0:	ba 95       	dec	r27
    19d2:	c9 f7       	brne	.-14     	; 0x19c6 <__ultoa_invert+0xa2>
    19d4:	62 0f       	add	r22, r18
    19d6:	73 1f       	adc	r23, r19
    19d8:	84 1f       	adc	r24, r20
    19da:	95 1f       	adc	r25, r21
    19dc:	a0 1d       	adc	r26, r0
    19de:	08 95       	ret

000019e0 <_exit>:
    19e0:	f8 94       	cli

000019e2 <__stop_program>:
    19e2:	ff cf       	rjmp	.-2      	; 0x19e2 <__stop_program>
