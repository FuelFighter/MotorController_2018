
MotorController_2018.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000018a4  00001938  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000289  00800118  00800118  00001950  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001950  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001980  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000450  00000000  00000000  000019c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004af1  00000000  00000000  00001e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000181a  00000000  00000000  00006901  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002425  00000000  00000000  0000811b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d98  00000000  00000000  0000a540  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001465  00000000  00000000  0000b2d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003b4d  00000000  00000000  0000c73d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a8  00000000  00000000  0001028a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	51 c0       	rjmp	.+162    	; 0xa4 <__ctors_end>
       2:	00 00       	nop
       4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
       6:	00 00       	nop
       8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
       a:	00 00       	nop
       c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
       e:	00 00       	nop
      10:	67 c0       	rjmp	.+206    	; 0xe0 <__bad_interrupt>
      12:	00 00       	nop
      14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
      16:	00 00       	nop
      18:	95 c5       	rjmp	.+2858   	; 0xb44 <__vector_6>
      1a:	00 00       	nop
      1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
      22:	00 00       	nop
      24:	5d c0       	rjmp	.+186    	; 0xe0 <__bad_interrupt>
      26:	00 00       	nop
      28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ae c4       	rjmp	.+2396   	; 0x98e <__vector_12>
      32:	00 00       	nop
      34:	55 c0       	rjmp	.+170    	; 0xe0 <__bad_interrupt>
      36:	00 00       	nop
      38:	53 c0       	rjmp	.+166    	; 0xe0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	25 c4       	rjmp	.+2122   	; 0x88c <__vector_16>
      42:	00 00       	nop
      44:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__vector_17>
      48:	c5 c6       	rjmp	.+3466   	; 0xdd4 <__vector_18>
      4a:	00 00       	nop
      4c:	49 c0       	rjmp	.+146    	; 0xe0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	47 c0       	rjmp	.+142    	; 0xe0 <__bad_interrupt>
      52:	00 00       	nop
      54:	c0 c2       	rjmp	.+1408   	; 0x5d6 <__vector_21>
      56:	00 00       	nop
      58:	a0 c2       	rjmp	.+1344   	; 0x59a <__vector_22>
      5a:	00 00       	nop
      5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
      66:	00 00       	nop
      68:	3b c0       	rjmp	.+118    	; 0xe0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	39 c0       	rjmp	.+114    	; 0xe0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	37 c0       	rjmp	.+110    	; 0xe0 <__bad_interrupt>
      72:	00 00       	nop
      74:	35 c0       	rjmp	.+106    	; 0xe0 <__bad_interrupt>
      76:	00 00       	nop
      78:	33 c0       	rjmp	.+102    	; 0xe0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	31 c0       	rjmp	.+98     	; 0xe0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e3 c2       	rjmp	.+1478   	; 0x648 <__vector_32>
      82:	00 00       	nop
      84:	c3 c2       	rjmp	.+1414   	; 0x60c <__vector_33>
      86:	00 00       	nop
      88:	2b c0       	rjmp	.+86     	; 0xe0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	29 c0       	rjmp	.+82     	; 0xe0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	27 c0       	rjmp	.+78     	; 0xe0 <__bad_interrupt>
      92:	00 00       	nop
      94:	bc 06       	cpc	r11, r28
      96:	c1 06       	cpc	r12, r17
      98:	c7 06       	cpc	r12, r23
      9a:	cd 06       	cpc	r12, r29
      9c:	d3 06       	cpc	r13, r19
      9e:	d8 06       	cpc	r13, r24
      a0:	de 06       	cpc	r13, r30
      a2:	e4 06       	cpc	r14, r20

000000a4 <__ctors_end>:
      a4:	11 24       	eor	r1, r1
      a6:	1f be       	out	0x3f, r1	; 63
      a8:	cf ef       	ldi	r28, 0xFF	; 255
      aa:	d0 e1       	ldi	r29, 0x10	; 16
      ac:	de bf       	out	0x3e, r29	; 62
      ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e4 ea       	ldi	r30, 0xA4	; 164
      b8:	f8 e1       	ldi	r31, 0x18	; 24
      ba:	00 e0       	ldi	r16, 0x00	; 0
      bc:	0b bf       	out	0x3b, r16	; 59
      be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
      c0:	07 90       	elpm	r0, Z+
      c2:	0d 92       	st	X+, r0
      c4:	a8 31       	cpi	r26, 0x18	; 24
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>

000000ca <__do_clear_bss>:
      ca:	23 e0       	ldi	r18, 0x03	; 3
      cc:	a8 e1       	ldi	r26, 0x18	; 24
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
      d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
      d4:	a1 3a       	cpi	r26, 0xA1	; 161
      d6:	b2 07       	cpc	r27, r18
      d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
      da:	61 d3       	rcall	.+1730   	; 0x79e <main>
      dc:	0c 94 50 0c 	jmp	0x18a0	; 0x18a0 <_exit>

000000e0 <__bad_interrupt>:
      e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <controller>:
static float f32_Integrator = 0.0 ;
static float f32_DutyCycleCmd = 50.0 ;

static bool b_saturation = false;

void controller(float f32_current_cmd, float f32_prev_current){
      e2:	8f 92       	push	r8
      e4:	9f 92       	push	r9
      e6:	af 92       	push	r10
      e8:	bf 92       	push	r11
      ea:	cf 92       	push	r12
      ec:	df 92       	push	r13
      ee:	ef 92       	push	r14
      f0:	ff 92       	push	r15
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
	
	float f32_CurrentDelta=f32_current_cmd-f32_prev_current	;
      f6:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__subsf3>
      fa:	6b 01       	movw	r12, r22
      fc:	7c 01       	movw	r14, r24
	
	if (!b_saturation) // prevents over integration of an error that cannot be dealt with (because the duty cycle reaches a limit)
      fe:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
     102:	81 11       	cpse	r24, r1
     104:	1c c0       	rjmp	.+56     	; 0x13e <controller+0x5c>
	{
		f32_Integrator+=f32_CurrentDelta*TimeStep ;
     106:	2a e0       	ldi	r18, 0x0A	; 10
     108:	37 ed       	ldi	r19, 0xD7	; 215
     10a:	43 e2       	ldi	r20, 0x23	; 35
     10c:	5c e3       	ldi	r21, 0x3C	; 60
     10e:	c7 01       	movw	r24, r14
     110:	b6 01       	movw	r22, r12
     112:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__mulsf3>
     116:	9b 01       	movw	r18, r22
     118:	ac 01       	movw	r20, r24
     11a:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <f32_Integrator>
     11e:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <f32_Integrator+0x1>
     122:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <f32_Integrator+0x2>
     126:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <f32_Integrator+0x3>
     12a:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__addsf3>
     12e:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <f32_Integrator>
     132:	70 93 1a 01 	sts	0x011A, r23	; 0x80011a <f32_Integrator+0x1>
     136:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <f32_Integrator+0x2>
     13a:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <f32_Integrator+0x3>
	}

	f32_DutyCycleCmd=Kp*f32_CurrentDelta+f32_Integrator/Ti ;
	f32_DutyCycleCmd=(f32_DutyCycleCmd+50) ;
     13e:	2c e5       	ldi	r18, 0x5C	; 92
     140:	3f e8       	ldi	r19, 0x8F	; 143
     142:	42 ec       	ldi	r20, 0xC2	; 194
     144:	50 e4       	ldi	r21, 0x40	; 64
     146:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <f32_Integrator>
     14a:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <f32_Integrator+0x1>
     14e:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <f32_Integrator+0x2>
     152:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <f32_Integrator+0x3>
     156:	0e 94 3d 0a 	call	0x147a	; 0x147a <__divsf3>
     15a:	4b 01       	movw	r8, r22
     15c:	5c 01       	movw	r10, r24
     15e:	23 ea       	ldi	r18, 0xA3	; 163
     160:	36 e0       	ldi	r19, 0x06	; 6
     162:	43 ed       	ldi	r20, 0xD3	; 211
     164:	5a e3       	ldi	r21, 0x3A	; 58
     166:	c7 01       	movw	r24, r14
     168:	b6 01       	movw	r22, r12
     16a:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__mulsf3>
     16e:	9b 01       	movw	r18, r22
     170:	ac 01       	movw	r20, r24
     172:	c5 01       	movw	r24, r10
     174:	b4 01       	movw	r22, r8
     176:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__addsf3>
     17a:	20 e0       	ldi	r18, 0x00	; 0
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	48 e4       	ldi	r20, 0x48	; 72
     180:	52 e4       	ldi	r21, 0x42	; 66
     182:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__addsf3>
     186:	6b 01       	movw	r12, r22
     188:	7c 01       	movw	r14, r24
     18a:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     18e:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     192:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     196:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	
	//bounding of duty cycle for well function of bootstrap capacitors
	if (f32_DutyCycleCmd > 95)
     19a:	20 e0       	ldi	r18, 0x00	; 0
     19c:	30 e0       	ldi	r19, 0x00	; 0
     19e:	4e eb       	ldi	r20, 0xBE	; 190
     1a0:	52 e4       	ldi	r21, 0x42	; 66
     1a2:	0e 94 88 0b 	call	0x1710	; 0x1710 <__gesf2>
     1a6:	18 16       	cp	r1, r24
     1a8:	84 f4       	brge	.+32     	; 0x1ca <controller+0xe8>
	{
		f32_DutyCycleCmd = 95;
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	ae eb       	ldi	r26, 0xBE	; 190
     1b0:	b2 e4       	ldi	r27, 0x42	; 66
     1b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     1b6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     1ba:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     1be:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
		b_saturation = true ;
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
     1c8:	19 c0       	rjmp	.+50     	; 0x1fc <controller+0x11a>
	}
	
	if (f32_DutyCycleCmd < 5)
     1ca:	20 e0       	ldi	r18, 0x00	; 0
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	40 ea       	ldi	r20, 0xA0	; 160
     1d0:	50 e4       	ldi	r21, 0x40	; 64
     1d2:	c7 01       	movw	r24, r14
     1d4:	b6 01       	movw	r22, r12
     1d6:	0e 94 39 0a 	call	0x1472	; 0x1472 <__cmpsf2>
     1da:	88 23       	and	r24, r24
     1dc:	7c f4       	brge	.+30     	; 0x1fc <controller+0x11a>
	{
		f32_DutyCycleCmd = 5;
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	a0 ea       	ldi	r26, 0xA0	; 160
     1e4:	b0 e4       	ldi	r27, 0x40	; 64
     1e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     1ea:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     1ee:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     1f2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
		b_saturation = true ;
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
	}
	
	OCR3A = (int)((f32_DutyCycleCmd/100)*ICR3) ; //PWM_PE3 (non inverted)
     1fc:	c0 91 96 00 	lds	r28, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
     200:	d0 91 97 00 	lds	r29, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
     204:	20 e0       	ldi	r18, 0x00	; 0
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	48 ec       	ldi	r20, 0xC8	; 200
     20a:	52 e4       	ldi	r21, 0x42	; 66
     20c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     210:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     214:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     218:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     21c:	0e 94 3d 0a 	call	0x147a	; 0x147a <__divsf3>
     220:	6b 01       	movw	r12, r22
     222:	7c 01       	movw	r14, r24
     224:	be 01       	movw	r22, r28
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__floatunsisf>
     22e:	9b 01       	movw	r18, r22
     230:	ac 01       	movw	r20, r24
     232:	c7 01       	movw	r24, r14
     234:	b6 01       	movw	r22, r12
     236:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__mulsf3>
     23a:	0e 94 a5 0a 	call	0x154a	; 0x154a <__fixsfsi>
     23e:	e8 e9       	ldi	r30, 0x98	; 152
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	71 83       	std	Z+1, r23	; 0x01
     244:	60 83       	st	Z, r22
	OCR3B = OCR3A ; //PWM_PE4 (inverted)
     246:	80 81       	ld	r24, Z
     248:	91 81       	ldd	r25, Z+1	; 0x01
     24a:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     24e:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
}
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	ff 90       	pop	r15
     258:	ef 90       	pop	r14
     25a:	df 90       	pop	r13
     25c:	cf 90       	pop	r12
     25e:	bf 90       	pop	r11
     260:	af 90       	pop	r10
     262:	9f 90       	pop	r9
     264:	8f 90       	pop	r8
     266:	08 95       	ret

00000268 <speed_init>:
#define LOWPASS_CONSTANT_S 0.1

void speed_init()
{
	//pin
	DDRE &= ~(1<<PE5); //define pin as input
     268:	6d 98       	cbi	0x0d, 5	; 13
	PORTE &= ~(1<<PE5); //no pull-up 
     26a:	75 98       	cbi	0x0e, 5	; 14
	//int
	EIMSK &= ~(1<<INT5) ; // interrupt disable to prevent interrupt raise during init
     26c:	ed 98       	cbi	0x1d, 5	; 29
	EICRB |= (1<<ISC50)|(1<<ISC51); // interrupt on rising edge
     26e:	ea e6       	ldi	r30, 0x6A	; 106
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	80 81       	ld	r24, Z
     274:	8c 60       	ori	r24, 0x0C	; 12
     276:	80 83       	st	Z, r24
	EIFR |= (1<<INTF5) ; // clear flag
     278:	e5 9a       	sbi	0x1c, 5	; 28
	EIMSK |= (1<<INT5) ; // interrupt enable
     27a:	ed 9a       	sbi	0x1d, 5	; 29
     27c:	08 95       	ret

0000027e <handle_speed_sensor>:
}

void handle_speed_sensor(uint8_t *u8_speed,uint16_t *u16_counter, uint8_t u8_period) // period in ms
{
     27e:	8f 92       	push	r8
     280:	9f 92       	push	r9
     282:	af 92       	push	r10
     284:	bf 92       	push	r11
     286:	cf 92       	push	r12
     288:	df 92       	push	r13
     28a:	ef 92       	push	r14
     28c:	ff 92       	push	r15
     28e:	1f 93       	push	r17
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	1f 92       	push	r1
     296:	cd b7       	in	r28, 0x3d	; 61
     298:	de b7       	in	r29, 0x3e	; 62
     29a:	6c 01       	movw	r12, r24
     29c:	7b 01       	movw	r14, r22
     29e:	14 2f       	mov	r17, r20
	volatile uint8_t u8_new_speed = (uint8_t)((float)(*u16_counter)*COUNT_TO_DISTANCE/u8_period);
     2a0:	fb 01       	movw	r30, r22
     2a2:	60 81       	ld	r22, Z
     2a4:	71 81       	ldd	r23, Z+1	; 0x01
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__floatunsisf>
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	40 e0       	ldi	r20, 0x00	; 0
     2b4:	5f e3       	ldi	r21, 0x3F	; 63
     2b6:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__mulsf3>
     2ba:	23 ec       	ldi	r18, 0xC3	; 195
     2bc:	35 ef       	ldi	r19, 0xF5	; 245
     2be:	48 e4       	ldi	r20, 0x48	; 72
     2c0:	50 e4       	ldi	r21, 0x40	; 64
     2c2:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__mulsf3>
     2c6:	20 e0       	ldi	r18, 0x00	; 0
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	40 e8       	ldi	r20, 0x80	; 128
     2cc:	5e e3       	ldi	r21, 0x3E	; 62
     2ce:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__mulsf3>
     2d2:	4b 01       	movw	r8, r22
     2d4:	5c 01       	movw	r10, r24
     2d6:	61 2f       	mov	r22, r17
     2d8:	70 e0       	ldi	r23, 0x00	; 0
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__floatsisf>
     2e2:	9b 01       	movw	r18, r22
     2e4:	ac 01       	movw	r20, r24
     2e6:	c5 01       	movw	r24, r10
     2e8:	b4 01       	movw	r22, r8
     2ea:	0e 94 3d 0a 	call	0x147a	; 0x147a <__divsf3>
     2ee:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__fixunssfsi>
     2f2:	69 83       	std	Y+1, r22	; 0x01
	*u8_speed = (*u8_speed)*(1-LOWPASS_CONSTANT_S) + LOWPASS_CONSTANT_S*u8_new_speed ;// low pass filter
     2f4:	19 81       	ldd	r17, Y+1	; 0x01
     2f6:	f6 01       	movw	r30, r12
     2f8:	60 81       	ld	r22, Z
     2fa:	70 e0       	ldi	r23, 0x00	; 0
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__floatsisf>
     304:	26 e6       	ldi	r18, 0x66	; 102
     306:	36 e6       	ldi	r19, 0x66	; 102
     308:	46 e6       	ldi	r20, 0x66	; 102
     30a:	5f e3       	ldi	r21, 0x3F	; 63
     30c:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__mulsf3>
     310:	4b 01       	movw	r8, r22
     312:	5c 01       	movw	r10, r24
     314:	61 2f       	mov	r22, r17
     316:	70 e0       	ldi	r23, 0x00	; 0
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__floatsisf>
     320:	2d ec       	ldi	r18, 0xCD	; 205
     322:	3c ec       	ldi	r19, 0xCC	; 204
     324:	4c ec       	ldi	r20, 0xCC	; 204
     326:	5d e3       	ldi	r21, 0x3D	; 61
     328:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__mulsf3>
     32c:	9b 01       	movw	r18, r22
     32e:	ac 01       	movw	r20, r24
     330:	c5 01       	movw	r24, r10
     332:	b4 01       	movw	r22, r8
     334:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__addsf3>
     338:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__fixunssfsi>
     33c:	f6 01       	movw	r30, r12
     33e:	60 83       	st	Z, r22
	*u16_counter = 0 ;
     340:	f7 01       	movw	r30, r14
     342:	11 82       	std	Z+1, r1	; 0x01
     344:	10 82       	st	Z, r1
}
     346:	0f 90       	pop	r0
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	ff 90       	pop	r15
     350:	ef 90       	pop	r14
     352:	df 90       	pop	r13
     354:	cf 90       	pop	r12
     356:	bf 90       	pop	r11
     358:	af 90       	pop	r10
     35a:	9f 90       	pop	r9
     35c:	8f 90       	pop	r8
     35e:	08 95       	ret

00000360 <uart0_putc>:
	//}
	
	uint8_t uart1_peek(void)
	{
		return rx1_buffer[(rx1_Tail+1) & RX1_BUFFER_MASK];
	}
     360:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <tx0_Head>
     364:	9f 5f       	subi	r25, 0xFF	; 255
     366:	9f 71       	andi	r25, 0x1F	; 31
     368:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <tx0_Tail>
     36c:	92 17       	cp	r25, r18
     36e:	e1 f3       	breq	.-8      	; 0x368 <uart0_putc+0x8>
     370:	e9 2f       	mov	r30, r25
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	eb 5c       	subi	r30, 0xCB	; 203
     376:	fc 4f       	sbci	r31, 0xFC	; 252
     378:	80 83       	st	Z, r24
     37a:	2f b7       	in	r18, 0x3f	; 63
     37c:	f8 94       	cli
     37e:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <tx0_Head>
     382:	e1 ec       	ldi	r30, 0xC1	; 193
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	80 81       	ld	r24, Z
     388:	80 62       	ori	r24, 0x20	; 32
     38a:	80 83       	st	Z, r24
     38c:	2f bf       	out	0x3f, r18	; 63
     38e:	08 95       	ret

00000390 <uart0_putstr>:
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	ec 01       	movw	r28, r24
     396:	21 96       	adiw	r28, 0x01	; 1
     398:	fc 01       	movw	r30, r24
     39a:	80 81       	ld	r24, Z
     39c:	88 23       	and	r24, r24
     39e:	21 f0       	breq	.+8      	; 0x3a8 <uart0_putstr+0x18>
     3a0:	df df       	rcall	.-66     	; 0x360 <uart0_putc>
     3a2:	89 91       	ld	r24, Y+
     3a4:	81 11       	cpse	r24, r1
     3a6:	fc cf       	rjmp	.-8      	; 0x3a0 <uart0_putstr+0x10>
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	08 95       	ret

000003ae <uart0_putint>:
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
     3b6:	27 97       	sbiw	r28, 0x07	; 7
     3b8:	0f b6       	in	r0, 0x3f	; 63
     3ba:	f8 94       	cli
     3bc:	de bf       	out	0x3e, r29	; 62
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	cd bf       	out	0x3d, r28	; 61
     3c2:	4a e0       	ldi	r20, 0x0A	; 10
     3c4:	be 01       	movw	r22, r28
     3c6:	6f 5f       	subi	r22, 0xFF	; 255
     3c8:	7f 4f       	sbci	r23, 0xFF	; 255
     3ca:	0e 94 15 0c 	call	0x182a	; 0x182a <__itoa_ncheck>
     3ce:	ce 01       	movw	r24, r28
     3d0:	01 96       	adiw	r24, 0x01	; 1
     3d2:	de df       	rcall	.-68     	; 0x390 <uart0_putstr>
     3d4:	27 96       	adiw	r28, 0x07	; 7
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	f8 94       	cli
     3da:	de bf       	out	0x3e, r29	; 62
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	cd bf       	out	0x3d, r28	; 61
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	08 95       	ret

000003e6 <uart0_flush>:
     3e6:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <tx0_Tail>
     3ea:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <tx0_Head>
     3ee:	98 13       	cpse	r25, r24
     3f0:	fa cf       	rjmp	.-12     	; 0x3e6 <uart0_flush>
     3f2:	08 95       	ret

000003f4 <uart1_putc>:
     3f4:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <tx1_Head>
     3f8:	9f 5f       	subi	r25, 0xFF	; 255
     3fa:	9f 71       	andi	r25, 0x1F	; 31
     3fc:	20 91 32 03 	lds	r18, 0x0332	; 0x800332 <tx1_Tail>
     400:	92 17       	cp	r25, r18
     402:	e1 f3       	breq	.-8      	; 0x3fc <uart1_putc+0x8>
     404:	e9 2f       	mov	r30, r25
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	e0 51       	subi	r30, 0x10	; 16
     40a:	fd 4f       	sbci	r31, 0xFD	; 253
     40c:	80 83       	st	Z, r24
     40e:	2f b7       	in	r18, 0x3f	; 63
     410:	f8 94       	cli
     412:	90 93 34 03 	sts	0x0334, r25	; 0x800334 <tx1_Head>
     416:	e9 ec       	ldi	r30, 0xC9	; 201
     418:	f0 e0       	ldi	r31, 0x00	; 0
     41a:	80 81       	ld	r24, Z
     41c:	80 62       	ori	r24, 0x20	; 32
     41e:	80 83       	st	Z, r24
     420:	2f bf       	out	0x3f, r18	; 63
     422:	08 95       	ret

00000424 <uart_putchar>:
     424:	cf 93       	push	r28
     426:	c8 2f       	mov	r28, r24
     428:	fb 01       	movw	r30, r22
     42a:	84 85       	ldd	r24, Z+12	; 0x0c
     42c:	95 85       	ldd	r25, Z+13	; 0x0d
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	39 f0       	breq	.+14     	; 0x440 <uart_putchar+0x1c>
     432:	ca 30       	cpi	r28, 0x0A	; 10
     434:	11 f4       	brne	.+4      	; 0x43a <uart_putchar+0x16>
     436:	8d e0       	ldi	r24, 0x0D	; 13
     438:	93 df       	rcall	.-218    	; 0x360 <uart0_putc>
     43a:	8c 2f       	mov	r24, r28
     43c:	91 df       	rcall	.-222    	; 0x360 <uart0_putc>
     43e:	06 c0       	rjmp	.+12     	; 0x44c <uart_putchar+0x28>
     440:	ca 30       	cpi	r28, 0x0A	; 10
     442:	11 f4       	brne	.+4      	; 0x448 <uart_putchar+0x24>
     444:	8d e0       	ldi	r24, 0x0D	; 13
     446:	d6 df       	rcall	.-84     	; 0x3f4 <uart1_putc>
     448:	8c 2f       	mov	r24, r28
     44a:	d4 df       	rcall	.-88     	; 0x3f4 <uart1_putc>
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	cf 91       	pop	r28
     452:	08 95       	ret

00000454 <uart0_getc>:
     454:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <rx0_Tail>
     458:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <rx0_Head>
     45c:	89 17       	cp	r24, r25
     45e:	59 f0       	breq	.+22     	; 0x476 <uart0_getc+0x22>
     460:	8f 5f       	subi	r24, 0xFF	; 255
     462:	98 2f       	mov	r25, r24
     464:	9f 71       	andi	r25, 0x1F	; 31
     466:	e9 2f       	mov	r30, r25
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	e3 53       	subi	r30, 0x33	; 51
     46c:	fd 4f       	sbci	r31, 0xFD	; 253
     46e:	80 81       	ld	r24, Z
     470:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <rx0_Tail>
     474:	08 95       	ret
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	08 95       	ret

0000047a <uart0_getlnToFirstWhiteSpace>:
     47a:	ef 92       	push	r14
     47c:	ff 92       	push	r15
     47e:	0f 93       	push	r16
     480:	1f 93       	push	r17
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	7c 01       	movw	r14, r24
     488:	16 2f       	mov	r17, r22
     48a:	e4 df       	rcall	.-56     	; 0x454 <uart0_getc>
     48c:	f7 01       	movw	r30, r14
     48e:	80 83       	st	Z, r24
     490:	81 32       	cpi	r24, 0x21	; 33
     492:	d8 f3       	brcs	.-10     	; 0x48a <uart0_getlnToFirstWhiteSpace+0x10>
     494:	e7 01       	movw	r28, r14
     496:	21 96       	adiw	r28, 0x01	; 1
     498:	12 30       	cpi	r17, 0x02	; 2
     49a:	c1 f0       	breq	.+48     	; 0x4cc <uart0_getlnToFirstWhiteSpace+0x52>
     49c:	13 50       	subi	r17, 0x03	; 3
     49e:	81 2f       	mov	r24, r17
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	02 96       	adiw	r24, 0x02	; 2
     4a4:	87 01       	movw	r16, r14
     4a6:	08 0f       	add	r16, r24
     4a8:	19 1f       	adc	r17, r25
     4aa:	d4 df       	rcall	.-88     	; 0x454 <uart0_getc>
     4ac:	88 83       	st	Y, r24
     4ae:	88 23       	and	r24, r24
     4b0:	e1 f3       	breq	.-8      	; 0x4aa <uart0_getlnToFirstWhiteSpace+0x30>
     4b2:	8d 30       	cpi	r24, 0x0D	; 13
     4b4:	21 f4       	brne	.+8      	; 0x4be <uart0_getlnToFirstWhiteSpace+0x44>
     4b6:	ce df       	rcall	.-100    	; 0x454 <uart0_getc>
     4b8:	88 23       	and	r24, r24
     4ba:	e9 f3       	breq	.-6      	; 0x4b6 <uart0_getlnToFirstWhiteSpace+0x3c>
     4bc:	07 c0       	rjmp	.+14     	; 0x4cc <uart0_getlnToFirstWhiteSpace+0x52>
     4be:	81 32       	cpi	r24, 0x21	; 33
     4c0:	28 f0       	brcs	.+10     	; 0x4cc <uart0_getlnToFirstWhiteSpace+0x52>
     4c2:	21 96       	adiw	r28, 0x01	; 1
     4c4:	0c 17       	cp	r16, r28
     4c6:	1d 07       	cpc	r17, r29
     4c8:	81 f7       	brne	.-32     	; 0x4aa <uart0_getlnToFirstWhiteSpace+0x30>
     4ca:	e8 01       	movw	r28, r16
     4cc:	18 82       	st	Y, r1
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	1f 91       	pop	r17
     4d4:	0f 91       	pop	r16
     4d6:	ff 90       	pop	r15
     4d8:	ef 90       	pop	r14
     4da:	08 95       	ret

000004dc <uart0_getint>:
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	cd b7       	in	r28, 0x3d	; 61
     4e2:	de b7       	in	r29, 0x3e	; 62
     4e4:	27 97       	sbiw	r28, 0x07	; 7
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	cd bf       	out	0x3d, r28	; 61
     4f0:	67 e0       	ldi	r22, 0x07	; 7
     4f2:	ce 01       	movw	r24, r28
     4f4:	01 96       	adiw	r24, 0x01	; 1
     4f6:	c1 df       	rcall	.-126    	; 0x47a <uart0_getlnToFirstWhiteSpace>
     4f8:	ce 01       	movw	r24, r28
     4fa:	01 96       	adiw	r24, 0x01	; 1
     4fc:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <atoi>
     500:	27 96       	adiw	r28, 0x07	; 7
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	f8 94       	cli
     506:	de bf       	out	0x3e, r29	; 62
     508:	0f be       	out	0x3f, r0	; 63
     50a:	cd bf       	out	0x3d, r28	; 61
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	08 95       	ret

00000512 <uart0_getData>:
     512:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <rx0_Tail>
     516:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <rx0_Head>
     51a:	89 17       	cp	r24, r25
     51c:	61 f0       	breq	.+24     	; 0x536 <uart0_getData+0x24>
     51e:	8f 5f       	subi	r24, 0xFF	; 255
     520:	8f 71       	andi	r24, 0x1F	; 31
     522:	e8 2f       	mov	r30, r24
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	e3 53       	subi	r30, 0x33	; 51
     528:	fd 4f       	sbci	r31, 0xFD	; 253
     52a:	90 81       	ld	r25, Z
     52c:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <rx0_Tail>
     530:	89 2f       	mov	r24, r25
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	08 95       	ret
     536:	8f ef       	ldi	r24, 0xFF	; 255
     538:	9f ef       	ldi	r25, 0xFF	; 255
     53a:	08 95       	ret

0000053c <uart1_getData>:
     53c:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <rx1_Tail>
     540:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <rx1_Head>
     544:	89 17       	cp	r24, r25
     546:	61 f0       	breq	.+24     	; 0x560 <uart1_getData+0x24>
     548:	8f 5f       	subi	r24, 0xFF	; 255
     54a:	8f 71       	andi	r24, 0x1F	; 31
     54c:	e8 2f       	mov	r30, r24
     54e:	f0 e0       	ldi	r31, 0x00	; 0
     550:	ef 5e       	subi	r30, 0xEF	; 239
     552:	fc 4f       	sbci	r31, 0xFC	; 252
     554:	90 81       	ld	r25, Z
     556:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <rx1_Tail>
     55a:	89 2f       	mov	r24, r25
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	08 95       	ret
     560:	8f ef       	ldi	r24, 0xFF	; 255
     562:	9f ef       	ldi	r25, 0xFF	; 255
     564:	08 95       	ret

00000566 <uart_getchar>:
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	fc 01       	movw	r30, r24
     56c:	84 85       	ldd	r24, Z+12	; 0x0c
     56e:	95 85       	ldd	r25, Z+13	; 0x0d
     570:	01 97       	sbiw	r24, 0x01	; 1
     572:	41 f0       	breq	.+16     	; 0x584 <uart_getchar+0x1e>
     574:	ce df       	rcall	.-100    	; 0x512 <uart0_getData>
     576:	ec 01       	movw	r28, r24
     578:	99 23       	and	r25, r25
     57a:	e4 f3       	brlt	.-8      	; 0x574 <uart_getchar+0xe>
     57c:	f1 de       	rcall	.-542    	; 0x360 <uart0_putc>
     57e:	ce 01       	movw	r24, r28
     580:	99 27       	eor	r25, r25
     582:	07 c0       	rjmp	.+14     	; 0x592 <uart_getchar+0x2c>
     584:	db df       	rcall	.-74     	; 0x53c <uart1_getData>
     586:	ec 01       	movw	r28, r24
     588:	99 23       	and	r25, r25
     58a:	e4 f3       	brlt	.-8      	; 0x584 <uart_getchar+0x1e>
     58c:	33 df       	rcall	.-410    	; 0x3f4 <uart1_putc>
     58e:	ce 01       	movw	r24, r28
     590:	99 27       	eor	r25, r25
     592:	99 27       	eor	r25, r25
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	08 95       	ret

0000059a <__vector_22>:

#ifndef NO_TX0_INTERRUPT

	ISR(UDRE0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     59a:	0f 93       	push	r16
     59c:	0f b7       	in	r16, 0x3f	; 63
     59e:	ef 93       	push	r30
     5a0:	ff 93       	push	r31
     5a2:	e0 91 ee 02 	lds	r30, 0x02EE	; 0x8002ee <tx0_Tail>
     5a6:	f0 91 10 03 	lds	r31, 0x0310	; 0x800310 <tx0_Head>
     5aa:	e3 95       	inc	r30
     5ac:	ef 71       	andi	r30, 0x1F	; 31
     5ae:	ef 13       	cpse	r30, r31
     5b0:	05 c0       	rjmp	.+10     	; 0x5bc <USART0_TX_CONTINUE>
     5b2:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     5b6:	ff 7d       	andi	r31, 0xDF	; 223
     5b8:	f0 93 c1 00 	sts	0x00C1, r31	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

000005bc <USART0_TX_CONTINUE>:
     5bc:	e0 93 ee 02 	sts	0x02EE, r30	; 0x8002ee <tx0_Tail>
     5c0:	f0 e0       	ldi	r31, 0x00	; 0
     5c2:	eb 5c       	subi	r30, 0xCB	; 203
     5c4:	fc 4f       	sbci	r31, 0xFC	; 252
     5c6:	e0 81       	ld	r30, Z
     5c8:	e0 93 c6 00 	sts	0x00C6, r30	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

000005cc <USART0_TX_EXIT>:
     5cc:	ff 91       	pop	r31
     5ce:	ef 91       	pop	r30
     5d0:	0f bf       	out	0x3f, r16	; 63
     5d2:	0f 91       	pop	r16
     5d4:	18 95       	reti

000005d6 <__vector_21>:

#ifndef NO_RX0_INTERRUPT

	ISR(RX0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     5d6:	0f 93       	push	r16
     5d8:	0f b7       	in	r16, 0x3f	; 63
     5da:	9f 93       	push	r25
     5dc:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     5e0:	ef 93       	push	r30
     5e2:	ff 93       	push	r31
     5e4:	e0 91 31 03 	lds	r30, 0x0331	; 0x800331 <rx0_Head>
     5e8:	f0 91 ef 02 	lds	r31, 0x02EF	; 0x8002ef <rx0_Tail>
     5ec:	e3 95       	inc	r30
     5ee:	ef 71       	andi	r30, 0x1F	; 31
     5f0:	fe 17       	cp	r31, r30
     5f2:	31 f0       	breq	.+12     	; 0x600 <USART0_RX_EXIT>
     5f4:	e0 93 31 03 	sts	0x0331, r30	; 0x800331 <rx0_Head>
     5f8:	f0 e0       	ldi	r31, 0x00	; 0
     5fa:	e3 53       	subi	r30, 0x33	; 51
     5fc:	fd 4f       	sbci	r31, 0xFD	; 253
     5fe:	90 83       	st	Z, r25

00000600 <USART0_RX_EXIT>:
     600:	ff 91       	pop	r31
     602:	ef 91       	pop	r30
     604:	9f 91       	pop	r25
     606:	0f bf       	out	0x3f, r16	; 63
     608:	0f 91       	pop	r16
     60a:	18 95       	reti

0000060c <__vector_33>:

#ifndef NO_TX1_INTERRUPT

	ISR(UDRE1_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     60c:	0f 93       	push	r16
     60e:	0f b7       	in	r16, 0x3f	; 63
     610:	ef 93       	push	r30
     612:	ff 93       	push	r31
     614:	e0 91 32 03 	lds	r30, 0x0332	; 0x800332 <tx1_Tail>
     618:	f0 91 34 03 	lds	r31, 0x0334	; 0x800334 <tx1_Head>
     61c:	e3 95       	inc	r30
     61e:	ef 71       	andi	r30, 0x1F	; 31
     620:	ef 13       	cpse	r30, r31
     622:	05 c0       	rjmp	.+10     	; 0x62e <USART1_TX_CONTINUE>
     624:	f0 91 c9 00 	lds	r31, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     628:	ff 7d       	andi	r31, 0xDF	; 223
     62a:	f0 93 c9 00 	sts	0x00C9, r31	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

0000062e <USART1_TX_CONTINUE>:
     62e:	e0 93 32 03 	sts	0x0332, r30	; 0x800332 <tx1_Tail>
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	e0 51       	subi	r30, 0x10	; 16
     636:	fd 4f       	sbci	r31, 0xFD	; 253
     638:	e0 81       	ld	r30, Z
     63a:	e0 93 ce 00 	sts	0x00CE, r30	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>

0000063e <USART1_TX_EXIT>:
     63e:	ff 91       	pop	r31
     640:	ef 91       	pop	r30
     642:	0f bf       	out	0x3f, r16	; 63
     644:	0f 91       	pop	r16
     646:	18 95       	reti

00000648 <__vector_32>:

#ifndef NO_RX1_INTERRUPT
	
	ISR(RX1_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     648:	0f 93       	push	r16
     64a:	0f b7       	in	r16, 0x3f	; 63
     64c:	9f 93       	push	r25
     64e:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     652:	ef 93       	push	r30
     654:	ff 93       	push	r31
     656:	e0 91 33 03 	lds	r30, 0x0333	; 0x800333 <rx1_Head>
     65a:	f0 91 ed 02 	lds	r31, 0x02ED	; 0x8002ed <rx1_Tail>
     65e:	e3 95       	inc	r30
     660:	ef 71       	andi	r30, 0x1F	; 31
     662:	fe 17       	cp	r31, r30
     664:	31 f0       	breq	.+12     	; 0x672 <USART1_RX_EXIT>
     666:	e0 93 33 03 	sts	0x0333, r30	; 0x800333 <rx1_Head>
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	ef 5e       	subi	r30, 0xEF	; 239
     66e:	fc 4f       	sbci	r31, 0xFC	; 252
     670:	90 83       	st	Z, r25

00000672 <USART1_RX_EXIT>:
     672:	ff 91       	pop	r31
     674:	ef 91       	pop	r30
     676:	9f 91       	pop	r25
     678:	0f bf       	out	0x3f, r16	; 63
     67a:	0f 91       	pop	r16
     67c:	18 95       	reti

0000067e <timer1_init_ts>:

//for speed
static uint16_t u16_speed_count = 0;

void timer1_init_ts(){
	TCCR1B |= (1<<CS10)|(1<<CS12); // timer 1 prescaler set CLK/1024
     67e:	e1 e8       	ldi	r30, 0x81	; 129
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	80 81       	ld	r24, Z
     684:	85 60       	ori	r24, 0x05	; 5
     686:	80 83       	st	Z, r24
	//TCCR1B |= (1<<CS10)|(1<<CS11); // timer 1 prescaler set CLK/64
	TCCR1B |= (1<<WGM12); //CTC
     688:	80 81       	ld	r24, Z
     68a:	88 60       	ori	r24, 0x08	; 8
     68c:	80 83       	st	Z, r24
	TCNT1 = 0; //reset timer value
     68e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     692:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIMSK1 |= (1<<OCIE1A); //enable interrupt
     696:	ef e6       	ldi	r30, 0x6F	; 111
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	80 81       	ld	r24, Z
     69c:	82 60       	ori	r24, 0x02	; 2
     69e:	80 83       	st	Z, r24
	OCR1A = 125 - 1; //compare value //every 1ms nope
     6a0:	8c e7       	ldi	r24, 0x7C	; 124
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     6a8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     6ac:	08 95       	ret

000006ae <timer0_init_ts>:
}

void timer0_init_ts(){ 
	TCCR0A |= (1<<CS10)|(1<<CS11); // timer 0 prescaler set CLK/1024
     6ae:	84 b5       	in	r24, 0x24	; 36
     6b0:	83 60       	ori	r24, 0x03	; 3
     6b2:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM01); //CTC
     6b4:	84 b5       	in	r24, 0x24	; 36
     6b6:	88 60       	ori	r24, 0x08	; 8
     6b8:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0; //reset timer value
     6ba:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1<<OCIE0A); //enable interrupt
     6bc:	ee e6       	ldi	r30, 0x6E	; 110
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	80 81       	ld	r24, Z
     6c2:	82 60       	ori	r24, 0x02	; 2
     6c4:	80 83       	st	Z, r24
	OCR0A = 79; //compare value
     6c6:	8f e4       	ldi	r24, 0x4F	; 79
     6c8:	87 bd       	out	0x27, r24	; 39
     6ca:	08 95       	ret

000006cc <handle_can>:
	.motor_status = IDLE,
	.Direction = FORWARD,
};


void handle_can(ModuleValues_t *vals, CanMessage_t *rx){
     6cc:	0f 93       	push	r16
     6ce:	1f 93       	push	r17
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29
     6d4:	8c 01       	movw	r16, r24
     6d6:	eb 01       	movw	r28, r22
	if (can_read_message_if_new(rx)){
     6d8:	cb 01       	movw	r24, r22
     6da:	c2 d4       	rcall	.+2436   	; 0x1060 <can_read_message_if_new>
     6dc:	88 23       	and	r24, r24
     6de:	31 f1       	breq	.+76     	; 0x72c <handle_can+0x60>
		switch (rx->id){
     6e0:	88 81       	ld	r24, Y
     6e2:	99 81       	ldd	r25, Y+1	; 0x01
     6e4:	80 31       	cpi	r24, 0x10	; 16
     6e6:	21 e0       	ldi	r18, 0x01	; 1
     6e8:	92 07       	cpc	r25, r18
     6ea:	21 f0       	breq	.+8      	; 0x6f4 <handle_can+0x28>
     6ec:	80 33       	cpi	r24, 0x30	; 48
     6ee:	92 40       	sbci	r25, 0x02	; 2
     6f0:	91 f0       	breq	.+36     	; 0x716 <handle_can+0x4a>
     6f2:	1c c0       	rjmp	.+56     	; 0x72c <handle_can+0x60>
			case BRAKE_CAN_ID:
				if (vals->Direction == FORWARD)
     6f4:	f8 01       	movw	r30, r16
     6f6:	80 89       	ldd	r24, Z+16	; 0x10
     6f8:	81 11       	cpse	r24, r1
     6fa:	03 c0       	rjmp	.+6      	; 0x702 <handle_can+0x36>
				{
					vals->motor_status = FW_BRAKE;
     6fc:	82 e0       	ldi	r24, 0x02	; 2
     6fe:	87 87       	std	Z+15, r24	; 0x0f
     700:	03 c0       	rjmp	.+6      	; 0x708 <handle_can+0x3c>
				} else {
					vals->motor_status = BW_BRAKE;
     702:	84 e0       	ldi	r24, 0x04	; 4
     704:	f8 01       	movw	r30, r16
     706:	87 87       	std	Z+15, r24	; 0x0f
				}
				u8_watchdog = WATCHDOG_RELOAD_VALUE ;
     708:	80 e6       	ldi	r24, 0x60	; 96
     70a:	9a ee       	ldi	r25, 0xEA	; 234
     70c:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <u8_watchdog+0x1>
     710:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <u8_watchdog>
				break;
     714:	0b c0       	rjmp	.+22     	; 0x72c <handle_can+0x60>
				
			case FORWARD_CAN_ID:
				vals->u8_throttle_cmd = rx->data.u8[3];
     716:	8e 81       	ldd	r24, Y+6	; 0x06
     718:	f8 01       	movw	r30, r16
     71a:	86 87       	std	Z+14, r24	; 0x0e
				vals->motor_status = FW_ACCEL;
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	87 87       	std	Z+15, r24	; 0x0f
				u8_watchdog = WATCHDOG_RELOAD_VALUE ;
     720:	80 e6       	ldi	r24, 0x60	; 96
     722:	9a ee       	ldi	r25, 0xEA	; 234
     724:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <u8_watchdog+0x1>
     728:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <u8_watchdog>
				vals->rpm = rx->data.u16[ENCODER_CHANNEL];
				break;
				*/
		}
	}
}
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	1f 91       	pop	r17
     732:	0f 91       	pop	r16
     734:	08 95       	ret

00000736 <handle_motor_status_can_msg>:

void handle_motor_status_can_msg(uint8_t *send, ModuleValues_t *vals){
     736:	ef 92       	push	r14
     738:	ff 92       	push	r15
     73a:	0f 93       	push	r16
     73c:	1f 93       	push	r17
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
	if(*send){
     742:	fc 01       	movw	r30, r24
     744:	20 81       	ld	r18, Z
     746:	22 23       	and	r18, r18
     748:	19 f1       	breq	.+70     	; 0x790 <handle_motor_status_can_msg+0x5a>
     74a:	eb 01       	movw	r28, r22
     74c:	8c 01       	movw	r16, r24
		txFrame.data.u8[0] = vals->motor_status;
     74e:	0f 2e       	mov	r0, r31
     750:	f0 e9       	ldi	r31, 0x90	; 144
     752:	ef 2e       	mov	r14, r31
     754:	f3 e0       	ldi	r31, 0x03	; 3
     756:	ff 2e       	mov	r15, r31
     758:	f0 2d       	mov	r31, r0
     75a:	8f 85       	ldd	r24, Y+15	; 0x0f
     75c:	f7 01       	movw	r30, r14
     75e:	83 83       	std	Z+3, r24	; 0x03
		txFrame.data.u8[1] = vals->u8_throttle_cmd;
     760:	8e 85       	ldd	r24, Y+14	; 0x0e
     762:	84 83       	std	Z+4, r24	; 0x04
		txFrame.data.u16[1] = (uint16_t)(vals->f32_motor_current);
     764:	68 81       	ld	r22, Y
     766:	79 81       	ldd	r23, Y+1	; 0x01
     768:	8a 81       	ldd	r24, Y+2	; 0x02
     76a:	9b 81       	ldd	r25, Y+3	; 0x03
     76c:	f3 d6       	rcall	.+3558   	; 0x1554 <__fixunssfsi>
     76e:	f7 01       	movw	r30, r14
     770:	76 83       	std	Z+6, r23	; 0x06
     772:	65 83       	std	Z+5, r22	; 0x05
		txFrame.data.u16[2] = OCR3B ;
     774:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
     778:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     77c:	90 87       	std	Z+8, r25	; 0x08
     77e:	87 83       	std	Z+7, r24	; 0x07
		txFrame.data.u16[3] = vals->u8_car_speed;
     780:	8d 85       	ldd	r24, Y+13	; 0x0d
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	92 87       	std	Z+10, r25	; 0x0a
		
		can_send_message(&txFrame);
     786:	81 87       	std	Z+9, r24	; 0x09
     788:	c7 01       	movw	r24, r14
		*send = 0;
     78a:	ad d4       	rcall	.+2394   	; 0x10e6 <can_send_message>
     78c:	f8 01       	movw	r30, r16
	}
}
     78e:	10 82       	st	Z, r1
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	1f 91       	pop	r17
     796:	0f 91       	pop	r16
     798:	ff 90       	pop	r15
     79a:	ef 90       	pop	r14
     79c:	08 95       	ret

0000079e <main>:

int main(void)	
{
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	00 d0       	rcall	.+0      	; 0x7a4 <main+0x6>
     7a4:	cd b7       	in	r28, 0x3d	; 61
     7a6:	de b7       	in	r29, 0x3e	; 62
	cli();
     7a8:	f8 94       	cli
	pid_init(&Current, 0.1, 0.05, 0, 0);
     7aa:	81 2c       	mov	r8, r1
     7ac:	91 2c       	mov	r9, r1
     7ae:	54 01       	movw	r10, r8
     7b0:	75 01       	movw	r14, r10
     7b2:	64 01       	movw	r12, r8
     7b4:	0d ec       	ldi	r16, 0xCD	; 205
     7b6:	1c ec       	ldi	r17, 0xCC	; 204
     7b8:	2c e4       	ldi	r18, 0x4C	; 76
     7ba:	3d e3       	ldi	r19, 0x3D	; 61
     7bc:	4d ec       	ldi	r20, 0xCD	; 205
     7be:	5c ec       	ldi	r21, 0xCC	; 204
     7c0:	6c ec       	ldi	r22, 0xCC	; 204
     7c2:	7d e3       	ldi	r23, 0x3D	; 61
     7c4:	88 e7       	ldi	r24, 0x78	; 120
     7c6:	93 e0       	ldi	r25, 0x03	; 3
	pwm_init();
     7c8:	d4 d1       	rcall	.+936    	; 0xb72 <pid_init>
     7ca:	0b d5       	rcall	.+2582   	; 0x11e2 <pwm_init>
	can_init(0,0);
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	70 e0       	ldi	r23, 0x00	; 0
	timer1_init_ts();
     7d0:	80 e0       	ldi	r24, 0x00	; 0
	timer0_init_ts();
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	f0 d3       	rcall	.+2016   	; 0xfb6 <can_init>
	speed_init();
     7d6:	53 df       	rcall	.-346    	; 0x67e <timer1_init_ts>
     7d8:	6a df       	rcall	.-300    	; 0x6ae <timer0_init_ts>
	
	spi_init(DIV_2); // init of SPI for external ADC device
     7da:	46 dd       	rcall	.-1396   	; 0x268 <speed_init>
     7dc:	84 e0       	ldi	r24, 0x04	; 4
     7de:	73 d5       	rcall	.+2790   	; 0x12c6 <spi_init>
	{
	#ifdef USART0_RS485_MODE
		RS485_CONTROL0_DDR |= (1<<RS485_CONTROL0_IONUM); // default pin state is low
	#endif
		
		UBRR0L_REGISTER = (uint8_t) ubrr_value;
     7e0:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		
	#ifdef USART_SKIP_UBRRH_IF_ZERO
		if(__builtin_constant_p(ubrr_value))
			if(((ubrr_value>>8) != 0)) // requires -Os flag - do not use in non-inline functions
	#endif
			UBRR0H_REGISTER = (ubrr_value>>8);
     7e4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		#endif
	#elif defined(USART0_MPCM_MODE)
		UCSR0A_REGISTER |= (1<<MPCM0_BIT);
	#endif
		
		UCSR0B_REGISTER = USART0_CONFIG_B;
     7e8:	88 e9       	ldi	r24, 0x98	; 152
     7ea:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	//uart_set_FrameFormat(USART_8BIT_DATA|USART_1STOP_BIT|USART_NO_PARITY|USART_ASYNC_MODE); // default settings
	uart_init(BAUD_CALC(500000)); // 8n1 transmission is set as default
	stdout = &uart0_io; // attach uart stream to stdout & stdin
     7ee:	eb e9       	ldi	r30, 0x9B	; 155
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	84 e0       	ldi	r24, 0x04	; 4
     7f4:	91 e0       	ldi	r25, 0x01	; 1
     7f6:	93 83       	std	Z+3, r25	; 0x03
	stdin = &uart0_io; // uart0_in and uart0_out are only available if NO_USART_RX or NO_USART_TX is defined
     7f8:	82 83       	std	Z+2, r24	; 0x02
     7fa:	91 83       	std	Z+1, r25	; 0x01
		u16_data_received=uart_getint();
		uart_flush();
	}
	*/
	
	rgbled_init();
     7fc:	80 83       	st	Z, r24
     7fe:	58 d5       	rcall	.+2736   	; 0x12b0 <rgbled_init>
	txFrame.id = MOTOR_CAN_ID;
     800:	e0 e9       	ldi	r30, 0x90	; 144
     802:	f3 e0       	ldi	r31, 0x03	; 3
     804:	80 e5       	ldi	r24, 0x50	; 80
     806:	94 e0       	ldi	r25, 0x04	; 4
     808:	91 83       	std	Z+1, r25	; 0x01
	txFrame.length = 8;
     80a:	80 83       	st	Z, r24
     80c:	88 e0       	ldi	r24, 0x08	; 8
	
	sei();
     80e:	82 83       	std	Z+2, r24	; 0x02
	
	rgbled_turn_on(LED_BLUE);
     810:	78 94       	sei
     812:	80 e8       	ldi	r24, 0x80	; 128
     814:	53 d5       	rcall	.+2726   	; 0x12bc <rgbled_turn_on>
			{
				ComValues.u8_throttle_cmd = u16_data_received-10 ;
				ComValues.motor_status = FW_BRAKE ;
			}else{
				ComValues.u8_throttle_cmd = u16_data_received ;
				ComValues.motor_status = FW_ACCEL;
     816:	ee 24       	eor	r14, r14
				u8_watchdog = WATCHDOG_RELOAD_VALUE;
     818:	e3 94       	inc	r14
			volatile uint16_t u16_data_received=uart_getint(); //in Amps. if >10, braking, else accelerating. eg : 12 -> brake 2 amps; 2 -> accel 2 amps
			uart_flush();
			if (u16_data_received >=10)
			{
				ComValues.u8_throttle_cmd = u16_data_received-10 ;
				ComValues.motor_status = FW_BRAKE ;
     81a:	00 e6       	ldi	r16, 0x60	; 96
     81c:	1a ee       	ldi	r17, 0xEA	; 234
	
	rgbled_turn_on(LED_BLUE);
	
    while (1){
		
		handle_motor_status_can_msg(&send_can, &ComValues);
     81e:	68 94       	set
     820:	ff 24       	eor	r15, r15
     822:	f1 f8       	bld	r15, 1
     824:	6d e1       	ldi	r22, 0x1D	; 29
     826:	71 e0       	ldi	r23, 0x01	; 1
		handle_can(&ComValues, &rxFrame);
     828:	86 e3       	ldi	r24, 0x36	; 54
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	84 df       	rcall	.-248    	; 0x736 <handle_motor_status_can_msg>
     82e:	6d e6       	ldi	r22, 0x6D	; 109
		int16_t uart0_getData(void); // reads single byte from a buffer // returns negative value if buffer is empty (upper byte is non zero)
		uint8_t uart0_LoadData(uint8_t *data); // reads single byte from a buffer and loads it into *data byte
		// in case of empty buffers returned flag is set to BUFFER_EMPTY - NULL
		
		extern volatile uint8_t rx0_Head, rx0_Tail;
		inline uint8_t uart0_AvailableBytes(void) { return (rx0_Head - rx0_Tail) & RX0_BUFFER_MASK; }
     830:	73 e0       	ldi	r23, 0x03	; 3
     832:	8d e1       	ldi	r24, 0x1D	; 29
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	4a df       	rcall	.-364    	; 0x6cc <handle_can>
		uart_puts(",");
		uart_putint(ComValues.u8_throttle_cmd);
		uart_puts("\r\n");
		*/
		//receiving throttle cmd through USB
		if(uart_AvailableBytes()!=0){
     838:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <rx0_Head>
     83c:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <rx0_Tail>
			volatile uint16_t u16_data_received=uart_getint(); //in Amps. if >10, braking, else accelerating. eg : 12 -> brake 2 amps; 2 -> accel 2 amps
     840:	89 1b       	sub	r24, r25
     842:	8f 71       	andi	r24, 0x1F	; 31
     844:	d1 f0       	breq	.+52     	; 0x87a <main+0xdc>
			uart_flush();
     846:	4a de       	rcall	.-876    	; 0x4dc <uart0_getint>
     848:	9a 83       	std	Y+2, r25	; 0x02
			if (u16_data_received >=10)
     84a:	89 83       	std	Y+1, r24	; 0x01
     84c:	cc dd       	rcall	.-1128   	; 0x3e6 <uart0_flush>
     84e:	89 81       	ldd	r24, Y+1	; 0x01
     850:	9a 81       	ldd	r25, Y+2	; 0x02
			{
				ComValues.u8_throttle_cmd = u16_data_received-10 ;
     852:	0a 97       	sbiw	r24, 0x0a	; 10
     854:	40 f0       	brcs	.+16     	; 0x866 <main+0xc8>
     856:	89 81       	ldd	r24, Y+1	; 0x01
     858:	9a 81       	ldd	r25, Y+2	; 0x02
     85a:	ed e1       	ldi	r30, 0x1D	; 29
     85c:	f1 e0       	ldi	r31, 0x01	; 1
				ComValues.motor_status = FW_BRAKE ;
     85e:	8a 50       	subi	r24, 0x0A	; 10
     860:	86 87       	std	Z+14, r24	; 0x0e
			}else{
				ComValues.u8_throttle_cmd = u16_data_received ;
     862:	f7 86       	std	Z+15, r15	; 0x0f
     864:	0a c0       	rjmp	.+20     	; 0x87a <main+0xdc>
     866:	89 81       	ldd	r24, Y+1	; 0x01
				ComValues.motor_status = FW_ACCEL;
     868:	9a 81       	ldd	r25, Y+2	; 0x02
				u8_watchdog = WATCHDOG_RELOAD_VALUE;
     86a:	ed e1       	ldi	r30, 0x1D	; 29
     86c:	f1 e0       	ldi	r31, 0x01	; 1
     86e:	86 87       	std	Z+14, r24	; 0x0e
     870:	e7 86       	std	Z+15, r14	; 0x0f
			}
		}
		
		uart_putint(u8_watchdog);
     872:	10 93 13 01 	sts	0x0113, r17	; 0x800113 <u8_watchdog+0x1>
     876:	00 93 12 01 	sts	0x0112, r16	; 0x800112 <u8_watchdog>
     87a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <u8_watchdog>
		uart_puts("\r\n");	
     87e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <u8_watchdog+0x1>
     882:	95 dd       	rcall	.-1238   	; 0x3ae <uart0_putint>
     884:	84 e1       	ldi	r24, 0x14	; 20
	}
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	83 dd       	rcall	.-1274   	; 0x390 <uart0_putstr>
     88a:	cc cf       	rjmp	.-104    	; 0x824 <main+0x86>

0000088c <__vector_16>:
}


ISR(TIMER0_COMP_vect){ // every 100ms
     88c:	1f 92       	push	r1
     88e:	0f 92       	push	r0
     890:	0f b6       	in	r0, 0x3f	; 63
     892:	0f 92       	push	r0
     894:	11 24       	eor	r1, r1
     896:	0b b6       	in	r0, 0x3b	; 59
     898:	0f 92       	push	r0
     89a:	cf 92       	push	r12
     89c:	df 92       	push	r13
     89e:	ef 92       	push	r14
     8a0:	ff 92       	push	r15
     8a2:	2f 93       	push	r18
     8a4:	3f 93       	push	r19
     8a6:	4f 93       	push	r20
     8a8:	5f 93       	push	r21
     8aa:	6f 93       	push	r22
     8ac:	7f 93       	push	r23
     8ae:	8f 93       	push	r24
     8b0:	9f 93       	push	r25
     8b2:	af 93       	push	r26
     8b4:	bf 93       	push	r27
     8b6:	ef 93       	push	r30
     8b8:	ff 93       	push	r31
	
	if (u8_watchdog == 0)
     8ba:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <u8_watchdog>
     8be:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <u8_watchdog+0x1>
     8c2:	00 97       	sbiw	r24, 0x00	; 0
     8c4:	19 f4       	brne	.+6      	; 0x8cc <__vector_16+0x40>
	{
		ComValues.u8_throttle_cmd = 0 ;
     8c6:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <ComValues+0xe>
     8ca:	05 c0       	rjmp	.+10     	; 0x8d6 <__vector_16+0x4a>
		/*TODO
		* send CAN to demand motor disengage
		* drivers disable
		*/
	} else {
		u8_watchdog -- ;	
     8cc:	01 97       	sbiw	r24, 0x01	; 1
     8ce:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <u8_watchdog+0x1>
     8d2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <u8_watchdog>
	}
	send_can = 1;
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <send_can>

	if (ComValues.motor_status == FW_BRAKE || ComValues.motor_status == BW_ACCEL)
     8dc:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <ComValues+0xf>
     8e0:	82 50       	subi	r24, 0x02	; 2
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	98 f4       	brcc	.+38     	; 0x90c <__vector_16+0x80>
	{
		//drivers turn on
		controller(-ComValues.u8_throttle_cmd, ComValues.f32_motor_current);
     8e6:	ed e1       	ldi	r30, 0x1D	; 29
     8e8:	f1 e0       	ldi	r31, 0x01	; 1
     8ea:	c0 80       	ld	r12, Z
     8ec:	d1 80       	ldd	r13, Z+1	; 0x01
     8ee:	e2 80       	ldd	r14, Z+2	; 0x02
     8f0:	f3 80       	ldd	r15, Z+3	; 0x03
     8f2:	66 85       	ldd	r22, Z+14	; 0x0e
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	71 95       	neg	r23
     8f8:	61 95       	neg	r22
     8fa:	71 09       	sbc	r23, r1
     8fc:	07 2e       	mov	r0, r23
     8fe:	00 0c       	add	r0, r0
     900:	88 0b       	sbc	r24, r24
     902:	99 0b       	sbc	r25, r25
     904:	55 d6       	rcall	.+3242   	; 0x15b0 <__floatsisf>
     906:	a7 01       	movw	r20, r14
     908:	96 01       	movw	r18, r12
     90a:	eb db       	rcall	.-2090   	; 0xe2 <controller>
	}
	if (ComValues.motor_status == BW_BRAKE || ComValues.motor_status == FW_ACCEL)
     90c:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <ComValues+0xf>
     910:	84 30       	cpi	r24, 0x04	; 4
     912:	11 f0       	breq	.+4      	; 0x918 <__vector_16+0x8c>
     914:	81 30       	cpi	r24, 0x01	; 1
     916:	71 f4       	brne	.+28     	; 0x934 <__vector_16+0xa8>
	{
		//drivers turn on
		controller(ComValues.u8_throttle_cmd, ComValues.f32_motor_current);
     918:	ed e1       	ldi	r30, 0x1D	; 29
     91a:	f1 e0       	ldi	r31, 0x01	; 1
     91c:	c0 80       	ld	r12, Z
     91e:	d1 80       	ldd	r13, Z+1	; 0x01
     920:	e2 80       	ldd	r14, Z+2	; 0x02
     922:	f3 80       	ldd	r15, Z+3	; 0x03
     924:	66 85       	ldd	r22, Z+14	; 0x0e
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	3f d6       	rcall	.+3198   	; 0x15ac <__floatunsisf>
     92e:	a7 01       	movw	r20, r14
     930:	96 01       	movw	r18, r12
     932:	d7 db       	rcall	.-2130   	; 0xe2 <controller>
	}
	if (ComValues.motor_status == IDLE)
     934:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <ComValues+0xf>
     938:	81 11       	cpse	r24, r1
     93a:	0c c0       	rjmp	.+24     	; 0x954 <__vector_16+0xc8>
	{
		controller(0.0, ComValues.f32_motor_current);
     93c:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <ComValues>
     940:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <ComValues+0x1>
     944:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <ComValues+0x2>
     948:	50 91 20 01 	lds	r21, 0x0120	; 0x800120 <ComValues+0x3>
     94c:	60 e0       	ldi	r22, 0x00	; 0
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	cb 01       	movw	r24, r22
		//drivers shutdown
	}
	
	
	handle_speed_sensor(&ComValues.u8_car_speed, &u16_speed_count, 100);
     952:	c7 db       	rcall	.-2162   	; 0xe2 <controller>
     954:	44 e6       	ldi	r20, 0x64	; 100
     956:	6e e2       	ldi	r22, 0x2E	; 46
     958:	71 e0       	ldi	r23, 0x01	; 1
     95a:	8a e2       	ldi	r24, 0x2A	; 42
     95c:	91 e0       	ldi	r25, 0x01	; 1
}
     95e:	8f dc       	rcall	.-1762   	; 0x27e <handle_speed_sensor>
     960:	ff 91       	pop	r31
     962:	ef 91       	pop	r30
     964:	bf 91       	pop	r27
     966:	af 91       	pop	r26
     968:	9f 91       	pop	r25
     96a:	8f 91       	pop	r24
     96c:	7f 91       	pop	r23
     96e:	6f 91       	pop	r22
     970:	5f 91       	pop	r21
     972:	4f 91       	pop	r20
     974:	3f 91       	pop	r19
     976:	2f 91       	pop	r18
     978:	ff 90       	pop	r15
     97a:	ef 90       	pop	r14
     97c:	df 90       	pop	r13
     97e:	cf 90       	pop	r12
     980:	0f 90       	pop	r0
     982:	0b be       	out	0x3b, r0	; 59
     984:	0f 90       	pop	r0
     986:	0f be       	out	0x3f, r0	; 63
     988:	0f 90       	pop	r0
     98a:	1f 90       	pop	r1
     98c:	18 95       	reti

0000098e <__vector_12>:
*	CH2 : Battery voltage
*	CH4 : Motor temperature
*/


ISR(TIMER1_COMPA_vect){// every 1ms nope
     98e:	1f 92       	push	r1
     990:	0f 92       	push	r0
     992:	0f b6       	in	r0, 0x3f	; 63
     994:	0f 92       	push	r0
     996:	11 24       	eor	r1, r1
     998:	0b b6       	in	r0, 0x3b	; 59
     99a:	0f 92       	push	r0
     99c:	2f 93       	push	r18
     99e:	3f 93       	push	r19
     9a0:	4f 93       	push	r20
     9a2:	5f 93       	push	r21
     9a4:	6f 93       	push	r22
     9a6:	7f 93       	push	r23
     9a8:	8f 93       	push	r24
     9aa:	9f 93       	push	r25
     9ac:	af 93       	push	r26
     9ae:	bf 93       	push	r27
     9b0:	ef 93       	push	r30
     9b2:	ff 93       	push	r31

	if (u8_SPI_count == 4)
     9b4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <u8_SPI_count>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	e1 f4       	brne	.+56     	; 0x9f4 <__vector_12+0x66>
	{
		//motor temp
		Set_ADC_Channel_ext(4, u8_txBuffer);
     9bc:	63 e3       	ldi	r22, 0x33	; 51
     9be:	71 e0       	ldi	r23, 0x01	; 1
     9c0:	d3 d1       	rcall	.+934    	; 0xd68 <Set_ADC_Channel_ext>
		spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     9c2:	21 e0       	ldi	r18, 0x01	; 1
     9c4:	43 e0       	ldi	r20, 0x03	; 3
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	60 e3       	ldi	r22, 0x30	; 48
     9ca:	71 e0       	ldi	r23, 0x01	; 1
     9cc:	83 e3       	ldi	r24, 0x33	; 51
     9ce:	91 e0       	ldi	r25, 0x01	; 1
     9d0:	8b d4       	rcall	.+2326   	; 0x12e8 <spi_trancieve>
		u8_rxBuffer[1]&= ~(0b111<<5);
     9d2:	e0 e3       	ldi	r30, 0x30	; 48
     9d4:	f1 e0       	ldi	r31, 0x01	; 1
     9d6:	81 81       	ldd	r24, Z+1	; 0x01
     9d8:	8f 71       	andi	r24, 0x1F	; 31
     9da:	81 83       	std	Z+1, r24	; 0x01
		u16_ADC4_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	98 2f       	mov	r25, r24
     9e0:	88 27       	eor	r24, r24
     9e2:	22 81       	ldd	r18, Z+2	; 0x02
     9e4:	82 2b       	or	r24, r18
     9e6:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <u16_ADC4_reg+0x1>
     9ea:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <u16_ADC4_reg>
		u8_SPI_count = 0 ;
     9ee:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <u8_SPI_count>
     9f2:	28 c0       	rjmp	.+80     	; 0xa44 <__vector_12+0xb6>
	}
	
	if (u8_SPI_count == 3)
     9f4:	83 30       	cpi	r24, 0x03	; 3
     9f6:	21 f4       	brne	.+8      	; 0xa00 <__vector_12+0x72>
	{
		u8_SPI_count ++ ;
     9f8:	84 e0       	ldi	r24, 0x04	; 4
     9fa:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <u8_SPI_count>
     9fe:	44 c0       	rjmp	.+136    	; 0xa88 <__vector_12+0xfa>
	}
	
	if (u8_SPI_count == 2)
     a00:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <u8_SPI_count>
     a04:	82 30       	cpi	r24, 0x02	; 2
	{
		//batt volt
		Set_ADC_Channel_ext(2, u8_txBuffer);
     a06:	f1 f4       	brne	.+60     	; 0xa44 <__vector_12+0xb6>
     a08:	63 e3       	ldi	r22, 0x33	; 51
     a0a:	71 e0       	ldi	r23, 0x01	; 1
		spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     a0c:	ad d1       	rcall	.+858    	; 0xd68 <Set_ADC_Channel_ext>
     a0e:	21 e0       	ldi	r18, 0x01	; 1
     a10:	43 e0       	ldi	r20, 0x03	; 3
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	60 e3       	ldi	r22, 0x30	; 48
     a16:	71 e0       	ldi	r23, 0x01	; 1
     a18:	83 e3       	ldi	r24, 0x33	; 51
     a1a:	91 e0       	ldi	r25, 0x01	; 1
		u8_rxBuffer[1]&= ~(0b111<<5);
     a1c:	65 d4       	rcall	.+2250   	; 0x12e8 <spi_trancieve>
     a1e:	e0 e3       	ldi	r30, 0x30	; 48
     a20:	f1 e0       	ldi	r31, 0x01	; 1
     a22:	81 81       	ldd	r24, Z+1	; 0x01
     a24:	8f 71       	andi	r24, 0x1F	; 31
		u16_ADC2_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
     a26:	81 83       	std	Z+1, r24	; 0x01
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	98 2f       	mov	r25, r24
     a2c:	88 27       	eor	r24, r24
     a2e:	22 81       	ldd	r18, Z+2	; 0x02
     a30:	82 2b       	or	r24, r18
     a32:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <u16_ADC2_reg+0x1>
     a36:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <u16_ADC2_reg>
		u8_SPI_count ++ ;
     a3a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <u8_SPI_count>
     a3e:	8f 5f       	subi	r24, 0xFF	; 255
     a40:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <u8_SPI_count>
	}
	
	if (u8_SPI_count == 1)
     a44:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <u8_SPI_count>
	{
		//batt current
		Set_ADC_Channel_ext(1, u8_txBuffer);
     a48:	81 30       	cpi	r24, 0x01	; 1
     a4a:	f1 f4       	brne	.+60     	; 0xa88 <__vector_12+0xfa>
     a4c:	63 e3       	ldi	r22, 0x33	; 51
     a4e:	71 e0       	ldi	r23, 0x01	; 1
		spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     a50:	8b d1       	rcall	.+790    	; 0xd68 <Set_ADC_Channel_ext>
     a52:	21 e0       	ldi	r18, 0x01	; 1
     a54:	43 e0       	ldi	r20, 0x03	; 3
     a56:	50 e0       	ldi	r21, 0x00	; 0
     a58:	60 e3       	ldi	r22, 0x30	; 48
     a5a:	71 e0       	ldi	r23, 0x01	; 1
     a5c:	83 e3       	ldi	r24, 0x33	; 51
     a5e:	91 e0       	ldi	r25, 0x01	; 1
		u8_rxBuffer[1]&= ~(0b111<<5);
     a60:	43 d4       	rcall	.+2182   	; 0x12e8 <spi_trancieve>
     a62:	e0 e3       	ldi	r30, 0x30	; 48
     a64:	f1 e0       	ldi	r31, 0x01	; 1
     a66:	81 81       	ldd	r24, Z+1	; 0x01
     a68:	8f 71       	andi	r24, 0x1F	; 31
		u16_ADC1_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
     a6a:	81 83       	std	Z+1, r24	; 0x01
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	98 2f       	mov	r25, r24
     a70:	88 27       	eor	r24, r24
     a72:	22 81       	ldd	r18, Z+2	; 0x02
     a74:	82 2b       	or	r24, r18
     a76:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <u16_ADC1_reg+0x1>
     a7a:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <u16_ADC1_reg>
		u8_SPI_count ++ ;
     a7e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <u8_SPI_count>
     a82:	8f 5f       	subi	r24, 0xFF	; 255
	}	
	
	if (u8_SPI_count == 0)
     a84:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <u8_SPI_count>
     a88:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <u8_SPI_count>
	{
		//motor current
		Set_ADC_Channel_ext(0, u8_txBuffer);
     a8c:	81 11       	cpse	r24, r1
     a8e:	1e c0       	rjmp	.+60     	; 0xacc <__vector_12+0x13e>
		spi_trancieve(u8_txBuffer, u8_rxBuffer, 3, 1);
     a90:	63 e3       	ldi	r22, 0x33	; 51
     a92:	71 e0       	ldi	r23, 0x01	; 1
     a94:	69 d1       	rcall	.+722    	; 0xd68 <Set_ADC_Channel_ext>
     a96:	21 e0       	ldi	r18, 0x01	; 1
     a98:	43 e0       	ldi	r20, 0x03	; 3
     a9a:	50 e0       	ldi	r21, 0x00	; 0
     a9c:	60 e3       	ldi	r22, 0x30	; 48
     a9e:	71 e0       	ldi	r23, 0x01	; 1
		u8_rxBuffer[1]&= ~(0b111<<5);
     aa0:	83 e3       	ldi	r24, 0x33	; 51
     aa2:	91 e0       	ldi	r25, 0x01	; 1
     aa4:	21 d4       	rcall	.+2114   	; 0x12e8 <spi_trancieve>
     aa6:	e0 e3       	ldi	r30, 0x30	; 48
     aa8:	f1 e0       	ldi	r31, 0x01	; 1
		u16_ADC0_reg = (u8_rxBuffer[1] << 8 ) | u8_rxBuffer[2];
     aaa:	81 81       	ldd	r24, Z+1	; 0x01
     aac:	8f 71       	andi	r24, 0x1F	; 31
     aae:	81 83       	std	Z+1, r24	; 0x01
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	98 2f       	mov	r25, r24
     ab4:	88 27       	eor	r24, r24
     ab6:	22 81       	ldd	r18, Z+2	; 0x02
     ab8:	82 2b       	or	r24, r18
     aba:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <u16_ADC0_reg+0x1>
		u8_SPI_count ++ ;
     abe:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <u16_ADC0_reg>
     ac2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <u8_SPI_count>
	}
	
	////////////////////INTERPRETATION OF RECEIVED ADC VALUES//////////////
	handle_current_sensor(&ComValues.f32_motor_current, u16_ADC0_reg);
     ac6:	8f 5f       	subi	r24, 0xFF	; 255
     ac8:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <u8_SPI_count>
     acc:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <u16_ADC0_reg>
     ad0:	70 91 3e 01 	lds	r23, 0x013E	; 0x80013e <u16_ADC0_reg+0x1>
	handle_current_sensor(&ComValues.f32_batt_current, u16_ADC1_reg);
     ad4:	8d e1       	ldi	r24, 0x1D	; 29
     ad6:	91 e0       	ldi	r25, 0x01	; 1
     ad8:	78 d0       	rcall	.+240    	; 0xbca <handle_current_sensor>
     ada:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <u16_ADC1_reg>
     ade:	70 91 3c 01 	lds	r23, 0x013C	; 0x80013c <u16_ADC1_reg+0x1>
	ComValues.f32_batt_volt = (float)u16_ADC2_reg/82; // *5/4096 (12bit ADC with Vref = 5V) *0.1 (divider bridge 50V -> 5V)
     ae2:	81 e2       	ldi	r24, 0x21	; 33
     ae4:	91 e0       	ldi	r25, 0x01	; 1
     ae6:	71 d0       	rcall	.+226    	; 0xbca <handle_current_sensor>
     ae8:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <u16_ADC2_reg>
     aec:	70 91 3a 01 	lds	r23, 0x013A	; 0x80013a <u16_ADC2_reg+0x1>
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	5b d5       	rcall	.+2742   	; 0x15ac <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	44 ea       	ldi	r20, 0xA4	; 164
     afc:	52 e4       	ldi	r21, 0x42	; 66
     afe:	bd d4       	rcall	.+2426   	; 0x147a <__divsf3>
     b00:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <ComValues+0x8>
     b04:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <ComValues+0x9>
	handle_temp_sensor(&ComValues.u8_motor_temp, u16_ADC4_reg);
     b08:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <ComValues+0xa>
     b0c:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <ComValues+0xb>
     b10:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <u16_ADC4_reg>
     b14:	70 91 38 01 	lds	r23, 0x0138	; 0x800138 <u16_ADC4_reg+0x1>
}
     b18:	89 e2       	ldi	r24, 0x29	; 41
     b1a:	91 e0       	ldi	r25, 0x01	; 1
     b1c:	a3 d0       	rcall	.+326    	; 0xc64 <handle_temp_sensor>
     b1e:	ff 91       	pop	r31
     b20:	ef 91       	pop	r30
     b22:	bf 91       	pop	r27
     b24:	af 91       	pop	r26
     b26:	9f 91       	pop	r25
     b28:	8f 91       	pop	r24
     b2a:	7f 91       	pop	r23
     b2c:	6f 91       	pop	r22
     b2e:	5f 91       	pop	r21
     b30:	4f 91       	pop	r20
     b32:	3f 91       	pop	r19
     b34:	2f 91       	pop	r18
     b36:	0f 90       	pop	r0
     b38:	0b be       	out	0x3b, r0	; 59
     b3a:	0f 90       	pop	r0
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	0f 90       	pop	r0
     b40:	1f 90       	pop	r1
     b42:	18 95       	reti

00000b44 <__vector_6>:


ISR(INT5_vect)
{
     b44:	1f 92       	push	r1
     b46:	0f 92       	push	r0
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	0f 92       	push	r0
     b4c:	11 24       	eor	r1, r1
     b4e:	8f 93       	push	r24
     b50:	9f 93       	push	r25
	u16_speed_count ++ ;
     b52:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <u16_speed_count>
     b56:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <u16_speed_count+0x1>
     b5a:	01 96       	adiw	r24, 0x01	; 1
     b5c:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <u16_speed_count+0x1>
     b60:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <u16_speed_count>
}
     b64:	9f 91       	pop	r25
     b66:	8f 91       	pop	r24
     b68:	0f 90       	pop	r0
     b6a:	0f be       	out	0x3f, r0	; 63
     b6c:	0f 90       	pop	r0
     b6e:	1f 90       	pop	r1
     b70:	18 95       	reti

00000b72 <pid_init>:
	output = propGain + intGain + derGain;
	//printf("Out: %d \n", output);
	return output;
}

void pid_init(Pid_t *PID, float t, float p, float i, float d){
     b72:	8f 92       	push	r8
     b74:	9f 92       	push	r9
     b76:	af 92       	push	r10
     b78:	bf 92       	push	r11
     b7a:	cf 92       	push	r12
     b7c:	df 92       	push	r13
     b7e:	ef 92       	push	r14
     b80:	ff 92       	push	r15
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
     b8e:	fc 01       	movw	r30, r24
	PID->Kp = p;
     b90:	04 87       	std	Z+12, r16	; 0x0c
     b92:	15 87       	std	Z+13, r17	; 0x0d
     b94:	26 87       	std	Z+14, r18	; 0x0e
     b96:	37 87       	std	Z+15, r19	; 0x0f
	PID->Ki = i;
     b98:	c4 8a       	std	Z+20, r12	; 0x14
     b9a:	d5 8a       	std	Z+21, r13	; 0x15
     b9c:	e6 8a       	std	Z+22, r14	; 0x16
     b9e:	f7 8a       	std	Z+23, r15	; 0x17
	PID->Kd = d;
     ba0:	80 8a       	std	Z+16, r8	; 0x10
     ba2:	91 8a       	std	Z+17, r9	; 0x11
     ba4:	a2 8a       	std	Z+18, r10	; 0x12
     ba6:	b3 8a       	std	Z+19, r11	; 0x13
	PID->timeStep = t;
     ba8:	40 87       	std	Z+8, r20	; 0x08
     baa:	51 87       	std	Z+9, r21	; 0x09
     bac:	62 87       	std	Z+10, r22	; 0x0a
     bae:	73 87       	std	Z+11, r23	; 0x0b
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	1f 91       	pop	r17
     bb6:	0f 91       	pop	r16
     bb8:	ff 90       	pop	r15
     bba:	ef 90       	pop	r14
     bbc:	df 90       	pop	r13
     bbe:	cf 90       	pop	r12
     bc0:	bf 90       	pop	r11
     bc2:	af 90       	pop	r10
     bc4:	9f 90       	pop	r9
     bc6:	8f 90       	pop	r8
     bc8:	08 95       	ret

00000bca <handle_current_sensor>:
#define TRANSDUCER_SENSIBILITY 0.0416
#define TRANSDUCER_OFFSET 2.26
#define LOWPASS_CONSTANT 0.1

void handle_current_sensor(float *f32_current, uint16_t u16_ADC_reg)
{
     bca:	0f 93       	push	r16
     bcc:	1f 93       	push	r17
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	00 d0       	rcall	.+0      	; 0xbd4 <handle_current_sensor+0xa>
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <handle_current_sensor+0xc>
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	8c 01       	movw	r16, r24
	volatile float f_new_current = ((((float)u16_ADC_reg*5/4096) - TRANSDUCER_OFFSET)/TRANSDUCER_SENSIBILITY)/3 ;// /3 because current passes 3x in transducer for more precision.
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	e5 d4       	rcall	.+2506   	; 0x15ac <__floatunsisf>
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	40 ea       	ldi	r20, 0xA0	; 160
     be8:	50 e4       	ldi	r21, 0x40	; 64
     bea:	96 d5       	rcall	.+2860   	; 0x1718 <__mulsf3>
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	40 e8       	ldi	r20, 0x80	; 128
     bf2:	59 e3       	ldi	r21, 0x39	; 57
     bf4:	91 d5       	rcall	.+2850   	; 0x1718 <__mulsf3>
     bf6:	27 ed       	ldi	r18, 0xD7	; 215
     bf8:	33 ea       	ldi	r19, 0xA3	; 163
     bfa:	40 e1       	ldi	r20, 0x10	; 16
     bfc:	50 e4       	ldi	r21, 0x40	; 64
     bfe:	d4 d3       	rcall	.+1960   	; 0x13a8 <__subsf3>
     c00:	23 ec       	ldi	r18, 0xC3	; 195
     c02:	34 e6       	ldi	r19, 0x64	; 100
     c04:	4a e2       	ldi	r20, 0x2A	; 42
     c06:	5d e3       	ldi	r21, 0x3D	; 61
     c08:	38 d4       	rcall	.+2160   	; 0x147a <__divsf3>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e4       	ldi	r20, 0x40	; 64
     c10:	50 e4       	ldi	r21, 0x40	; 64
     c12:	33 d4       	rcall	.+2150   	; 0x147a <__divsf3>
     c14:	69 83       	std	Y+1, r22	; 0x01
     c16:	7a 83       	std	Y+2, r23	; 0x02
     c18:	8b 83       	std	Y+3, r24	; 0x03
     c1a:	9c 83       	std	Y+4, r25	; 0x04
	f_new_current = (f_new_current+0.11)*1.1 ;// correction of offset and ramp error (conversion + hardware) measured with ampmeter of the power supply : bad
     c1c:	69 81       	ldd	r22, Y+1	; 0x01
     c1e:	7a 81       	ldd	r23, Y+2	; 0x02
     c20:	8b 81       	ldd	r24, Y+3	; 0x03
     c22:	9c 81       	ldd	r25, Y+4	; 0x04
     c24:	2e ea       	ldi	r18, 0xAE	; 174
     c26:	37 e4       	ldi	r19, 0x47	; 71
     c28:	41 ee       	ldi	r20, 0xE1	; 225
     c2a:	5d e3       	ldi	r21, 0x3D	; 61
     c2c:	be d3       	rcall	.+1916   	; 0x13aa <__addsf3>
     c2e:	2d ec       	ldi	r18, 0xCD	; 205
     c30:	3c ec       	ldi	r19, 0xCC	; 204
     c32:	4c e8       	ldi	r20, 0x8C	; 140
     c34:	5f e3       	ldi	r21, 0x3F	; 63
     c36:	70 d5       	rcall	.+2784   	; 0x1718 <__mulsf3>
     c38:	69 83       	std	Y+1, r22	; 0x01
     c3a:	7a 83       	std	Y+2, r23	; 0x02
     c3c:	8b 83       	std	Y+3, r24	; 0x03
     c3e:	9c 83       	std	Y+4, r25	; 0x04
	//*f32_prev_current = (*f32_prev_current)*(1-LOWPASS_CONSTANT) + LOWPASS_CONSTANT*f_new_current ;// low pass filter ---------------------TODO test
	*f32_current = f_new_current;
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	9a 81       	ldd	r25, Y+2	; 0x02
     c44:	ab 81       	ldd	r26, Y+3	; 0x03
     c46:	bc 81       	ldd	r27, Y+4	; 0x04
     c48:	f8 01       	movw	r30, r16
     c4a:	80 83       	st	Z, r24
     c4c:	91 83       	std	Z+1, r25	; 0x01
     c4e:	a2 83       	std	Z+2, r26	; 0x02
     c50:	b3 83       	std	Z+3, r27	; 0x03
}
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	1f 91       	pop	r17
     c60:	0f 91       	pop	r16
     c62:	08 95       	ret

00000c64 <handle_temp_sensor>:

void handle_temp_sensor(uint8_t *u8_temp, uint16_t u16_ADC_reg)
{
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	00 d0       	rcall	.+0      	; 0xc6e <handle_temp_sensor+0xa>
     c6e:	00 d0       	rcall	.+0      	; 0xc70 <handle_temp_sensor+0xc>
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
     c74:	8c 01       	movw	r16, r24
	volatile float f_sens_volt = ((float)u16_ADC_reg*5/4096);
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	98 d4       	rcall	.+2352   	; 0x15ac <__floatunsisf>
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	40 ea       	ldi	r20, 0xA0	; 160
     c82:	50 e4       	ldi	r21, 0x40	; 64
     c84:	49 d5       	rcall	.+2706   	; 0x1718 <__mulsf3>
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	40 e8       	ldi	r20, 0x80	; 128
     c8c:	59 e3       	ldi	r21, 0x39	; 57
     c8e:	44 d5       	rcall	.+2696   	; 0x1718 <__mulsf3>
     c90:	69 83       	std	Y+1, r22	; 0x01
     c92:	7a 83       	std	Y+2, r23	; 0x02
     c94:	8b 83       	std	Y+3, r24	; 0x03
     c96:	9c 83       	std	Y+4, r25	; 0x04
	// 0 -> 3.7V => T = 20*V-22
	// 3.7 -> 4.7V => T = 55.5*V-155.5
	// 4.7 -> 5V => T = 220*V-840
	// this approximation system is used because it requires less processing power and variable accuracy than the 3rd order polyfit.
	
	if (f_sens_volt <= 3.7)
     c98:	69 81       	ldd	r22, Y+1	; 0x01
     c9a:	7a 81       	ldd	r23, Y+2	; 0x02
     c9c:	8b 81       	ldd	r24, Y+3	; 0x03
     c9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ca0:	2d ec       	ldi	r18, 0xCD	; 205
     ca2:	3c ec       	ldi	r19, 0xCC	; 204
     ca4:	4c e6       	ldi	r20, 0x6C	; 108
     ca6:	50 e4       	ldi	r21, 0x40	; 64
     ca8:	e4 d3       	rcall	.+1992   	; 0x1472 <__cmpsf2>
     caa:	18 16       	cp	r1, r24
     cac:	8c f0       	brlt	.+34     	; 0xcd0 <handle_temp_sensor+0x6c>
	{
		*u8_temp = (uint8_t)(20*f_sens_volt-22);
     cae:	69 81       	ldd	r22, Y+1	; 0x01
     cb0:	7a 81       	ldd	r23, Y+2	; 0x02
     cb2:	8b 81       	ldd	r24, Y+3	; 0x03
     cb4:	9c 81       	ldd	r25, Y+4	; 0x04
     cb6:	20 e0       	ldi	r18, 0x00	; 0
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	40 ea       	ldi	r20, 0xA0	; 160
     cbc:	51 e4       	ldi	r21, 0x41	; 65
     cbe:	2c d5       	rcall	.+2648   	; 0x1718 <__mulsf3>
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	40 eb       	ldi	r20, 0xB0	; 176
     cc6:	51 e4       	ldi	r21, 0x41	; 65
     cc8:	6f d3       	rcall	.+1758   	; 0x13a8 <__subsf3>
     cca:	44 d4       	rcall	.+2184   	; 0x1554 <__fixunssfsi>
     ccc:	f8 01       	movw	r30, r16
     cce:	60 83       	st	Z, r22
	}
	
	if (f_sens_volt <= 4.7 && f_sens_volt > 3.7)
     cd0:	69 81       	ldd	r22, Y+1	; 0x01
     cd2:	7a 81       	ldd	r23, Y+2	; 0x02
     cd4:	8b 81       	ldd	r24, Y+3	; 0x03
     cd6:	9c 81       	ldd	r25, Y+4	; 0x04
     cd8:	26 e6       	ldi	r18, 0x66	; 102
     cda:	36 e6       	ldi	r19, 0x66	; 102
     cdc:	46 e9       	ldi	r20, 0x96	; 150
     cde:	50 e4       	ldi	r21, 0x40	; 64
     ce0:	c8 d3       	rcall	.+1936   	; 0x1472 <__cmpsf2>
     ce2:	18 16       	cp	r1, r24
     ce4:	e4 f0       	brlt	.+56     	; 0xd1e <handle_temp_sensor+0xba>
     ce6:	69 81       	ldd	r22, Y+1	; 0x01
     ce8:	7a 81       	ldd	r23, Y+2	; 0x02
     cea:	8b 81       	ldd	r24, Y+3	; 0x03
     cec:	9c 81       	ldd	r25, Y+4	; 0x04
     cee:	2d ec       	ldi	r18, 0xCD	; 205
     cf0:	3c ec       	ldi	r19, 0xCC	; 204
     cf2:	4c e6       	ldi	r20, 0x6C	; 108
     cf4:	50 e4       	ldi	r21, 0x40	; 64
     cf6:	0c d5       	rcall	.+2584   	; 0x1710 <__gesf2>
	{
		*u8_temp = (uint8_t)(55.5*f_sens_volt-155.5);
     cf8:	18 16       	cp	r1, r24
     cfa:	8c f4       	brge	.+34     	; 0xd1e <handle_temp_sensor+0xba>
     cfc:	69 81       	ldd	r22, Y+1	; 0x01
     cfe:	7a 81       	ldd	r23, Y+2	; 0x02
     d00:	8b 81       	ldd	r24, Y+3	; 0x03
     d02:	9c 81       	ldd	r25, Y+4	; 0x04
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	4e e5       	ldi	r20, 0x5E	; 94
     d0a:	52 e4       	ldi	r21, 0x42	; 66
     d0c:	05 d5       	rcall	.+2570   	; 0x1718 <__mulsf3>
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e8       	ldi	r19, 0x80	; 128
     d12:	4b e1       	ldi	r20, 0x1B	; 27
     d14:	53 e4       	ldi	r21, 0x43	; 67
     d16:	48 d3       	rcall	.+1680   	; 0x13a8 <__subsf3>
     d18:	1d d4       	rcall	.+2106   	; 0x1554 <__fixunssfsi>
	}
	
	if (f_sens_volt > 4.7)
     d1a:	f8 01       	movw	r30, r16
     d1c:	60 83       	st	Z, r22
     d1e:	69 81       	ldd	r22, Y+1	; 0x01
     d20:	7a 81       	ldd	r23, Y+2	; 0x02
     d22:	8b 81       	ldd	r24, Y+3	; 0x03
     d24:	9c 81       	ldd	r25, Y+4	; 0x04
     d26:	26 e6       	ldi	r18, 0x66	; 102
     d28:	36 e6       	ldi	r19, 0x66	; 102
     d2a:	46 e9       	ldi	r20, 0x96	; 150
     d2c:	50 e4       	ldi	r21, 0x40	; 64
	{
		*u8_temp = (uint8_t)(200*f_sens_volt-840);
     d2e:	f0 d4       	rcall	.+2528   	; 0x1710 <__gesf2>
     d30:	18 16       	cp	r1, r24
     d32:	8c f4       	brge	.+34     	; 0xd56 <handle_temp_sensor+0xf2>
     d34:	69 81       	ldd	r22, Y+1	; 0x01
     d36:	7a 81       	ldd	r23, Y+2	; 0x02
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
     d3a:	9c 81       	ldd	r25, Y+4	; 0x04
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	48 e4       	ldi	r20, 0x48	; 72
     d42:	53 e4       	ldi	r21, 0x43	; 67
     d44:	e9 d4       	rcall	.+2514   	; 0x1718 <__mulsf3>
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	42 e5       	ldi	r20, 0x52	; 82
     d4c:	54 e4       	ldi	r21, 0x44	; 68
     d4e:	2c d3       	rcall	.+1624   	; 0x13a8 <__subsf3>
     d50:	01 d4       	rcall	.+2050   	; 0x1554 <__fixunssfsi>
	}
     d52:	f8 01       	movw	r30, r16
     d54:	60 83       	st	Z, r22
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	0f 90       	pop	r0
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	1f 91       	pop	r17
     d64:	0f 91       	pop	r16
     d66:	08 95       	ret

00000d68 <Set_ADC_Channel_ext>:
	ADMUX = (ADMUX & 0xF8)|channel; // clears the bottom 3 bits before ORing
}

void Set_ADC_Channel_ext(uint8_t u8_CHn, uint8_t * u8_ADC_tx)
{
	switch(u8_CHn)
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	88 30       	cpi	r24, 0x08	; 8
     d6c:	91 05       	cpc	r25, r1
     d6e:	88 f5       	brcc	.+98     	; 0xdd2 <Set_ADC_Channel_ext+0x6a>
     d70:	fc 01       	movw	r30, r24
     d72:	e6 5b       	subi	r30, 0xB6	; 182
     d74:	ff 4f       	sbci	r31, 0xFF	; 255
     d76:	33 c5       	rjmp	.+2662   	; 0x17de <__tablejump2__>
	{
		case 0 :
			u8_ADC_tx[0] = 0b00000110 ;
     d78:	86 e0       	ldi	r24, 0x06	; 6
     d7a:	fb 01       	movw	r30, r22
     d7c:	80 83       	st	Z, r24
			u8_ADC_tx[1] = 0b00 ;
     d7e:	11 82       	std	Z+1, r1	; 0x01
		break;
     d80:	08 95       	ret
		
		case 1 :
			u8_ADC_tx[0] = 0b00000110 ;
     d82:	86 e0       	ldi	r24, 0x06	; 6
     d84:	fb 01       	movw	r30, r22
     d86:	80 83       	st	Z, r24
			u8_ADC_tx[1] = 0b01 << 6 ;
     d88:	80 e4       	ldi	r24, 0x40	; 64
     d8a:	81 83       	std	Z+1, r24	; 0x01
		break;
     d8c:	08 95       	ret
		
		case 2 :
			u8_ADC_tx[0] = 0b00000110 ;
     d8e:	86 e0       	ldi	r24, 0x06	; 6
     d90:	fb 01       	movw	r30, r22
     d92:	80 83       	st	Z, r24
			u8_ADC_tx[1] = 0b10 << 6 ;
     d94:	80 e8       	ldi	r24, 0x80	; 128
     d96:	81 83       	std	Z+1, r24	; 0x01
		break;
     d98:	08 95       	ret
		
		case 3 :
		u8_ADC_tx[0] = 0b00000110 ;
     d9a:	86 e0       	ldi	r24, 0x06	; 6
     d9c:	fb 01       	movw	r30, r22
     d9e:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b11 << 6 ;
     da0:	80 ec       	ldi	r24, 0xC0	; 192
     da2:	81 83       	std	Z+1, r24	; 0x01
		break;
     da4:	08 95       	ret
		
		case 4 :
		u8_ADC_tx[0] = 0b00000111 ;
     da6:	87 e0       	ldi	r24, 0x07	; 7
     da8:	fb 01       	movw	r30, r22
     daa:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b00 << 6 ;
     dac:	11 82       	std	Z+1, r1	; 0x01
		break;
     dae:	08 95       	ret
		
		case 5 :
		u8_ADC_tx[0] = 0b00000111 ;
     db0:	87 e0       	ldi	r24, 0x07	; 7
     db2:	fb 01       	movw	r30, r22
     db4:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b01 << 6 ;
     db6:	80 e4       	ldi	r24, 0x40	; 64
     db8:	81 83       	std	Z+1, r24	; 0x01
		break;
     dba:	08 95       	ret
		
		case 6 :
		u8_ADC_tx[0] = 0b00000111 ;
     dbc:	87 e0       	ldi	r24, 0x07	; 7
     dbe:	fb 01       	movw	r30, r22
     dc0:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b10 << 6 ;
     dc2:	80 e8       	ldi	r24, 0x80	; 128
     dc4:	81 83       	std	Z+1, r24	; 0x01
		break;
     dc6:	08 95       	ret
		
		case 7 :
		u8_ADC_tx[0] = 0b00000111 ;
     dc8:	87 e0       	ldi	r24, 0x07	; 7
     dca:	fb 01       	movw	r30, r22
     dcc:	80 83       	st	Z, r24
		u8_ADC_tx[1] = 0b11 << 6 ;
     dce:	80 ec       	ldi	r24, 0xC0	; 192
     dd0:	81 83       	std	Z+1, r24	; 0x01
     dd2:	08 95       	ret

00000dd4 <__vector_18>:

/**************************************************************************************************
*   CAN ISR - See 'can.h' Header file for Description
**************************************************************************************************/
ISR(CANIT_vect)
{
     dd4:	1f 92       	push	r1
     dd6:	0f 92       	push	r0
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	0f 92       	push	r0
     ddc:	11 24       	eor	r1, r1
     dde:	0b b6       	in	r0, 0x3b	; 59
     de0:	0f 92       	push	r0
     de2:	2f 93       	push	r18
     de4:	3f 93       	push	r19
     de6:	4f 93       	push	r20
     de8:	5f 93       	push	r21
     dea:	6f 93       	push	r22
     dec:	8f 93       	push	r24
     dee:	9f 93       	push	r25
     df0:	af 93       	push	r26
     df2:	bf 93       	push	r27
     df4:	ef 93       	push	r30
     df6:	ff 93       	push	r31
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
     dfc:	1f 92       	push	r1
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t mob_status;

	uint8_t mob_interrupts = CANSIT2;
     e02:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>

	// TX
	if ((mob_interrupts & (1 << SIT0)) && (CANIE2 & (1 << ENMOB0))) {
     e06:	80 ff       	sbrs	r24, 0
     e08:	47 c0       	rjmp	.+142    	; 0xe98 <__vector_18+0xc4>
     e0a:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     e0e:	90 ff       	sbrs	r25, 0
     e10:	43 c0       	rjmp	.+134    	; 0xe98 <__vector_18+0xc4>
		CANPAGE = (0x0 << MOBNB0); //Select TX Mob (Mob0)
     e12:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		mob_status = CANSTMOB;
     e16:	ee ee       	ldi	r30, 0xEE	; 238
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	89 83       	std	Y+1, r24	; 0x01
		CANSTMOB &= ~(1 << TXOK); //clear MB1, TX interrupt
     e1e:	80 81       	ld	r24, Z
     e20:	8f 7b       	andi	r24, 0xBF	; 191
     e22:	80 83       	st	Z, r24

		if (tx_on != tx_off) {
     e24:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <tx_off>
     e28:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <tx_on>
     e2c:	98 17       	cp	r25, r24
     e2e:	89 f1       	breq	.+98     	; 0xe92 <__vector_18+0xbe>
			unsigned char pos;
			pos = tx_off & (TX_SIZE-1);
			//set ID
			CANIDT4 = tx_frames[pos].array[0];
     e30:	8f 70       	andi	r24, 0x0F	; 15
     e32:	2b e0       	ldi	r18, 0x0B	; 11
     e34:	82 9f       	mul	r24, r18
     e36:	c0 01       	movw	r24, r0
     e38:	11 24       	eor	r1, r1
     e3a:	fc 01       	movw	r30, r24
     e3c:	eb 50       	subi	r30, 0x0B	; 11
     e3e:	fe 4f       	sbci	r31, 0xFE	; 254
     e40:	20 81       	ld	r18, Z
     e42:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			CANIDT2 = tx_frames[pos].array[0];
     e46:	20 81       	ld	r18, Z
     e48:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			CANIDT1 = tx_frames[pos].array[1];
     e4c:	21 81       	ldd	r18, Z+1	; 0x01
     e4e:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

			//program data registers - auto increment CANMSG
			CANMSG = tx_frames[pos].data[0];
     e52:	23 81       	ldd	r18, Z+3	; 0x03
     e54:	aa ef       	ldi	r26, 0xFA	; 250
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[1];
     e5a:	24 81       	ldd	r18, Z+4	; 0x04
     e5c:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[2];
     e5e:	25 81       	ldd	r18, Z+5	; 0x05
     e60:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[3];
     e62:	26 81       	ldd	r18, Z+6	; 0x06
     e64:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[4];
     e66:	27 81       	ldd	r18, Z+7	; 0x07
     e68:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[5];
     e6a:	20 85       	ldd	r18, Z+8	; 0x08
     e6c:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[6];
     e6e:	21 85       	ldd	r18, Z+9	; 0x09
     e70:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[7];
     e72:	22 85       	ldd	r18, Z+10	; 0x0a
     e74:	2c 93       	st	X, r18

			//set length and request send
			CANCDMOB = (1 << CONMOB0) | tx_frames[pos].length;
     e76:	fc 01       	movw	r30, r24
     e78:	e9 50       	subi	r30, 0x09	; 9
     e7a:	fe 4f       	sbci	r31, 0xFE	; 254
     e7c:	80 81       	ld	r24, Z
     e7e:	8f 70       	andi	r24, 0x0F	; 15
     e80:	80 64       	ori	r24, 0x40	; 64
     e82:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
			tx_off++;
     e86:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <tx_off>
     e8a:	8f 5f       	subi	r24, 0xFF	; 255
     e8c:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <tx_off>
     e90:	7d c0       	rjmp	.+250    	; 0xf8c <__vector_18+0x1b8>
		} else {
			tx_busy = 0;
     e92:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <tx_busy>
     e96:	7a c0       	rjmp	.+244    	; 0xf8c <__vector_18+0x1b8>
		}
	}
	// RX
	else if ((mob_interrupts & (1 << SIT1)) && (CANIE2 & (1 << ENMOB1))) {
     e98:	81 ff       	sbrs	r24, 1
     e9a:	78 c0       	rjmp	.+240    	; 0xf8c <__vector_18+0x1b8>
     e9c:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     ea0:	81 ff       	sbrs	r24, 1
     ea2:	74 c0       	rjmp	.+232    	; 0xf8c <__vector_18+0x1b8>
		//Select RX Mob (Mob1)
		CANPAGE = (0x1 << MOBNB0);
     ea4:	80 e1       	ldi	r24, 0x10	; 16
     ea6:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		if (((rx_on - rx_off) & RX_ABS_MASK) < RX_SIZE) {
     eaa:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <rx_on>
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <rx_off>
     eb6:	29 1b       	sub	r18, r25
     eb8:	31 09       	sbc	r19, r1
     eba:	2f 77       	andi	r18, 0x7F	; 127
     ebc:	33 27       	eor	r19, r19
     ebe:	20 31       	cpi	r18, 0x10	; 16
     ec0:	31 05       	cpc	r19, r1
     ec2:	0c f0       	brlt	.+2      	; 0xec6 <__vector_18+0xf2>
     ec4:	58 c0       	rjmp	.+176    	; 0xf76 <__vector_18+0x1a2>
			unsigned char pos;
			pos = rx_on & (RX_SIZE-1);
			//Read length
			rx_frames[pos].length = CANCDMOB & 0x0F;
     ec6:	e8 2f       	mov	r30, r24
     ec8:	ef 70       	andi	r30, 0x0F	; 15
     eca:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     ece:	2e 2f       	mov	r18, r30
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	4b e0       	ldi	r20, 0x0B	; 11
     ed4:	e4 9f       	mul	r30, r20
     ed6:	f0 01       	movw	r30, r0
     ed8:	11 24       	eor	r1, r1
     eda:	eb 5b       	subi	r30, 0xBB	; 187
     edc:	fe 4f       	sbci	r31, 0xFE	; 254
     ede:	9f 70       	andi	r25, 0x0F	; 15
     ee0:	42 81       	ldd	r20, Z+2	; 0x02
     ee2:	40 7f       	andi	r20, 0xF0	; 240
     ee4:	94 2b       	or	r25, r20
     ee6:	92 83       	std	Z+2, r25	; 0x02
			//Read ID
			rx_frames[pos].array[0] = (CANIDT2 & 0xE0) | (CANIDT4 & 0x07);
     ee8:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     eec:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     ef0:	40 7e       	andi	r20, 0xE0	; 224
     ef2:	97 70       	andi	r25, 0x07	; 7
     ef4:	94 2b       	or	r25, r20
     ef6:	90 83       	st	Z, r25
			rx_frames[pos].array[1] = CANIDT1;
     ef8:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     efc:	91 83       	std	Z+1, r25	; 0x01

			//read data registers - auto increment CANMSG
			rx_frames[pos].data[0] = CANMSG;
     efe:	aa ef       	ldi	r26, 0xFA	; 250
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	9c 91       	ld	r25, X
     f04:	93 83       	std	Z+3, r25	; 0x03
			rx_frames[pos].data[1] = CANMSG;
     f06:	9c 91       	ld	r25, X
     f08:	94 83       	std	Z+4, r25	; 0x04
			rx_frames[pos].data[2] = CANMSG;
     f0a:	9c 91       	ld	r25, X
     f0c:	95 83       	std	Z+5, r25	; 0x05
			rx_frames[pos].data[3] = CANMSG;
     f0e:	9c 91       	ld	r25, X
     f10:	96 83       	std	Z+6, r25	; 0x06
			rx_frames[pos].data[4] = CANMSG;
     f12:	9c 91       	ld	r25, X
     f14:	97 83       	std	Z+7, r25	; 0x07
			rx_frames[pos].data[5] = CANMSG;
     f16:	9c 91       	ld	r25, X
     f18:	90 87       	std	Z+8, r25	; 0x08
			rx_frames[pos].data[6] = CANMSG;
     f1a:	9c 91       	ld	r25, X
     f1c:	91 87       	std	Z+9, r25	; 0x09
			rx_frames[pos].data[7] = CANMSG;
     f1e:	9c 91       	ld	r25, X
     f20:	92 87       	std	Z+10, r25	; 0x0a
			rx_on++;
     f22:	8f 5f       	subi	r24, 0xFF	; 255
     f24:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <rx_on>

			// Reset if reset can message
			if(rx_frames[pos].id == 0x000 && rx_frames[pos].data[0] == 0x03){
     f28:	40 81       	ld	r20, Z
     f2a:	42 95       	swap	r20
     f2c:	46 95       	lsr	r20
     f2e:	47 70       	andi	r20, 0x07	; 7
     f30:	51 81       	ldd	r21, Z+1	; 0x01
     f32:	65 2f       	mov	r22, r21
     f34:	66 0f       	add	r22, r22
     f36:	66 0f       	add	r22, r22
     f38:	66 0f       	add	r22, r22
     f3a:	86 2f       	mov	r24, r22
     f3c:	84 2b       	or	r24, r20
     f3e:	95 2f       	mov	r25, r21
     f40:	92 95       	swap	r25
     f42:	96 95       	lsr	r25
     f44:	97 70       	andi	r25, 0x07	; 7
     f46:	89 2b       	or	r24, r25
     f48:	b1 f4       	brne	.+44     	; 0xf76 <__vector_18+0x1a2>
     f4a:	8b e0       	ldi	r24, 0x0B	; 11
     f4c:	82 9f       	mul	r24, r18
     f4e:	f0 01       	movw	r30, r0
     f50:	83 9f       	mul	r24, r19
     f52:	f0 0d       	add	r31, r0
     f54:	11 24       	eor	r1, r1
     f56:	eb 5b       	subi	r30, 0xBB	; 187
     f58:	fe 4f       	sbci	r31, 0xFE	; 254
     f5a:	83 81       	ldd	r24, Z+3	; 0x03
     f5c:	83 30       	cpi	r24, 0x03	; 3
     f5e:	59 f4       	brne	.+22     	; 0xf76 <__vector_18+0x1a2>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     f60:	98 e0       	ldi	r25, 0x08	; 8
     f62:	88 e1       	ldi	r24, 0x18	; 24
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	a8 95       	wdr
     f6a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     f74:	ff cf       	rjmp	.-2      	; 0xf74 <__vector_18+0x1a0>
				while(1); //wait for watchdog
			}
		}

		// Clear irq
		mob_status = CANSTMOB;
     f76:	ee ee       	ldi	r30, 0xEE	; 238
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	89 83       	std	Y+1, r24	; 0x01
		(void)mob_status;
     f7e:	89 81       	ldd	r24, Y+1	; 0x01

		CANSTMOB &= ~(1 << RXOK);
     f80:	80 81       	ld	r24, Z
     f82:	8f 7d       	andi	r24, 0xDF	; 223
     f84:	80 83       	st	Z, r24
		CANCDMOB = (1 << CONMOB1);			//Set Mob 1 as RX
     f86:	80 e8       	ldi	r24, 0x80	; 128
     f88:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	}
}
     f8c:	0f 90       	pop	r0
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	ff 91       	pop	r31
     f94:	ef 91       	pop	r30
     f96:	bf 91       	pop	r27
     f98:	af 91       	pop	r26
     f9a:	9f 91       	pop	r25
     f9c:	8f 91       	pop	r24
     f9e:	6f 91       	pop	r22
     fa0:	5f 91       	pop	r21
     fa2:	4f 91       	pop	r20
     fa4:	3f 91       	pop	r19
     fa6:	2f 91       	pop	r18
     fa8:	0f 90       	pop	r0
     faa:	0b be       	out	0x3b, r0	; 59
     fac:	0f 90       	pop	r0
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	0f 90       	pop	r0
     fb2:	1f 90       	pop	r1
     fb4:	18 95       	reti

00000fb6 <can_init>:


void can_init(uint16_t accept_mask_id, uint16_t accept_tag_id) {
     fb6:	cf 93       	push	r28
     fb8:	df 93       	push	r29
	// Reset CAN controller
	CANGCON = (1 << SWRES);
     fba:	e8 ed       	ldi	r30, 0xD8	; 216
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	21 e0       	ldi	r18, 0x01	; 1
     fc0:	20 83       	st	Z, r18

	CANBT1 = (BRP_VALUE - 1) << 1;
     fc2:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = ((SJW_VALUE - 1) << 5) | ((PROP_SEG - 1) << 1);
     fc6:	2c e0       	ldi	r18, 0x0C	; 12
     fc8:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = ((PHASE_SEG_2 - 1) << 4) | ((PHASE_SEG_1 - 1) << 1) | 1;
     fcc:	27 e3       	ldi	r18, 0x37	; 55
     fce:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	CANTIM = 0;
     fd2:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
     fd6:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	CANTTC = 0;
     fda:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     fde:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	CANHPMOB = 0;
     fe2:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	CANTCON = 0;
     fe6:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	// Switch to Mob 0 access
	CANPAGE = (0x0 << MOBNB0);
     fea:	cd ee       	ldi	r28, 0xED	; 237
     fec:	d0 e0       	ldi	r29, 0x00	; 0
     fee:	18 82       	st	Y, r1
	CANSTMOB = 0;
     ff0:	ae ee       	ldi	r26, 0xEE	; 238
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	1c 92       	st	X, r1

	// Switch to Mob 1 access
	CANPAGE = (0x1 << MOBNB0);
     ff6:	20 e1       	ldi	r18, 0x10	; 16
     ff8:	28 83       	st	Y, r18
	CANSTMOB = 0;
     ffa:	1c 92       	st	X, r1
	CANIDM4 = 0;
     ffc:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANIDM2 = (accept_mask_id << 5) & 0xFF;
    1000:	28 2f       	mov	r18, r24
    1002:	22 95       	swap	r18
    1004:	22 0f       	add	r18, r18
    1006:	20 7e       	andi	r18, 0xE0	; 224
    1008:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = (accept_mask_id >> 3) & 0xFF;
    100c:	96 95       	lsr	r25
    100e:	87 95       	ror	r24
    1010:	96 95       	lsr	r25
    1012:	87 95       	ror	r24
    1014:	96 95       	lsr	r25
    1016:	87 95       	ror	r24
    1018:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDT4 = 0;
    101c:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT2 = (accept_tag_id << 5) & 0xFF;
    1020:	86 2f       	mov	r24, r22
    1022:	82 95       	swap	r24
    1024:	88 0f       	add	r24, r24
    1026:	80 7e       	andi	r24, 0xE0	; 224
    1028:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (accept_tag_id >> 3) & 0xFF;
    102c:	76 95       	lsr	r23
    102e:	67 95       	ror	r22
    1030:	76 95       	lsr	r23
    1032:	67 95       	ror	r22
    1034:	76 95       	lsr	r23
    1036:	67 95       	ror	r22
    1038:	60 93 f3 00 	sts	0x00F3, r22	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

	// Set Mob 1 as RX
	CANCDMOB = (1 << CONMOB1);
    103c:	80 e8       	ldi	r24, 0x80	; 128
    103e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	// Enable Mob 0 and 1
	CANEN2 = (1 << ENMOB1) | (1 << ENMOB0);
    1042:	83 e0       	ldi	r24, 0x03	; 3
    1044:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	// Enable Mob 0 and 1 Interrupt
	CANIE2 = (1 << ENMOB1) | (1 << ENMOB0);
    1048:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	// Enable TX and RX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);	
    104c:	80 eb       	ldi	r24, 0xB0	; 176
    104e:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>

	// Enable CAN controller
	CANGCON = (1 << ENASTB);
    1052:	82 e0       	ldi	r24, 0x02	; 2
    1054:	80 83       	st	Z, r24

	reset = 0;
    1056:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <reset>
}
    105a:	df 91       	pop	r29
    105c:	cf 91       	pop	r28
    105e:	08 95       	ret

00001060 <can_read_message_if_new>:

bool can_read_message_if_new(CanMessage_t* message) {
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	ec 01       	movw	r28, r24
	// Check if there is a new message
	if (rx_on == rx_off) {
    1066:	40 91 41 01 	lds	r20, 0x0141	; 0x800141 <rx_off>
    106a:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <rx_on>
    106e:	24 17       	cp	r18, r20
    1070:	89 f1       	breq	.+98     	; 0x10d4 <can_read_message_if_new+0x74>
    1072:	a4 2f       	mov	r26, r20
    1074:	af 70       	andi	r26, 0x0F	; 15
	}

	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
    1076:	8b e0       	ldi	r24, 0x0B	; 11
    1078:	a8 9f       	mul	r26, r24
    107a:	b0 01       	movw	r22, r0
    107c:	11 24       	eor	r1, r1
    107e:	fb 01       	movw	r30, r22
    1080:	eb 5b       	subi	r30, 0xBB	; 187
    1082:	fe 4f       	sbci	r31, 0xFE	; 254
    1084:	20 81       	ld	r18, Z
    1086:	22 95       	swap	r18
    1088:	26 95       	lsr	r18
    108a:	27 70       	andi	r18, 0x07	; 7
    108c:	31 81       	ldd	r19, Z+1	; 0x01
    108e:	53 2f       	mov	r21, r19
    1090:	55 0f       	add	r21, r21
    1092:	55 0f       	add	r21, r21
    1094:	55 0f       	add	r21, r21
    1096:	25 2b       	or	r18, r21
    1098:	32 95       	swap	r19
    109a:	36 95       	lsr	r19
    109c:	37 70       	andi	r19, 0x07	; 7
    109e:	28 83       	st	Y, r18
    10a0:	39 83       	std	Y+1, r19	; 0x01
	message->length = frame->length;
    10a2:	fb 01       	movw	r30, r22
    10a4:	e9 5b       	subi	r30, 0xB9	; 185
    10a6:	fe 4f       	sbci	r31, 0xFE	; 254
    10a8:	20 81       	ld	r18, Z
    10aa:	2f 70       	andi	r18, 0x0F	; 15
    10ac:	2a 83       	std	Y+2, r18	; 0x02
	for (int i = 0; i < message->length; i++) {
    10ae:	22 23       	and	r18, r18
    10b0:	99 f0       	breq	.+38     	; 0x10d8 <can_read_message_if_new+0x78>
    10b2:	db 01       	movw	r26, r22
    10b4:	a8 5b       	subi	r26, 0xB8	; 184
    10b6:	be 4f       	sbci	r27, 0xFE	; 254
    10b8:	fe 01       	movw	r30, r28
    10ba:	33 96       	adiw	r30, 0x03	; 3
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	2d 5f       	subi	r18, 0xFD	; 253
    10c0:	3f 4f       	sbci	r19, 0xFF	; 255
    10c2:	ce 01       	movw	r24, r28
    10c4:	82 0f       	add	r24, r18
    10c6:	93 1f       	adc	r25, r19
		message->data.u8[i] = frame->data[i];
    10c8:	2d 91       	ld	r18, X+
    10ca:	21 93       	st	Z+, r18
	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
	message->length = frame->length;
	for (int i = 0; i < message->length; i++) {
    10cc:	e8 17       	cp	r30, r24
    10ce:	f9 07       	cpc	r31, r25
    10d0:	d9 f7       	brne	.-10     	; 0x10c8 <can_read_message_if_new+0x68>
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <can_read_message_if_new+0x78>
}

bool can_read_message_if_new(CanMessage_t* message) {
	// Check if there is a new message
	if (rx_on == rx_off) {
		return false;
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	04 c0       	rjmp	.+8      	; 0x10e0 <can_read_message_if_new+0x80>
		message->data.u8[i] = frame->data[i];
	}

	// Advance to next can message
	if (rx_on != rx_off) {
		rx_off++;
    10d8:	4f 5f       	subi	r20, 0xFF	; 255
    10da:	40 93 41 01 	sts	0x0141, r20	; 0x800141 <rx_off>
	}

	return true;
    10de:	81 e0       	ldi	r24, 0x01	; 1
}
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	08 95       	ret

000010e6 <can_send_message>:

bool can_send_message(CanMessage_t* message) {
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
    10ea:	fc 01       	movw	r30, r24
	bool result = false;

	CANGIE &= ~(1 << ENIT);
    10ec:	ab ed       	ldi	r26, 0xDB	; 219
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	8c 91       	ld	r24, X
    10f2:	8f 77       	andi	r24, 0x7F	; 127
    10f4:	8c 93       	st	X, r24

	if (!tx_busy) {
    10f6:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <tx_busy>
    10fa:	81 11       	cpse	r24, r1
    10fc:	27 c0       	rjmp	.+78     	; 0x114c <__stack+0x4d>
		// Switch to Mob 0 access
		CANPAGE = 0 << 4;
    10fe:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		// Set ID
		CANIDT2 = message->id << 5;
    1102:	80 81       	ld	r24, Z
    1104:	82 95       	swap	r24
    1106:	88 0f       	add	r24, r24
    1108:	80 7e       	andi	r24, 0xE0	; 224
    110a:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT1 = message->id >> 3;
    110e:	80 81       	ld	r24, Z
    1110:	91 81       	ldd	r25, Z+1	; 0x01
    1112:	96 95       	lsr	r25
    1114:	87 95       	ror	r24
    1116:	96 95       	lsr	r25
    1118:	87 95       	ror	r24
    111a:	96 95       	lsr	r25
    111c:	87 95       	ror	r24
    111e:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1122:	df 01       	movw	r26, r30
    1124:	13 96       	adiw	r26, 0x03	; 3
    1126:	9f 01       	movw	r18, r30
    1128:	25 5f       	subi	r18, 0xF5	; 245
    112a:	3f 4f       	sbci	r19, 0xFF	; 255

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
    112c:	ca ef       	ldi	r28, 0xFA	; 250
    112e:	d0 e0       	ldi	r29, 0x00	; 0
    1130:	9d 91       	ld	r25, X+
    1132:	98 83       	st	Y, r25
		// Set ID
		CANIDT2 = message->id << 5;
		CANIDT1 = message->id >> 3;

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
    1134:	a2 17       	cp	r26, r18
    1136:	b3 07       	cpc	r27, r19
    1138:	d9 f7       	brne	.-10     	; 0x1130 <__stack+0x31>
			CANMSG = message->data.u8[i];
		}
		
		result = true;
		tx_busy = 1;
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <tx_busy>

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
    1140:	82 81       	ldd	r24, Z+2	; 0x02
    1142:	80 64       	ori	r24, 0x40	; 64
    1144:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
		}
		
		result = true;
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	43 c0       	rjmp	.+134    	; 0x11d2 <__stack+0xd3>
		tx_busy = 1;

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
	}
	else if (TX_SIZE - ((tx_on - tx_off) & TX_ABS_MASK)) {
    114c:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <tx_on>
    1150:	82 2f       	mov	r24, r18
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	30 91 44 01 	lds	r19, 0x0144	; 0x800144 <tx_off>
    1158:	83 1b       	sub	r24, r19
    115a:	91 09       	sbc	r25, r1
    115c:	8f 77       	andi	r24, 0x7F	; 127
    115e:	99 27       	eor	r25, r25
    1160:	40 97       	sbiw	r24, 0x10	; 16
    1162:	b1 f1       	breq	.+108    	; 0x11d0 <__stack+0xd1>
		// Copy data into TX buffer
		tx_frames[tx_on & (TX_SIZE-1)].id = message->id;
    1164:	a2 2f       	mov	r26, r18
    1166:	af 70       	andi	r26, 0x0F	; 15
    1168:	8b e0       	ldi	r24, 0x0B	; 11
    116a:	a8 9f       	mul	r26, r24
    116c:	d0 01       	movw	r26, r0
    116e:	11 24       	eor	r1, r1
    1170:	ed 01       	movw	r28, r26
    1172:	cb 50       	subi	r28, 0x0B	; 11
    1174:	de 4f       	sbci	r29, 0xFE	; 254
    1176:	80 81       	ld	r24, Z
    1178:	98 2f       	mov	r25, r24
    117a:	92 95       	swap	r25
    117c:	99 0f       	add	r25, r25
    117e:	90 7e       	andi	r25, 0xE0	; 224
    1180:	88 81       	ld	r24, Y
    1182:	8f 71       	andi	r24, 0x1F	; 31
    1184:	89 2b       	or	r24, r25
    1186:	88 83       	st	Y, r24
    1188:	80 81       	ld	r24, Z
    118a:	98 2f       	mov	r25, r24
    118c:	96 95       	lsr	r25
    118e:	96 95       	lsr	r25
    1190:	96 95       	lsr	r25
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	80 7e       	andi	r24, 0xE0	; 224
    1196:	89 2b       	or	r24, r25
    1198:	89 83       	std	Y+1, r24	; 0x01
    119a:	91 81       	ldd	r25, Z+1	; 0x01
    119c:	92 95       	swap	r25
    119e:	99 0f       	add	r25, r25
    11a0:	90 7e       	andi	r25, 0xE0	; 224
    11a2:	8f 71       	andi	r24, 0x1F	; 31
    11a4:	89 2b       	or	r24, r25
    11a6:	89 83       	std	Y+1, r24	; 0x01
		tx_frames[tx_on & (TX_SIZE-1)].length = message->length;
    11a8:	82 81       	ldd	r24, Z+2	; 0x02
    11aa:	98 2f       	mov	r25, r24
    11ac:	9f 70       	andi	r25, 0x0F	; 15
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	80 7f       	andi	r24, 0xF0	; 240
    11b2:	89 2b       	or	r24, r25
    11b4:	8a 83       	std	Y+2, r24	; 0x02
		memcpy(tx_frames[tx_on & (TX_SIZE-1)].data, &message->data, CAN_FRAME_DATA_MAX_LENGTH);
    11b6:	a8 50       	subi	r26, 0x08	; 8
    11b8:	be 4f       	sbci	r27, 0xFE	; 254
    11ba:	33 96       	adiw	r30, 0x03	; 3
    11bc:	88 e0       	ldi	r24, 0x08	; 8
    11be:	01 90       	ld	r0, Z+
    11c0:	0d 92       	st	X+, r0
    11c2:	8a 95       	dec	r24
    11c4:	e1 f7       	brne	.-8      	; 0x11be <__stack+0xbf>

		/*for (int i = 0; i < 8; i++) {
			tx_frames[tx_on & (TX_SIZE-1)].data[i] = message->data.u8[i];
		}*/

		tx_on++;
    11c6:	2f 5f       	subi	r18, 0xFF	; 255
    11c8:	20 93 43 01 	sts	0x0143, r18	; 0x800143 <tx_on>
		result = true;
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	01 c0       	rjmp	.+2      	; 0x11d2 <__stack+0xd3>

	return true;
}

bool can_send_message(CanMessage_t* message) {
	bool result = false;
    11d0:	80 e0       	ldi	r24, 0x00	; 0

		tx_on++;
		result = true;
	}

	CANGIE |= (1 << ENIT);
    11d2:	eb ed       	ldi	r30, 0xDB	; 219
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	90 81       	ld	r25, Z
    11d8:	90 68       	ori	r25, 0x80	; 128
    11da:	90 83       	st	Z, r25

	return result;
    11dc:	df 91       	pop	r29
    11de:	cf 91       	pop	r28
    11e0:	08 95       	ret

000011e2 <pwm_init>:
#include "pwm.h"

#include <avr/interrupt.h>
#include <avr/io.h>

void pwm_init(void){
    11e2:	0f 93       	push	r16
    11e4:	1f 93       	push	r17
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
	
	//Set pwm_pins as output;
	PORTE &= ~((1<<PE3)|(1<<PE4)|(1<<PE5));
    11ea:	8e b1       	in	r24, 0x0e	; 14
    11ec:	87 7c       	andi	r24, 0xC7	; 199
    11ee:	8e b9       	out	0x0e, r24	; 14
	DDRE |= (1<<PE3)|(1<<PE4)|(1<<PE5);
    11f0:	8d b1       	in	r24, 0x0d	; 13
    11f2:	88 63       	ori	r24, 0x38	; 56
    11f4:	8d b9       	out	0x0d, r24	; 13
	
	PORTB &= ~(1<<PB4);
    11f6:	2c 98       	cbi	0x05, 4	; 5
	DDRB |= (1<<PB4);
    11f8:	24 9a       	sbi	0x04, 4	; 4
	
	//Timer 3 fast pwm, mode 14, TOP at ICR
	TCCR3B |= (1<<WGM33)|(1<<WGM32);
    11fa:	a1 e9       	ldi	r26, 0x91	; 145
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	8c 91       	ld	r24, X
    1200:	88 61       	ori	r24, 0x18	; 24
    1202:	8c 93       	st	X, r24
	TCCR3A |= (1<<WGM31);
    1204:	e0 e9       	ldi	r30, 0x90	; 144
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	82 60       	ori	r24, 0x02	; 2
    120c:	80 83       	st	Z, r24
	TCCR3A &= ~(1<<WGM30);
    120e:	80 81       	ld	r24, Z
    1210:	8e 7f       	andi	r24, 0xFE	; 254
    1212:	80 83       	st	Z, r24
	
	//Timer 2 fast pwm, mode 3, Top at 0xFF
	TCCR2A |= (1<<WGM21)|(1<<WGM20);
    1214:	c0 eb       	ldi	r28, 0xB0	; 176
    1216:	d0 e0       	ldi	r29, 0x00	; 0
    1218:	88 81       	ld	r24, Y
    121a:	88 64       	ori	r24, 0x48	; 72
    121c:	88 83       	st	Y, r24

	// Non inverted PWM for A
	TCCR3A |= (1<<COM3A1);
    121e:	80 81       	ld	r24, Z
    1220:	80 68       	ori	r24, 0x80	; 128
    1222:	80 83       	st	Z, r24
	TCCR3A &= ~(1<<COM3A0);
    1224:	80 81       	ld	r24, Z
    1226:	8f 7b       	andi	r24, 0xBF	; 191
    1228:	80 83       	st	Z, r24
	
	// Inverted PWM for B
	TCCR3A |= (1<<COM3B1);
    122a:	80 81       	ld	r24, Z
    122c:	80 62       	ori	r24, 0x20	; 32
    122e:	80 83       	st	Z, r24
	TCCR3A |= (1<<COM3B0);
    1230:	80 81       	ld	r24, Z
    1232:	80 61       	ori	r24, 0x10	; 16
    1234:	80 83       	st	Z, r24
	
	TCCR2A |= (1<<COM2A1);
    1236:	88 81       	ld	r24, Y
    1238:	80 62       	ori	r24, 0x20	; 32
    123a:	88 83       	st	Y, r24
	TCCR2A &=  ~((1<<COM2A0));
    123c:	88 81       	ld	r24, Y
    123e:	8f 7e       	andi	r24, 0xEF	; 239
    1240:	88 83       	st	Y, r24
	
	//Set prescale clk/1 for timer 3
	
	TCCR3B |= (1<<CS30);
    1242:	8c 91       	ld	r24, X
    1244:	81 60       	ori	r24, 0x01	; 1
    1246:	8c 93       	st	X, r24
	TCCR3B &= ~((1<<CS32)|(1<<CS31));
    1248:	8c 91       	ld	r24, X
    124a:	89 7f       	andi	r24, 0xF9	; 249
    124c:	8c 93       	st	X, r24
	
	//Set top value for timer 3
	ICR3 = 0x199; //20kHz
    124e:	e6 e9       	ldi	r30, 0x96	; 150
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	89 e9       	ldi	r24, 0x99	; 153
    1254:	91 e0       	ldi	r25, 0x01	; 1
    1256:	91 83       	std	Z+1, r25	; 0x01
    1258:	80 83       	st	Z, r24
	
	//Set off 
	OCR3A = 0;
    125a:	c8 e9       	ldi	r28, 0x98	; 152
    125c:	d0 e0       	ldi	r29, 0x00	; 0
    125e:	19 82       	std	Y+1, r1	; 0x01
    1260:	18 82       	st	Y, r1
	OCR3B = 0;
    1262:	0a e9       	ldi	r16, 0x9A	; 154
    1264:	10 e0       	ldi	r17, 0x00	; 0
    1266:	d8 01       	movw	r26, r16
    1268:	11 96       	adiw	r26, 0x01	; 1
    126a:	1c 92       	st	X, r1
    126c:	1e 92       	st	-X, r1
	OCR3C = 0;
    126e:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
    1272:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	OCR2A = 0;	
    1276:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	
	OCR3A = (int)((0.5)*ICR3) ; //PWM_PE3 (non inverted)
    127a:	60 81       	ld	r22, Z
    127c:	71 81       	ldd	r23, Z+1	; 0x01
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	94 d1       	rcall	.+808    	; 0x15ac <__floatunsisf>
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	40 e0       	ldi	r20, 0x00	; 0
    128a:	5f e3       	ldi	r21, 0x3F	; 63
    128c:	45 d2       	rcall	.+1162   	; 0x1718 <__mulsf3>
    128e:	5d d1       	rcall	.+698    	; 0x154a <__fixsfsi>
    1290:	79 83       	std	Y+1, r23	; 0x01
    1292:	68 83       	st	Y, r22
	OCR3B = OCR3A ; //PWM_PE4 (inverted)
    1294:	88 81       	ld	r24, Y
    1296:	99 81       	ldd	r25, Y+1	; 0x01
    1298:	f8 01       	movw	r30, r16
    129a:	91 83       	std	Z+1, r25	; 0x01
    129c:	80 83       	st	Z, r24
}
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	1f 91       	pop	r17
    12a4:	0f 91       	pop	r16
    12a6:	08 95       	ret

000012a8 <rgbled_turn_off>:
	DDRB |= LED_ALL;
	rgbled_turn_off(LED_ALL);
}

void rgbled_turn_off(RgbLedColor_t color) {
	PORTB |= color;
    12a8:	95 b1       	in	r25, 0x05	; 5
    12aa:	89 2b       	or	r24, r25
    12ac:	85 b9       	out	0x05, r24	; 5
    12ae:	08 95       	ret

000012b0 <rgbled_init>:
#include "rgbled.h"
#include <avr/io.h>


void rgbled_init() {
	DDRB |= LED_ALL;
    12b0:	84 b1       	in	r24, 0x04	; 4
    12b2:	80 6e       	ori	r24, 0xE0	; 224
    12b4:	84 b9       	out	0x04, r24	; 4
	rgbled_turn_off(LED_ALL);
    12b6:	80 ee       	ldi	r24, 0xE0	; 224
    12b8:	f7 cf       	rjmp	.-18     	; 0x12a8 <rgbled_turn_off>
    12ba:	08 95       	ret

000012bc <rgbled_turn_on>:
void rgbled_turn_off(RgbLedColor_t color) {
	PORTB |= color;
}

void rgbled_turn_on(RgbLedColor_t color) {
	PORTB &= ~color;
    12bc:	95 b1       	in	r25, 0x05	; 5
    12be:	80 95       	com	r24
    12c0:	98 23       	and	r25, r24
    12c2:	95 b9       	out	0x05, r25	; 5
    12c4:	08 95       	ret

000012c6 <spi_init>:
#define PIN_SCK PB1
#define PIN_SS PB0

void spi_init(spi_prescale_t clock_prescale) {
	// Set MOSI, SS, and SCK output, all others input
	DDR_SPI |= (1 << PIN_MOSI) | (1 << PIN_SCK) | (1 << PIN_SS);
    12c6:	94 b1       	in	r25, 0x04	; 4
    12c8:	97 60       	ori	r25, 0x07	; 7
    12ca:	94 b9       	out	0x04, r25	; 4
	
	uint8_t SPI2X_val = (uint8_t)((clock_prescale >> 2) & 0b001);
    12cc:	82 fb       	bst	r24, 2
    12ce:	99 27       	eor	r25, r25
    12d0:	90 f9       	bld	r25, 0
	SPCR = (1 << SPE) | (1 << MSTR) | (SPR1_val << SPR1) | (SPR0_val << SPR0) | (1 << CPOL) | (1 << CPHA);
	SPSR = (SPI2X_val << SPI2X);
*/

	// Enable SPI, Master, selected prescaling, mode 0 (CPOL = CPHA = 0)
	SPCR = (1 << SPE) | (1 << MSTR) | (SPR1_val << SPR1) | (SPR0_val << SPR0);
    12d2:	28 2f       	mov	r18, r24
    12d4:	22 70       	andi	r18, 0x02	; 2
    12d6:	81 70       	andi	r24, 0x01	; 1
    12d8:	80 65       	ori	r24, 0x50	; 80
    12da:	82 2b       	or	r24, r18
    12dc:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~((1 << CPOL) | (1 << CPHA));
    12de:	8c b5       	in	r24, 0x2c	; 44
    12e0:	83 7f       	andi	r24, 0xF3	; 243
    12e2:	8c bd       	out	0x2c, r24	; 44
	SPSR = (SPI2X_val << SPI2X);
    12e4:	9d bd       	out	0x2d, r25	; 45
    12e6:	08 95       	ret

000012e8 <spi_trancieve>:

}

void spi_trancieve(uint8_t* tx_buffer, uint8_t* rx_buffer, size_t length, bool last_in_transmission) {
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
    12ec:	ec 01       	movw	r28, r24
	PORTB &= ~(1 << PIN_SS);
    12ee:	28 98       	cbi	0x05, 0	; 5

	for (size_t i = 0; i < length; i++) {
    12f0:	41 15       	cp	r20, r1
    12f2:	51 05       	cpc	r21, r1
    12f4:	c1 f0       	breq	.+48     	; 0x1326 <spi_trancieve+0x3e>
    12f6:	fb 01       	movw	r30, r22
    12f8:	dc 01       	movw	r26, r24
    12fa:	46 0f       	add	r20, r22
    12fc:	57 1f       	adc	r21, r23
		SPDR = (tx_buffer != NULL) ? tx_buffer[i] : 0xFF;
    12fe:	8f ef       	ldi	r24, 0xFF	; 255
    1300:	20 97       	sbiw	r28, 0x00	; 0
    1302:	11 f0       	breq	.+4      	; 0x1308 <spi_trancieve+0x20>
    1304:	9c 91       	ld	r25, X
    1306:	01 c0       	rjmp	.+2      	; 0x130a <spi_trancieve+0x22>
    1308:	98 2f       	mov	r25, r24
    130a:	9e bd       	out	0x2e, r25	; 46

		while(!(SPSR & (1 << SPIF)));
    130c:	0d b4       	in	r0, 0x2d	; 45
    130e:	07 fe       	sbrs	r0, 7
    1310:	fd cf       	rjmp	.-6      	; 0x130c <spi_trancieve+0x24>
		
		if (rx_buffer != NULL) rx_buffer[i] = SPDR;
    1312:	61 15       	cp	r22, r1
    1314:	71 05       	cpc	r23, r1
    1316:	11 f0       	breq	.+4      	; 0x131c <spi_trancieve+0x34>
    1318:	9e b5       	in	r25, 0x2e	; 46
    131a:	90 83       	st	Z, r25
    131c:	31 96       	adiw	r30, 0x01	; 1
    131e:	11 96       	adiw	r26, 0x01	; 1
}

void spi_trancieve(uint8_t* tx_buffer, uint8_t* rx_buffer, size_t length, bool last_in_transmission) {
	PORTB &= ~(1 << PIN_SS);

	for (size_t i = 0; i < length; i++) {
    1320:	e4 17       	cp	r30, r20
    1322:	f5 07       	cpc	r31, r21
    1324:	69 f7       	brne	.-38     	; 0x1300 <spi_trancieve+0x18>
		while(!(SPSR & (1 << SPIF)));
		
		if (rx_buffer != NULL) rx_buffer[i] = SPDR;
	}

	if (last_in_transmission) {
    1326:	21 11       	cpse	r18, r1
		PORTB |= (1 << PIN_SS);
    1328:	28 9a       	sbi	0x05, 0	; 5
	}
}
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	08 95       	ret

00001330 <__vector_17>:

uint16_t timer_elapsed_ms(timer_t timer) {
	return elapsed_microseconds[timer] / 1000;
}

ISR(TIMER0_OVF_vect) {
    1330:	1f 92       	push	r1
    1332:	0f 92       	push	r0
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	0f 92       	push	r0
    1338:	11 24       	eor	r1, r1
    133a:	0b b6       	in	r0, 0x3b	; 59
    133c:	0f 92       	push	r0
    133e:	2f 93       	push	r18
    1340:	3f 93       	push	r19
    1342:	4f 93       	push	r20
    1344:	5f 93       	push	r21
    1346:	6f 93       	push	r22
    1348:	7f 93       	push	r23
    134a:	8f 93       	push	r24
    134c:	af 93       	push	r26
    134e:	bf 93       	push	r27
    1350:	ef 93       	push	r30
    1352:	ff 93       	push	r31
    1354:	a5 ec       	ldi	r26, 0xC5	; 197
    1356:	b2 e0       	ldi	r27, 0x02	; 2
    1358:	e5 ea       	ldi	r30, 0xA5	; 165
    135a:	f2 e0       	ldi	r31, 0x02	; 2
    135c:	25 ec       	ldi	r18, 0xC5	; 197
    135e:	32 e0       	ldi	r19, 0x02	; 2
	for (int t = 0; t < NUMBER_OF_TIMERS; t++) {
		if (timer_enabled[t]){
    1360:	8d 91       	ld	r24, X+
    1362:	88 23       	and	r24, r24
    1364:	59 f0       	breq	.+22     	; 0x137c <__vector_17+0x4c>
			elapsed_microseconds[t] += (1000000ULL * 256 * 256) / F_CPU;
    1366:	40 81       	ld	r20, Z
    1368:	51 81       	ldd	r21, Z+1	; 0x01
    136a:	62 81       	ldd	r22, Z+2	; 0x02
    136c:	73 81       	ldd	r23, Z+3	; 0x03
    136e:	50 5e       	subi	r21, 0xE0	; 224
    1370:	6f 4f       	sbci	r22, 0xFF	; 255
    1372:	7f 4f       	sbci	r23, 0xFF	; 255
    1374:	40 83       	st	Z, r20
    1376:	51 83       	std	Z+1, r21	; 0x01
    1378:	62 83       	std	Z+2, r22	; 0x02
    137a:	73 83       	std	Z+3, r23	; 0x03
    137c:	34 96       	adiw	r30, 0x04	; 4
uint16_t timer_elapsed_ms(timer_t timer) {
	return elapsed_microseconds[timer] / 1000;
}

ISR(TIMER0_OVF_vect) {
	for (int t = 0; t < NUMBER_OF_TIMERS; t++) {
    137e:	e2 17       	cp	r30, r18
    1380:	f3 07       	cpc	r31, r19
    1382:	71 f7       	brne	.-36     	; 0x1360 <__vector_17+0x30>
		if (timer_enabled[t]){
			elapsed_microseconds[t] += (1000000ULL * 256 * 256) / F_CPU;
		}
	}
}
    1384:	ff 91       	pop	r31
    1386:	ef 91       	pop	r30
    1388:	bf 91       	pop	r27
    138a:	af 91       	pop	r26
    138c:	8f 91       	pop	r24
    138e:	7f 91       	pop	r23
    1390:	6f 91       	pop	r22
    1392:	5f 91       	pop	r21
    1394:	4f 91       	pop	r20
    1396:	3f 91       	pop	r19
    1398:	2f 91       	pop	r18
    139a:	0f 90       	pop	r0
    139c:	0b be       	out	0x3b, r0	; 59
    139e:	0f 90       	pop	r0
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	0f 90       	pop	r0
    13a4:	1f 90       	pop	r1
    13a6:	18 95       	reti

000013a8 <__subsf3>:
    13a8:	50 58       	subi	r21, 0x80	; 128

000013aa <__addsf3>:
    13aa:	bb 27       	eor	r27, r27
    13ac:	aa 27       	eor	r26, r26
    13ae:	0e d0       	rcall	.+28     	; 0x13cc <__addsf3x>
    13b0:	75 c1       	rjmp	.+746    	; 0x169c <__fp_round>
    13b2:	66 d1       	rcall	.+716    	; 0x1680 <__fp_pscA>
    13b4:	30 f0       	brcs	.+12     	; 0x13c2 <__addsf3+0x18>
    13b6:	6b d1       	rcall	.+726    	; 0x168e <__fp_pscB>
    13b8:	20 f0       	brcs	.+8      	; 0x13c2 <__addsf3+0x18>
    13ba:	31 f4       	brne	.+12     	; 0x13c8 <__addsf3+0x1e>
    13bc:	9f 3f       	cpi	r25, 0xFF	; 255
    13be:	11 f4       	brne	.+4      	; 0x13c4 <__addsf3+0x1a>
    13c0:	1e f4       	brtc	.+6      	; 0x13c8 <__addsf3+0x1e>
    13c2:	5b c1       	rjmp	.+694    	; 0x167a <__fp_nan>
    13c4:	0e f4       	brtc	.+2      	; 0x13c8 <__addsf3+0x1e>
    13c6:	e0 95       	com	r30
    13c8:	e7 fb       	bst	r30, 7
    13ca:	51 c1       	rjmp	.+674    	; 0x166e <__fp_inf>

000013cc <__addsf3x>:
    13cc:	e9 2f       	mov	r30, r25
    13ce:	77 d1       	rcall	.+750    	; 0x16be <__fp_split3>
    13d0:	80 f3       	brcs	.-32     	; 0x13b2 <__addsf3+0x8>
    13d2:	ba 17       	cp	r27, r26
    13d4:	62 07       	cpc	r22, r18
    13d6:	73 07       	cpc	r23, r19
    13d8:	84 07       	cpc	r24, r20
    13da:	95 07       	cpc	r25, r21
    13dc:	18 f0       	brcs	.+6      	; 0x13e4 <__addsf3x+0x18>
    13de:	71 f4       	brne	.+28     	; 0x13fc <__addsf3x+0x30>
    13e0:	9e f5       	brtc	.+102    	; 0x1448 <__addsf3x+0x7c>
    13e2:	8f c1       	rjmp	.+798    	; 0x1702 <__fp_zero>
    13e4:	0e f4       	brtc	.+2      	; 0x13e8 <__addsf3x+0x1c>
    13e6:	e0 95       	com	r30
    13e8:	0b 2e       	mov	r0, r27
    13ea:	ba 2f       	mov	r27, r26
    13ec:	a0 2d       	mov	r26, r0
    13ee:	0b 01       	movw	r0, r22
    13f0:	b9 01       	movw	r22, r18
    13f2:	90 01       	movw	r18, r0
    13f4:	0c 01       	movw	r0, r24
    13f6:	ca 01       	movw	r24, r20
    13f8:	a0 01       	movw	r20, r0
    13fa:	11 24       	eor	r1, r1
    13fc:	ff 27       	eor	r31, r31
    13fe:	59 1b       	sub	r21, r25
    1400:	99 f0       	breq	.+38     	; 0x1428 <__addsf3x+0x5c>
    1402:	59 3f       	cpi	r21, 0xF9	; 249
    1404:	50 f4       	brcc	.+20     	; 0x141a <__addsf3x+0x4e>
    1406:	50 3e       	cpi	r21, 0xE0	; 224
    1408:	68 f1       	brcs	.+90     	; 0x1464 <__addsf3x+0x98>
    140a:	1a 16       	cp	r1, r26
    140c:	f0 40       	sbci	r31, 0x00	; 0
    140e:	a2 2f       	mov	r26, r18
    1410:	23 2f       	mov	r18, r19
    1412:	34 2f       	mov	r19, r20
    1414:	44 27       	eor	r20, r20
    1416:	58 5f       	subi	r21, 0xF8	; 248
    1418:	f3 cf       	rjmp	.-26     	; 0x1400 <__addsf3x+0x34>
    141a:	46 95       	lsr	r20
    141c:	37 95       	ror	r19
    141e:	27 95       	ror	r18
    1420:	a7 95       	ror	r26
    1422:	f0 40       	sbci	r31, 0x00	; 0
    1424:	53 95       	inc	r21
    1426:	c9 f7       	brne	.-14     	; 0x141a <__addsf3x+0x4e>
    1428:	7e f4       	brtc	.+30     	; 0x1448 <__addsf3x+0x7c>
    142a:	1f 16       	cp	r1, r31
    142c:	ba 0b       	sbc	r27, r26
    142e:	62 0b       	sbc	r22, r18
    1430:	73 0b       	sbc	r23, r19
    1432:	84 0b       	sbc	r24, r20
    1434:	ba f0       	brmi	.+46     	; 0x1464 <__addsf3x+0x98>
    1436:	91 50       	subi	r25, 0x01	; 1
    1438:	a1 f0       	breq	.+40     	; 0x1462 <__addsf3x+0x96>
    143a:	ff 0f       	add	r31, r31
    143c:	bb 1f       	adc	r27, r27
    143e:	66 1f       	adc	r22, r22
    1440:	77 1f       	adc	r23, r23
    1442:	88 1f       	adc	r24, r24
    1444:	c2 f7       	brpl	.-16     	; 0x1436 <__addsf3x+0x6a>
    1446:	0e c0       	rjmp	.+28     	; 0x1464 <__addsf3x+0x98>
    1448:	ba 0f       	add	r27, r26
    144a:	62 1f       	adc	r22, r18
    144c:	73 1f       	adc	r23, r19
    144e:	84 1f       	adc	r24, r20
    1450:	48 f4       	brcc	.+18     	; 0x1464 <__addsf3x+0x98>
    1452:	87 95       	ror	r24
    1454:	77 95       	ror	r23
    1456:	67 95       	ror	r22
    1458:	b7 95       	ror	r27
    145a:	f7 95       	ror	r31
    145c:	9e 3f       	cpi	r25, 0xFE	; 254
    145e:	08 f0       	brcs	.+2      	; 0x1462 <__addsf3x+0x96>
    1460:	b3 cf       	rjmp	.-154    	; 0x13c8 <__addsf3+0x1e>
    1462:	93 95       	inc	r25
    1464:	88 0f       	add	r24, r24
    1466:	08 f0       	brcs	.+2      	; 0x146a <__addsf3x+0x9e>
    1468:	99 27       	eor	r25, r25
    146a:	ee 0f       	add	r30, r30
    146c:	97 95       	ror	r25
    146e:	87 95       	ror	r24
    1470:	08 95       	ret

00001472 <__cmpsf2>:
    1472:	d9 d0       	rcall	.+434    	; 0x1626 <__fp_cmp>
    1474:	08 f4       	brcc	.+2      	; 0x1478 <__cmpsf2+0x6>
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	08 95       	ret

0000147a <__divsf3>:
    147a:	0c d0       	rcall	.+24     	; 0x1494 <__divsf3x>
    147c:	0f c1       	rjmp	.+542    	; 0x169c <__fp_round>
    147e:	07 d1       	rcall	.+526    	; 0x168e <__fp_pscB>
    1480:	40 f0       	brcs	.+16     	; 0x1492 <__divsf3+0x18>
    1482:	fe d0       	rcall	.+508    	; 0x1680 <__fp_pscA>
    1484:	30 f0       	brcs	.+12     	; 0x1492 <__divsf3+0x18>
    1486:	21 f4       	brne	.+8      	; 0x1490 <__divsf3+0x16>
    1488:	5f 3f       	cpi	r21, 0xFF	; 255
    148a:	19 f0       	breq	.+6      	; 0x1492 <__divsf3+0x18>
    148c:	f0 c0       	rjmp	.+480    	; 0x166e <__fp_inf>
    148e:	51 11       	cpse	r21, r1
    1490:	39 c1       	rjmp	.+626    	; 0x1704 <__fp_szero>
    1492:	f3 c0       	rjmp	.+486    	; 0x167a <__fp_nan>

00001494 <__divsf3x>:
    1494:	14 d1       	rcall	.+552    	; 0x16be <__fp_split3>
    1496:	98 f3       	brcs	.-26     	; 0x147e <__divsf3+0x4>

00001498 <__divsf3_pse>:
    1498:	99 23       	and	r25, r25
    149a:	c9 f3       	breq	.-14     	; 0x148e <__divsf3+0x14>
    149c:	55 23       	and	r21, r21
    149e:	b1 f3       	breq	.-20     	; 0x148c <__divsf3+0x12>
    14a0:	95 1b       	sub	r25, r21
    14a2:	55 0b       	sbc	r21, r21
    14a4:	bb 27       	eor	r27, r27
    14a6:	aa 27       	eor	r26, r26
    14a8:	62 17       	cp	r22, r18
    14aa:	73 07       	cpc	r23, r19
    14ac:	84 07       	cpc	r24, r20
    14ae:	38 f0       	brcs	.+14     	; 0x14be <__divsf3_pse+0x26>
    14b0:	9f 5f       	subi	r25, 0xFF	; 255
    14b2:	5f 4f       	sbci	r21, 0xFF	; 255
    14b4:	22 0f       	add	r18, r18
    14b6:	33 1f       	adc	r19, r19
    14b8:	44 1f       	adc	r20, r20
    14ba:	aa 1f       	adc	r26, r26
    14bc:	a9 f3       	breq	.-22     	; 0x14a8 <__divsf3_pse+0x10>
    14be:	33 d0       	rcall	.+102    	; 0x1526 <__divsf3_pse+0x8e>
    14c0:	0e 2e       	mov	r0, r30
    14c2:	3a f0       	brmi	.+14     	; 0x14d2 <__divsf3_pse+0x3a>
    14c4:	e0 e8       	ldi	r30, 0x80	; 128
    14c6:	30 d0       	rcall	.+96     	; 0x1528 <__divsf3_pse+0x90>
    14c8:	91 50       	subi	r25, 0x01	; 1
    14ca:	50 40       	sbci	r21, 0x00	; 0
    14cc:	e6 95       	lsr	r30
    14ce:	00 1c       	adc	r0, r0
    14d0:	ca f7       	brpl	.-14     	; 0x14c4 <__divsf3_pse+0x2c>
    14d2:	29 d0       	rcall	.+82     	; 0x1526 <__divsf3_pse+0x8e>
    14d4:	fe 2f       	mov	r31, r30
    14d6:	27 d0       	rcall	.+78     	; 0x1526 <__divsf3_pse+0x8e>
    14d8:	66 0f       	add	r22, r22
    14da:	77 1f       	adc	r23, r23
    14dc:	88 1f       	adc	r24, r24
    14de:	bb 1f       	adc	r27, r27
    14e0:	26 17       	cp	r18, r22
    14e2:	37 07       	cpc	r19, r23
    14e4:	48 07       	cpc	r20, r24
    14e6:	ab 07       	cpc	r26, r27
    14e8:	b0 e8       	ldi	r27, 0x80	; 128
    14ea:	09 f0       	breq	.+2      	; 0x14ee <__divsf3_pse+0x56>
    14ec:	bb 0b       	sbc	r27, r27
    14ee:	80 2d       	mov	r24, r0
    14f0:	bf 01       	movw	r22, r30
    14f2:	ff 27       	eor	r31, r31
    14f4:	93 58       	subi	r25, 0x83	; 131
    14f6:	5f 4f       	sbci	r21, 0xFF	; 255
    14f8:	2a f0       	brmi	.+10     	; 0x1504 <__divsf3_pse+0x6c>
    14fa:	9e 3f       	cpi	r25, 0xFE	; 254
    14fc:	51 05       	cpc	r21, r1
    14fe:	68 f0       	brcs	.+26     	; 0x151a <__divsf3_pse+0x82>
    1500:	b6 c0       	rjmp	.+364    	; 0x166e <__fp_inf>
    1502:	00 c1       	rjmp	.+512    	; 0x1704 <__fp_szero>
    1504:	5f 3f       	cpi	r21, 0xFF	; 255
    1506:	ec f3       	brlt	.-6      	; 0x1502 <__divsf3_pse+0x6a>
    1508:	98 3e       	cpi	r25, 0xE8	; 232
    150a:	dc f3       	brlt	.-10     	; 0x1502 <__divsf3_pse+0x6a>
    150c:	86 95       	lsr	r24
    150e:	77 95       	ror	r23
    1510:	67 95       	ror	r22
    1512:	b7 95       	ror	r27
    1514:	f7 95       	ror	r31
    1516:	9f 5f       	subi	r25, 0xFF	; 255
    1518:	c9 f7       	brne	.-14     	; 0x150c <__divsf3_pse+0x74>
    151a:	88 0f       	add	r24, r24
    151c:	91 1d       	adc	r25, r1
    151e:	96 95       	lsr	r25
    1520:	87 95       	ror	r24
    1522:	97 f9       	bld	r25, 7
    1524:	08 95       	ret
    1526:	e1 e0       	ldi	r30, 0x01	; 1
    1528:	66 0f       	add	r22, r22
    152a:	77 1f       	adc	r23, r23
    152c:	88 1f       	adc	r24, r24
    152e:	bb 1f       	adc	r27, r27
    1530:	62 17       	cp	r22, r18
    1532:	73 07       	cpc	r23, r19
    1534:	84 07       	cpc	r24, r20
    1536:	ba 07       	cpc	r27, r26
    1538:	20 f0       	brcs	.+8      	; 0x1542 <__divsf3_pse+0xaa>
    153a:	62 1b       	sub	r22, r18
    153c:	73 0b       	sbc	r23, r19
    153e:	84 0b       	sbc	r24, r20
    1540:	ba 0b       	sbc	r27, r26
    1542:	ee 1f       	adc	r30, r30
    1544:	88 f7       	brcc	.-30     	; 0x1528 <__divsf3_pse+0x90>
    1546:	e0 95       	com	r30
    1548:	08 95       	ret

0000154a <__fixsfsi>:
    154a:	04 d0       	rcall	.+8      	; 0x1554 <__fixunssfsi>
    154c:	68 94       	set
    154e:	b1 11       	cpse	r27, r1
    1550:	d9 c0       	rjmp	.+434    	; 0x1704 <__fp_szero>
    1552:	08 95       	ret

00001554 <__fixunssfsi>:
    1554:	bc d0       	rcall	.+376    	; 0x16ce <__fp_splitA>
    1556:	88 f0       	brcs	.+34     	; 0x157a <__fixunssfsi+0x26>
    1558:	9f 57       	subi	r25, 0x7F	; 127
    155a:	90 f0       	brcs	.+36     	; 0x1580 <__fixunssfsi+0x2c>
    155c:	b9 2f       	mov	r27, r25
    155e:	99 27       	eor	r25, r25
    1560:	b7 51       	subi	r27, 0x17	; 23
    1562:	a0 f0       	brcs	.+40     	; 0x158c <__fixunssfsi+0x38>
    1564:	d1 f0       	breq	.+52     	; 0x159a <__fixunssfsi+0x46>
    1566:	66 0f       	add	r22, r22
    1568:	77 1f       	adc	r23, r23
    156a:	88 1f       	adc	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	1a f0       	brmi	.+6      	; 0x1576 <__fixunssfsi+0x22>
    1570:	ba 95       	dec	r27
    1572:	c9 f7       	brne	.-14     	; 0x1566 <__fixunssfsi+0x12>
    1574:	12 c0       	rjmp	.+36     	; 0x159a <__fixunssfsi+0x46>
    1576:	b1 30       	cpi	r27, 0x01	; 1
    1578:	81 f0       	breq	.+32     	; 0x159a <__fixunssfsi+0x46>
    157a:	c3 d0       	rcall	.+390    	; 0x1702 <__fp_zero>
    157c:	b1 e0       	ldi	r27, 0x01	; 1
    157e:	08 95       	ret
    1580:	c0 c0       	rjmp	.+384    	; 0x1702 <__fp_zero>
    1582:	67 2f       	mov	r22, r23
    1584:	78 2f       	mov	r23, r24
    1586:	88 27       	eor	r24, r24
    1588:	b8 5f       	subi	r27, 0xF8	; 248
    158a:	39 f0       	breq	.+14     	; 0x159a <__fixunssfsi+0x46>
    158c:	b9 3f       	cpi	r27, 0xF9	; 249
    158e:	cc f3       	brlt	.-14     	; 0x1582 <__fixunssfsi+0x2e>
    1590:	86 95       	lsr	r24
    1592:	77 95       	ror	r23
    1594:	67 95       	ror	r22
    1596:	b3 95       	inc	r27
    1598:	d9 f7       	brne	.-10     	; 0x1590 <__fixunssfsi+0x3c>
    159a:	3e f4       	brtc	.+14     	; 0x15aa <__fixunssfsi+0x56>
    159c:	90 95       	com	r25
    159e:	80 95       	com	r24
    15a0:	70 95       	com	r23
    15a2:	61 95       	neg	r22
    15a4:	7f 4f       	sbci	r23, 0xFF	; 255
    15a6:	8f 4f       	sbci	r24, 0xFF	; 255
    15a8:	9f 4f       	sbci	r25, 0xFF	; 255
    15aa:	08 95       	ret

000015ac <__floatunsisf>:
    15ac:	e8 94       	clt
    15ae:	09 c0       	rjmp	.+18     	; 0x15c2 <__floatsisf+0x12>

000015b0 <__floatsisf>:
    15b0:	97 fb       	bst	r25, 7
    15b2:	3e f4       	brtc	.+14     	; 0x15c2 <__floatsisf+0x12>
    15b4:	90 95       	com	r25
    15b6:	80 95       	com	r24
    15b8:	70 95       	com	r23
    15ba:	61 95       	neg	r22
    15bc:	7f 4f       	sbci	r23, 0xFF	; 255
    15be:	8f 4f       	sbci	r24, 0xFF	; 255
    15c0:	9f 4f       	sbci	r25, 0xFF	; 255
    15c2:	99 23       	and	r25, r25
    15c4:	a9 f0       	breq	.+42     	; 0x15f0 <__floatsisf+0x40>
    15c6:	f9 2f       	mov	r31, r25
    15c8:	96 e9       	ldi	r25, 0x96	; 150
    15ca:	bb 27       	eor	r27, r27
    15cc:	93 95       	inc	r25
    15ce:	f6 95       	lsr	r31
    15d0:	87 95       	ror	r24
    15d2:	77 95       	ror	r23
    15d4:	67 95       	ror	r22
    15d6:	b7 95       	ror	r27
    15d8:	f1 11       	cpse	r31, r1
    15da:	f8 cf       	rjmp	.-16     	; 0x15cc <__floatsisf+0x1c>
    15dc:	fa f4       	brpl	.+62     	; 0x161c <__floatsisf+0x6c>
    15de:	bb 0f       	add	r27, r27
    15e0:	11 f4       	brne	.+4      	; 0x15e6 <__floatsisf+0x36>
    15e2:	60 ff       	sbrs	r22, 0
    15e4:	1b c0       	rjmp	.+54     	; 0x161c <__floatsisf+0x6c>
    15e6:	6f 5f       	subi	r22, 0xFF	; 255
    15e8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ea:	8f 4f       	sbci	r24, 0xFF	; 255
    15ec:	9f 4f       	sbci	r25, 0xFF	; 255
    15ee:	16 c0       	rjmp	.+44     	; 0x161c <__floatsisf+0x6c>
    15f0:	88 23       	and	r24, r24
    15f2:	11 f0       	breq	.+4      	; 0x15f8 <__floatsisf+0x48>
    15f4:	96 e9       	ldi	r25, 0x96	; 150
    15f6:	11 c0       	rjmp	.+34     	; 0x161a <__floatsisf+0x6a>
    15f8:	77 23       	and	r23, r23
    15fa:	21 f0       	breq	.+8      	; 0x1604 <__floatsisf+0x54>
    15fc:	9e e8       	ldi	r25, 0x8E	; 142
    15fe:	87 2f       	mov	r24, r23
    1600:	76 2f       	mov	r23, r22
    1602:	05 c0       	rjmp	.+10     	; 0x160e <__floatsisf+0x5e>
    1604:	66 23       	and	r22, r22
    1606:	71 f0       	breq	.+28     	; 0x1624 <__floatsisf+0x74>
    1608:	96 e8       	ldi	r25, 0x86	; 134
    160a:	86 2f       	mov	r24, r22
    160c:	70 e0       	ldi	r23, 0x00	; 0
    160e:	60 e0       	ldi	r22, 0x00	; 0
    1610:	2a f0       	brmi	.+10     	; 0x161c <__floatsisf+0x6c>
    1612:	9a 95       	dec	r25
    1614:	66 0f       	add	r22, r22
    1616:	77 1f       	adc	r23, r23
    1618:	88 1f       	adc	r24, r24
    161a:	da f7       	brpl	.-10     	; 0x1612 <__floatsisf+0x62>
    161c:	88 0f       	add	r24, r24
    161e:	96 95       	lsr	r25
    1620:	87 95       	ror	r24
    1622:	97 f9       	bld	r25, 7
    1624:	08 95       	ret

00001626 <__fp_cmp>:
    1626:	99 0f       	add	r25, r25
    1628:	00 08       	sbc	r0, r0
    162a:	55 0f       	add	r21, r21
    162c:	aa 0b       	sbc	r26, r26
    162e:	e0 e8       	ldi	r30, 0x80	; 128
    1630:	fe ef       	ldi	r31, 0xFE	; 254
    1632:	16 16       	cp	r1, r22
    1634:	17 06       	cpc	r1, r23
    1636:	e8 07       	cpc	r30, r24
    1638:	f9 07       	cpc	r31, r25
    163a:	c0 f0       	brcs	.+48     	; 0x166c <__fp_cmp+0x46>
    163c:	12 16       	cp	r1, r18
    163e:	13 06       	cpc	r1, r19
    1640:	e4 07       	cpc	r30, r20
    1642:	f5 07       	cpc	r31, r21
    1644:	98 f0       	brcs	.+38     	; 0x166c <__fp_cmp+0x46>
    1646:	62 1b       	sub	r22, r18
    1648:	73 0b       	sbc	r23, r19
    164a:	84 0b       	sbc	r24, r20
    164c:	95 0b       	sbc	r25, r21
    164e:	39 f4       	brne	.+14     	; 0x165e <__fp_cmp+0x38>
    1650:	0a 26       	eor	r0, r26
    1652:	61 f0       	breq	.+24     	; 0x166c <__fp_cmp+0x46>
    1654:	23 2b       	or	r18, r19
    1656:	24 2b       	or	r18, r20
    1658:	25 2b       	or	r18, r21
    165a:	21 f4       	brne	.+8      	; 0x1664 <__fp_cmp+0x3e>
    165c:	08 95       	ret
    165e:	0a 26       	eor	r0, r26
    1660:	09 f4       	brne	.+2      	; 0x1664 <__fp_cmp+0x3e>
    1662:	a1 40       	sbci	r26, 0x01	; 1
    1664:	a6 95       	lsr	r26
    1666:	8f ef       	ldi	r24, 0xFF	; 255
    1668:	81 1d       	adc	r24, r1
    166a:	81 1d       	adc	r24, r1
    166c:	08 95       	ret

0000166e <__fp_inf>:
    166e:	97 f9       	bld	r25, 7
    1670:	9f 67       	ori	r25, 0x7F	; 127
    1672:	80 e8       	ldi	r24, 0x80	; 128
    1674:	70 e0       	ldi	r23, 0x00	; 0
    1676:	60 e0       	ldi	r22, 0x00	; 0
    1678:	08 95       	ret

0000167a <__fp_nan>:
    167a:	9f ef       	ldi	r25, 0xFF	; 255
    167c:	80 ec       	ldi	r24, 0xC0	; 192
    167e:	08 95       	ret

00001680 <__fp_pscA>:
    1680:	00 24       	eor	r0, r0
    1682:	0a 94       	dec	r0
    1684:	16 16       	cp	r1, r22
    1686:	17 06       	cpc	r1, r23
    1688:	18 06       	cpc	r1, r24
    168a:	09 06       	cpc	r0, r25
    168c:	08 95       	ret

0000168e <__fp_pscB>:
    168e:	00 24       	eor	r0, r0
    1690:	0a 94       	dec	r0
    1692:	12 16       	cp	r1, r18
    1694:	13 06       	cpc	r1, r19
    1696:	14 06       	cpc	r1, r20
    1698:	05 06       	cpc	r0, r21
    169a:	08 95       	ret

0000169c <__fp_round>:
    169c:	09 2e       	mov	r0, r25
    169e:	03 94       	inc	r0
    16a0:	00 0c       	add	r0, r0
    16a2:	11 f4       	brne	.+4      	; 0x16a8 <__fp_round+0xc>
    16a4:	88 23       	and	r24, r24
    16a6:	52 f0       	brmi	.+20     	; 0x16bc <__fp_round+0x20>
    16a8:	bb 0f       	add	r27, r27
    16aa:	40 f4       	brcc	.+16     	; 0x16bc <__fp_round+0x20>
    16ac:	bf 2b       	or	r27, r31
    16ae:	11 f4       	brne	.+4      	; 0x16b4 <__fp_round+0x18>
    16b0:	60 ff       	sbrs	r22, 0
    16b2:	04 c0       	rjmp	.+8      	; 0x16bc <__fp_round+0x20>
    16b4:	6f 5f       	subi	r22, 0xFF	; 255
    16b6:	7f 4f       	sbci	r23, 0xFF	; 255
    16b8:	8f 4f       	sbci	r24, 0xFF	; 255
    16ba:	9f 4f       	sbci	r25, 0xFF	; 255
    16bc:	08 95       	ret

000016be <__fp_split3>:
    16be:	57 fd       	sbrc	r21, 7
    16c0:	90 58       	subi	r25, 0x80	; 128
    16c2:	44 0f       	add	r20, r20
    16c4:	55 1f       	adc	r21, r21
    16c6:	59 f0       	breq	.+22     	; 0x16de <__fp_splitA+0x10>
    16c8:	5f 3f       	cpi	r21, 0xFF	; 255
    16ca:	71 f0       	breq	.+28     	; 0x16e8 <__fp_splitA+0x1a>
    16cc:	47 95       	ror	r20

000016ce <__fp_splitA>:
    16ce:	88 0f       	add	r24, r24
    16d0:	97 fb       	bst	r25, 7
    16d2:	99 1f       	adc	r25, r25
    16d4:	61 f0       	breq	.+24     	; 0x16ee <__fp_splitA+0x20>
    16d6:	9f 3f       	cpi	r25, 0xFF	; 255
    16d8:	79 f0       	breq	.+30     	; 0x16f8 <__fp_splitA+0x2a>
    16da:	87 95       	ror	r24
    16dc:	08 95       	ret
    16de:	12 16       	cp	r1, r18
    16e0:	13 06       	cpc	r1, r19
    16e2:	14 06       	cpc	r1, r20
    16e4:	55 1f       	adc	r21, r21
    16e6:	f2 cf       	rjmp	.-28     	; 0x16cc <__fp_split3+0xe>
    16e8:	46 95       	lsr	r20
    16ea:	f1 df       	rcall	.-30     	; 0x16ce <__fp_splitA>
    16ec:	08 c0       	rjmp	.+16     	; 0x16fe <__fp_splitA+0x30>
    16ee:	16 16       	cp	r1, r22
    16f0:	17 06       	cpc	r1, r23
    16f2:	18 06       	cpc	r1, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	f1 cf       	rjmp	.-30     	; 0x16da <__fp_splitA+0xc>
    16f8:	86 95       	lsr	r24
    16fa:	71 05       	cpc	r23, r1
    16fc:	61 05       	cpc	r22, r1
    16fe:	08 94       	sec
    1700:	08 95       	ret

00001702 <__fp_zero>:
    1702:	e8 94       	clt

00001704 <__fp_szero>:
    1704:	bb 27       	eor	r27, r27
    1706:	66 27       	eor	r22, r22
    1708:	77 27       	eor	r23, r23
    170a:	cb 01       	movw	r24, r22
    170c:	97 f9       	bld	r25, 7
    170e:	08 95       	ret

00001710 <__gesf2>:
    1710:	8a df       	rcall	.-236    	; 0x1626 <__fp_cmp>
    1712:	08 f4       	brcc	.+2      	; 0x1716 <__gesf2+0x6>
    1714:	8f ef       	ldi	r24, 0xFF	; 255
    1716:	08 95       	ret

00001718 <__mulsf3>:
    1718:	0b d0       	rcall	.+22     	; 0x1730 <__mulsf3x>
    171a:	c0 cf       	rjmp	.-128    	; 0x169c <__fp_round>
    171c:	b1 df       	rcall	.-158    	; 0x1680 <__fp_pscA>
    171e:	28 f0       	brcs	.+10     	; 0x172a <__mulsf3+0x12>
    1720:	b6 df       	rcall	.-148    	; 0x168e <__fp_pscB>
    1722:	18 f0       	brcs	.+6      	; 0x172a <__mulsf3+0x12>
    1724:	95 23       	and	r25, r21
    1726:	09 f0       	breq	.+2      	; 0x172a <__mulsf3+0x12>
    1728:	a2 cf       	rjmp	.-188    	; 0x166e <__fp_inf>
    172a:	a7 cf       	rjmp	.-178    	; 0x167a <__fp_nan>
    172c:	11 24       	eor	r1, r1
    172e:	ea cf       	rjmp	.-44     	; 0x1704 <__fp_szero>

00001730 <__mulsf3x>:
    1730:	c6 df       	rcall	.-116    	; 0x16be <__fp_split3>
    1732:	a0 f3       	brcs	.-24     	; 0x171c <__mulsf3+0x4>

00001734 <__mulsf3_pse>:
    1734:	95 9f       	mul	r25, r21
    1736:	d1 f3       	breq	.-12     	; 0x172c <__mulsf3+0x14>
    1738:	95 0f       	add	r25, r21
    173a:	50 e0       	ldi	r21, 0x00	; 0
    173c:	55 1f       	adc	r21, r21
    173e:	62 9f       	mul	r22, r18
    1740:	f0 01       	movw	r30, r0
    1742:	72 9f       	mul	r23, r18
    1744:	bb 27       	eor	r27, r27
    1746:	f0 0d       	add	r31, r0
    1748:	b1 1d       	adc	r27, r1
    174a:	63 9f       	mul	r22, r19
    174c:	aa 27       	eor	r26, r26
    174e:	f0 0d       	add	r31, r0
    1750:	b1 1d       	adc	r27, r1
    1752:	aa 1f       	adc	r26, r26
    1754:	64 9f       	mul	r22, r20
    1756:	66 27       	eor	r22, r22
    1758:	b0 0d       	add	r27, r0
    175a:	a1 1d       	adc	r26, r1
    175c:	66 1f       	adc	r22, r22
    175e:	82 9f       	mul	r24, r18
    1760:	22 27       	eor	r18, r18
    1762:	b0 0d       	add	r27, r0
    1764:	a1 1d       	adc	r26, r1
    1766:	62 1f       	adc	r22, r18
    1768:	73 9f       	mul	r23, r19
    176a:	b0 0d       	add	r27, r0
    176c:	a1 1d       	adc	r26, r1
    176e:	62 1f       	adc	r22, r18
    1770:	83 9f       	mul	r24, r19
    1772:	a0 0d       	add	r26, r0
    1774:	61 1d       	adc	r22, r1
    1776:	22 1f       	adc	r18, r18
    1778:	74 9f       	mul	r23, r20
    177a:	33 27       	eor	r19, r19
    177c:	a0 0d       	add	r26, r0
    177e:	61 1d       	adc	r22, r1
    1780:	23 1f       	adc	r18, r19
    1782:	84 9f       	mul	r24, r20
    1784:	60 0d       	add	r22, r0
    1786:	21 1d       	adc	r18, r1
    1788:	82 2f       	mov	r24, r18
    178a:	76 2f       	mov	r23, r22
    178c:	6a 2f       	mov	r22, r26
    178e:	11 24       	eor	r1, r1
    1790:	9f 57       	subi	r25, 0x7F	; 127
    1792:	50 40       	sbci	r21, 0x00	; 0
    1794:	8a f0       	brmi	.+34     	; 0x17b8 <__mulsf3_pse+0x84>
    1796:	e1 f0       	breq	.+56     	; 0x17d0 <__mulsf3_pse+0x9c>
    1798:	88 23       	and	r24, r24
    179a:	4a f0       	brmi	.+18     	; 0x17ae <__mulsf3_pse+0x7a>
    179c:	ee 0f       	add	r30, r30
    179e:	ff 1f       	adc	r31, r31
    17a0:	bb 1f       	adc	r27, r27
    17a2:	66 1f       	adc	r22, r22
    17a4:	77 1f       	adc	r23, r23
    17a6:	88 1f       	adc	r24, r24
    17a8:	91 50       	subi	r25, 0x01	; 1
    17aa:	50 40       	sbci	r21, 0x00	; 0
    17ac:	a9 f7       	brne	.-22     	; 0x1798 <__mulsf3_pse+0x64>
    17ae:	9e 3f       	cpi	r25, 0xFE	; 254
    17b0:	51 05       	cpc	r21, r1
    17b2:	70 f0       	brcs	.+28     	; 0x17d0 <__mulsf3_pse+0x9c>
    17b4:	5c cf       	rjmp	.-328    	; 0x166e <__fp_inf>
    17b6:	a6 cf       	rjmp	.-180    	; 0x1704 <__fp_szero>
    17b8:	5f 3f       	cpi	r21, 0xFF	; 255
    17ba:	ec f3       	brlt	.-6      	; 0x17b6 <__mulsf3_pse+0x82>
    17bc:	98 3e       	cpi	r25, 0xE8	; 232
    17be:	dc f3       	brlt	.-10     	; 0x17b6 <__mulsf3_pse+0x82>
    17c0:	86 95       	lsr	r24
    17c2:	77 95       	ror	r23
    17c4:	67 95       	ror	r22
    17c6:	b7 95       	ror	r27
    17c8:	f7 95       	ror	r31
    17ca:	e7 95       	ror	r30
    17cc:	9f 5f       	subi	r25, 0xFF	; 255
    17ce:	c1 f7       	brne	.-16     	; 0x17c0 <__mulsf3_pse+0x8c>
    17d0:	fe 2b       	or	r31, r30
    17d2:	88 0f       	add	r24, r24
    17d4:	91 1d       	adc	r25, r1
    17d6:	96 95       	lsr	r25
    17d8:	87 95       	ror	r24
    17da:	97 f9       	bld	r25, 7
    17dc:	08 95       	ret

000017de <__tablejump2__>:
    17de:	ee 0f       	add	r30, r30
    17e0:	ff 1f       	adc	r31, r31
    17e2:	00 24       	eor	r0, r0
    17e4:	00 1c       	adc	r0, r0
    17e6:	0b be       	out	0x3b, r0	; 59
    17e8:	07 90       	elpm	r0, Z+
    17ea:	f6 91       	elpm	r31, Z
    17ec:	e0 2d       	mov	r30, r0
    17ee:	09 94       	ijmp

000017f0 <atoi>:
    17f0:	fc 01       	movw	r30, r24
    17f2:	88 27       	eor	r24, r24
    17f4:	99 27       	eor	r25, r25
    17f6:	e8 94       	clt
    17f8:	21 91       	ld	r18, Z+
    17fa:	20 32       	cpi	r18, 0x20	; 32
    17fc:	e9 f3       	breq	.-6      	; 0x17f8 <atoi+0x8>
    17fe:	29 30       	cpi	r18, 0x09	; 9
    1800:	10 f0       	brcs	.+4      	; 0x1806 <atoi+0x16>
    1802:	2e 30       	cpi	r18, 0x0E	; 14
    1804:	c8 f3       	brcs	.-14     	; 0x17f8 <atoi+0x8>
    1806:	2b 32       	cpi	r18, 0x2B	; 43
    1808:	39 f0       	breq	.+14     	; 0x1818 <atoi+0x28>
    180a:	2d 32       	cpi	r18, 0x2D	; 45
    180c:	31 f4       	brne	.+12     	; 0x181a <atoi+0x2a>
    180e:	68 94       	set
    1810:	03 c0       	rjmp	.+6      	; 0x1818 <atoi+0x28>
    1812:	15 d0       	rcall	.+42     	; 0x183e <__mulhi_const_10>
    1814:	82 0f       	add	r24, r18
    1816:	91 1d       	adc	r25, r1
    1818:	21 91       	ld	r18, Z+
    181a:	20 53       	subi	r18, 0x30	; 48
    181c:	2a 30       	cpi	r18, 0x0A	; 10
    181e:	c8 f3       	brcs	.-14     	; 0x1812 <atoi+0x22>
    1820:	1e f4       	brtc	.+6      	; 0x1828 <atoi+0x38>
    1822:	90 95       	com	r25
    1824:	81 95       	neg	r24
    1826:	9f 4f       	sbci	r25, 0xFF	; 255
    1828:	08 95       	ret

0000182a <__itoa_ncheck>:
    182a:	bb 27       	eor	r27, r27
    182c:	4a 30       	cpi	r20, 0x0A	; 10
    182e:	31 f4       	brne	.+12     	; 0x183c <__itoa_ncheck+0x12>
    1830:	99 23       	and	r25, r25
    1832:	22 f4       	brpl	.+8      	; 0x183c <__itoa_ncheck+0x12>
    1834:	bd e2       	ldi	r27, 0x2D	; 45
    1836:	90 95       	com	r25
    1838:	81 95       	neg	r24
    183a:	9f 4f       	sbci	r25, 0xFF	; 255
    183c:	09 c0       	rjmp	.+18     	; 0x1850 <__utoa_common>

0000183e <__mulhi_const_10>:
    183e:	7a e0       	ldi	r23, 0x0A	; 10
    1840:	97 9f       	mul	r25, r23
    1842:	90 2d       	mov	r25, r0
    1844:	87 9f       	mul	r24, r23
    1846:	80 2d       	mov	r24, r0
    1848:	91 0d       	add	r25, r1
    184a:	11 24       	eor	r1, r1
    184c:	08 95       	ret

0000184e <__utoa_ncheck>:
    184e:	bb 27       	eor	r27, r27

00001850 <__utoa_common>:
    1850:	fb 01       	movw	r30, r22
    1852:	55 27       	eor	r21, r21
    1854:	aa 27       	eor	r26, r26
    1856:	88 0f       	add	r24, r24
    1858:	99 1f       	adc	r25, r25
    185a:	aa 1f       	adc	r26, r26
    185c:	a4 17       	cp	r26, r20
    185e:	10 f0       	brcs	.+4      	; 0x1864 <__utoa_common+0x14>
    1860:	a4 1b       	sub	r26, r20
    1862:	83 95       	inc	r24
    1864:	50 51       	subi	r21, 0x10	; 16
    1866:	b9 f7       	brne	.-18     	; 0x1856 <__utoa_common+0x6>
    1868:	a0 5d       	subi	r26, 0xD0	; 208
    186a:	aa 33       	cpi	r26, 0x3A	; 58
    186c:	08 f0       	brcs	.+2      	; 0x1870 <__utoa_common+0x20>
    186e:	a9 5d       	subi	r26, 0xD9	; 217
    1870:	a1 93       	st	Z+, r26
    1872:	00 97       	sbiw	r24, 0x00	; 0
    1874:	79 f7       	brne	.-34     	; 0x1854 <__utoa_common+0x4>
    1876:	b1 11       	cpse	r27, r1
    1878:	b1 93       	st	Z+, r27
    187a:	11 92       	st	Z+, r1
    187c:	cb 01       	movw	r24, r22
    187e:	00 c0       	rjmp	.+0      	; 0x1880 <strrev>

00001880 <strrev>:
    1880:	dc 01       	movw	r26, r24
    1882:	fc 01       	movw	r30, r24
    1884:	67 2f       	mov	r22, r23
    1886:	71 91       	ld	r23, Z+
    1888:	77 23       	and	r23, r23
    188a:	e1 f7       	brne	.-8      	; 0x1884 <strrev+0x4>
    188c:	32 97       	sbiw	r30, 0x02	; 2
    188e:	04 c0       	rjmp	.+8      	; 0x1898 <strrev+0x18>
    1890:	7c 91       	ld	r23, X
    1892:	6d 93       	st	X+, r22
    1894:	70 83       	st	Z, r23
    1896:	62 91       	ld	r22, -Z
    1898:	ae 17       	cp	r26, r30
    189a:	bf 07       	cpc	r27, r31
    189c:	c8 f3       	brcs	.-14     	; 0x1890 <strrev+0x10>
    189e:	08 95       	ret

000018a0 <_exit>:
    18a0:	f8 94       	cli

000018a2 <__stop_program>:
    18a2:	ff cf       	rjmp	.-2      	; 0x18a2 <__stop_program>
