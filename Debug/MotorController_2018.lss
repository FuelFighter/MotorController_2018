
MotorController_2018.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000013cc  00001460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001fc  0080010a  0080010a  0000146a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000146a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000149c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  000014dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002612  00000000  00000000  000016ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013c4  00000000  00000000  00003cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000129a  00000000  00000000  000050c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000638  00000000  00000000  0000635c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000dde  00000000  00000000  00006994  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000135d  00000000  00000000  00007772  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00008acf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	26 c2       	rjmp	.+1100   	; 0x47e <__vector_12>
      32:	00 00       	nop
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4e c2       	rjmp	.+1180   	; 0x4de <__vector_16>
      42:	00 00       	nop
      44:	c2 c5       	rjmp	.+2948   	; 0xbca <__vector_17>
      46:	00 00       	nop
      48:	42 c3       	rjmp	.+1668   	; 0x6ce <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	3d c0       	rjmp	.+122    	; 0xd0 <__bad_interrupt>
      56:	00 00       	nop
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	39 c0       	rjmp	.+114    	; 0xd0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	82 c2       	rjmp	.+1284   	; 0x56a <__vector_25>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c0       	rjmp	.+78     	; 0xd0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c0       	rjmp	.+70     	; 0xd0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ec ec       	ldi	r30, 0xCC	; 204
      a8:	f3 e1       	ldi	r31, 0x13	; 19
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	aa 30       	cpi	r26, 0x0A	; 10
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	23 e0       	ldi	r18, 0x03	; 3
      bc:	aa e0       	ldi	r26, 0x0A	; 10
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a6 30       	cpi	r26, 0x06	; 6
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	85 d1       	rcall	.+778    	; 0x3d6 <main>
      cc:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <controller>:


static float f32_Integrator = 0.0 ;
static float f32_DutyCycleCmd = 50.0 ;

void controller(float f32_current_cmd, float f32_prev_current){
      d2:	8f 92       	push	r8
      d4:	9f 92       	push	r9
      d6:	af 92       	push	r10
      d8:	bf 92       	push	r11
      da:	cf 92       	push	r12
      dc:	df 92       	push	r13
      de:	ef 92       	push	r14
      e0:	ff 92       	push	r15
      e2:	cf 93       	push	r28
	
	float f32_CurrentDelta=f32_current_cmd-f32_prev_current	;
      e4:	df 93       	push	r29
      e6:	c9 d5       	rcall	.+2962   	; 0xc7a <__subsf3>
      e8:	4b 01       	movw	r8, r22

	f32_Integrator+=f32_CurrentDelta*TimeStep ;
      ea:	5c 01       	movw	r10, r24
      ec:	2a e0       	ldi	r18, 0x0A	; 10
      ee:	37 ed       	ldi	r19, 0xD7	; 215
      f0:	43 e2       	ldi	r20, 0x23	; 35
      f2:	5c e3       	ldi	r21, 0x3C	; 60
      f4:	7a d7       	rcall	.+3828   	; 0xfea <__mulsf3>
      f6:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end>
      fa:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__data_end+0x1>
      fe:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <__data_end+0x2>
     102:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <__data_end+0x3>
     106:	ba d5       	rcall	.+2932   	; 0xc7c <__addsf3>
     108:	6b 01       	movw	r12, r22
     10a:	7c 01       	movw	r14, r24
     10c:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <__data_end>
     110:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <__data_end+0x1>
     114:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end+0x2>
     118:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x3>
	f32_DutyCycleCmd=Kp*f32_CurrentDelta+f32_Integrator/Ti ;
	f32_DutyCycleCmd=(f32_DutyCycleCmd+50) ;
     11c:	2c e1       	ldi	r18, 0x1C	; 28
     11e:	32 ed       	ldi	r19, 0xD2	; 210
     120:	48 e2       	ldi	r20, 0x28	; 40
     122:	59 e3       	ldi	r21, 0x39	; 57
     124:	c5 01       	movw	r24, r10
     126:	b4 01       	movw	r22, r8
     128:	60 d7       	rcall	.+3776   	; 0xfea <__mulsf3>
     12a:	4b 01       	movw	r8, r22
     12c:	5c 01       	movw	r10, r24
     12e:	23 ee       	ldi	r18, 0xE3	; 227
     130:	35 ea       	ldi	r19, 0xA5	; 165
     132:	4b e1       	ldi	r20, 0x1B	; 27
     134:	5f e3       	ldi	r21, 0x3F	; 63
     136:	c7 01       	movw	r24, r14
     138:	b6 01       	movw	r22, r12
     13a:	08 d6       	rcall	.+3088   	; 0xd4c <__divsf3>
     13c:	9b 01       	movw	r18, r22
     13e:	ac 01       	movw	r20, r24
     140:	c5 01       	movw	r24, r10
     142:	b4 01       	movw	r22, r8
     144:	9b d5       	rcall	.+2870   	; 0xc7c <__addsf3>
     146:	20 e0       	ldi	r18, 0x00	; 0
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	48 e4       	ldi	r20, 0x48	; 72
     14c:	52 e4       	ldi	r21, 0x42	; 66
     14e:	96 d5       	rcall	.+2860   	; 0xc7c <__addsf3>
     150:	6b 01       	movw	r12, r22
     152:	7c 01       	movw	r14, r24
     154:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <f32_DutyCycleCmd>
     158:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <f32_DutyCycleCmd+0x1>
     15c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <f32_DutyCycleCmd+0x2>
	
	//bounding of duty cycle for well function of bootstrap capacitors

	if (f32_DutyCycleCmd > 95)
     160:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <f32_DutyCycleCmd+0x3>
     164:	20 e0       	ldi	r18, 0x00	; 0
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	4e eb       	ldi	r20, 0xBE	; 190
     16a:	52 e4       	ldi	r21, 0x42	; 66
     16c:	3a d7       	rcall	.+3700   	; 0xfe2 <__gesf2>
     16e:	18 16       	cp	r1, r24
	{
		f32_DutyCycleCmd = 95;
     170:	6c f4       	brge	.+26     	; 0x18c <controller+0xba>
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	ae eb       	ldi	r26, 0xBE	; 190
     178:	b2 e4       	ldi	r27, 0x42	; 66
     17a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <f32_DutyCycleCmd>
     17e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <f32_DutyCycleCmd+0x1>
     182:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <f32_DutyCycleCmd+0x2>
     186:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <f32_DutyCycleCmd+0x3>
	}
	
	if (f32_DutyCycleCmd < 5)
     18a:	15 c0       	rjmp	.+42     	; 0x1b6 <controller+0xe4>
     18c:	20 e0       	ldi	r18, 0x00	; 0
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	40 ea       	ldi	r20, 0xA0	; 160
     192:	50 e4       	ldi	r21, 0x40	; 64
     194:	c7 01       	movw	r24, r14
     196:	b6 01       	movw	r22, r12
     198:	d5 d5       	rcall	.+2986   	; 0xd44 <__cmpsf2>
     19a:	88 23       	and	r24, r24
	{
		f32_DutyCycleCmd = 5;
     19c:	64 f4       	brge	.+24     	; 0x1b6 <controller+0xe4>
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	a0 ea       	ldi	r26, 0xA0	; 160
     1a4:	b0 e4       	ldi	r27, 0x40	; 64
     1a6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <f32_DutyCycleCmd>
     1aa:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <f32_DutyCycleCmd+0x1>
     1ae:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <f32_DutyCycleCmd+0x2>
     1b2:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <f32_DutyCycleCmd+0x3>
	}
	
	OCR3A = (int)((f32_DutyCycleCmd/100)*ICR3) ; //PWM_PE3 (non inverted)
     1b6:	c0 91 96 00 	lds	r28, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
     1ba:	d0 91 97 00 	lds	r29, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
     1be:	20 e0       	ldi	r18, 0x00	; 0
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	48 ec       	ldi	r20, 0xC8	; 200
     1c4:	52 e4       	ldi	r21, 0x42	; 66
     1c6:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <f32_DutyCycleCmd>
     1ca:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <f32_DutyCycleCmd+0x1>
     1ce:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <f32_DutyCycleCmd+0x2>
     1d2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <f32_DutyCycleCmd+0x3>
     1d6:	ba d5       	rcall	.+2932   	; 0xd4c <__divsf3>
     1d8:	6b 01       	movw	r12, r22
     1da:	7c 01       	movw	r14, r24
     1dc:	be 01       	movw	r22, r28
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	4d d6       	rcall	.+3226   	; 0xe7e <__floatunsisf>
     1e4:	9b 01       	movw	r18, r22
     1e6:	ac 01       	movw	r20, r24
     1e8:	c7 01       	movw	r24, r14
     1ea:	b6 01       	movw	r22, r12
     1ec:	fe d6       	rcall	.+3580   	; 0xfea <__mulsf3>
     1ee:	16 d6       	rcall	.+3116   	; 0xe1c <__fixsfsi>
     1f0:	e8 e9       	ldi	r30, 0x98	; 152
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	71 83       	std	Z+1, r23	; 0x01
	OCR3B = OCR3A ; //PWM_PE4 (inverted)
     1f6:	60 83       	st	Z, r22
     1f8:	80 81       	ld	r24, Z
     1fa:	91 81       	ldd	r25, Z+1	; 0x01
     1fc:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     200:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
}
     204:	df 91       	pop	r29
     206:	cf 91       	pop	r28
     208:	ff 90       	pop	r15
     20a:	ef 90       	pop	r14
     20c:	df 90       	pop	r13
     20e:	cf 90       	pop	r12
     210:	bf 90       	pop	r11
     212:	af 90       	pop	r10
     214:	9f 90       	pop	r9
     216:	8f 90       	pop	r8
     218:	08 95       	ret

0000021a <timer1_init_ts>:




void timer1_init_ts(){
	TCCR1B |= (1<<CS10)|(1<<CS11); // timer 1 prescaler set CLK/64
     21a:	e1 e8       	ldi	r30, 0x81	; 129
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	83 60       	ori	r24, 0x03	; 3
     222:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12); //CTC
     224:	80 81       	ld	r24, Z
     226:	88 60       	ori	r24, 0x08	; 8
     228:	80 83       	st	Z, r24
	TCNT1 = 0; //reset timer value
     22a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     22e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIMSK1 |= (1<<OCIE1A); //enable interrupt
     232:	ef e6       	ldi	r30, 0x6F	; 111
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	80 81       	ld	r24, Z
     238:	82 60       	ori	r24, 0x02	; 2
     23a:	80 83       	st	Z, r24
	OCR1A = 12500 - 1; //compare value
     23c:	83 ed       	ldi	r24, 0xD3	; 211
     23e:	90 e3       	ldi	r25, 0x30	; 48
     240:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     244:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     248:	08 95       	ret

0000024a <timer0_init_ts>:
}

void timer0_init_ts(){ //TODO RTFM
	TCCR0A |= (1<<CS02)|(1<<CS00); // timer 0 prescaler set CLK/1024
     24a:	84 b5       	in	r24, 0x24	; 36
     24c:	85 60       	ori	r24, 0x05	; 5
     24e:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM01); //CTC
     250:	84 b5       	in	r24, 0x24	; 36
     252:	88 60       	ori	r24, 0x08	; 8
     254:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0; //reset timer value
     256:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1<<OCIE0A); //enable interrupt
     258:	ee e6       	ldi	r30, 0x6E	; 110
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	80 81       	ld	r24, Z
     25e:	82 60       	ori	r24, 0x02	; 2
     260:	80 83       	st	Z, r24
	OCR0A = 79; //compare value
     262:	8f e4       	ldi	r24, 0x4F	; 79
     264:	87 bd       	out	0x27, r24	; 39
     266:	08 95       	ret

00000268 <toggle_DCDC>:
};



void toggle_DCDC(uint8_t OnOff){
	if (OnOff){
     268:	88 23       	and	r24, r24
     26a:	11 f0       	breq	.+4      	; 0x270 <toggle_DCDC+0x8>
		PORTB &= ~(1 << PB3);
     26c:	2b 98       	cbi	0x05, 3	; 5
     26e:	08 95       	ret
	}else{
		PORTB |= (1 << PB3);
     270:	2b 9a       	sbi	0x05, 3	; 5
     272:	08 95       	ret

00000274 <handle_can>:
	}
}

void handle_can(ModuleValues_t *vals, CanMessage_t *rx){
     274:	0f 93       	push	r16
     276:	1f 93       	push	r17
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	8c 01       	movw	r16, r24
     27e:	eb 01       	movw	r28, r22
	if (can_read_message_if_new(rx)){
     280:	cb 01       	movw	r24, r22
     282:	6b d3       	rcall	.+1750   	; 0x95a <can_read_message_if_new>
     284:	88 23       	and	r24, r24
     286:	49 f1       	breq	.+82     	; 0x2da <handle_can+0x66>
		switch (rx->id){
     288:	88 81       	ld	r24, Y
     28a:	99 81       	ldd	r25, Y+1	; 0x01
     28c:	80 32       	cpi	r24, 0x20	; 32
     28e:	22 e0       	ldi	r18, 0x02	; 2
     290:	92 07       	cpc	r25, r18
     292:	f1 f0       	breq	.+60     	; 0x2d0 <handle_can+0x5c>
     294:	20 f4       	brcc	.+8      	; 0x29e <handle_can+0x2a>
     296:	80 31       	cpi	r24, 0x10	; 16
     298:	91 40       	sbci	r25, 0x01	; 1
     29a:	49 f0       	breq	.+18     	; 0x2ae <handle_can+0x3a>
     29c:	1e c0       	rjmp	.+60     	; 0x2da <handle_can+0x66>
     29e:	80 33       	cpi	r24, 0x30	; 48
     2a0:	22 e0       	ldi	r18, 0x02	; 2
     2a2:	92 07       	cpc	r25, r18
     2a4:	61 f0       	breq	.+24     	; 0x2be <handle_can+0x4a>
     2a6:	88 34       	cpi	r24, 0x48	; 72
     2a8:	94 40       	sbci	r25, 0x04	; 4
     2aa:	29 f0       	breq	.+10     	; 0x2b6 <handle_can+0x42>
     2ac:	16 c0       	rjmp	.+44     	; 0x2da <handle_can+0x66>
			case BRAKE_CAN_ID:
				vals->braking = rx->data.u8[0];
     2ae:	8b 81       	ldd	r24, Y+3	; 0x03
     2b0:	f8 01       	movw	r30, r16
     2b2:	85 83       	std	Z+5, r24	; 0x05
				break;
     2b4:	12 c0       	rjmp	.+36     	; 0x2da <handle_can+0x66>
			case BMS_STATUS_CAN_ID:
				vals->BMS_status = rx->data.u8[0];
     2b6:	8b 81       	ldd	r24, Y+3	; 0x03
     2b8:	f8 01       	movw	r30, r16
     2ba:	80 83       	st	Z, r24
				break;
     2bc:	0e c0       	rjmp	.+28     	; 0x2da <handle_can+0x66>
			case STEERING_WHEEL_CAN_ID:
				vals->throttle_cmd = rx->data.u8[3];
     2be:	8e 81       	ldd	r24, Y+6	; 0x06
     2c0:	f8 01       	movw	r30, r16
     2c2:	81 83       	std	Z+1, r24	; 0x01
				vals->restart_overload = rx->data.u8[1] & HORN;
     2c4:	8c 81       	ldd	r24, Y+4	; 0x04
     2c6:	82 70       	andi	r24, 0x02	; 2
     2c8:	82 83       	std	Z+2, r24	; 0x02
				vals->deadman = rx->data.u8[2];
     2ca:	8d 81       	ldd	r24, Y+5	; 0x05
     2cc:	83 87       	std	Z+11, r24	; 0x0b
				break;
     2ce:	05 c0       	rjmp	.+10     	; 0x2da <handle_can+0x66>
			case ENCODER_CAN_ID:
				vals->rpm = rx->data.u16[ENCODER_CHANNEL];
     2d0:	8b 81       	ldd	r24, Y+3	; 0x03
     2d2:	9c 81       	ldd	r25, Y+4	; 0x04
     2d4:	f8 01       	movw	r30, r16
     2d6:	94 83       	std	Z+4, r25	; 0x04
     2d8:	83 83       	std	Z+3, r24	; 0x03
				break;
		}
	}
}
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	1f 91       	pop	r17
     2e0:	0f 91       	pop	r16
     2e2:	08 95       	ret

000002e4 <handle_motor_status_can_msg>:

void handle_motor_status_can_msg(uint8_t *send, ModuleValues_t *vals){
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
	if(*send){
     2e8:	fc 01       	movw	r30, r24
     2ea:	20 81       	ld	r18, Z
     2ec:	22 23       	and	r18, r18
     2ee:	19 f1       	breq	.+70     	; 0x336 <handle_motor_status_can_msg+0x52>
     2f0:	fb 01       	movw	r30, r22
     2f2:	ec 01       	movw	r28, r24
		txFrame.data.u8[0] = vals->motor_status;
     2f4:	a1 ef       	ldi	r26, 0xF1	; 241
     2f6:	b2 e0       	ldi	r27, 0x02	; 2
     2f8:	82 85       	ldd	r24, Z+10	; 0x0a
     2fa:	13 96       	adiw	r26, 0x03	; 3
     2fc:	8c 93       	st	X, r24
     2fe:	13 97       	sbiw	r26, 0x03	; 3
		txFrame.data.u8[1] = vals->throttle_cmd;
     300:	81 81       	ldd	r24, Z+1	; 0x01
     302:	14 96       	adiw	r26, 0x04	; 4
     304:	8c 93       	st	X, r24
     306:	14 97       	sbiw	r26, 0x04	; 4
		txFrame.data.u16[1] = vals->mamp;
     308:	86 81       	ldd	r24, Z+6	; 0x06
     30a:	97 81       	ldd	r25, Z+7	; 0x07
     30c:	16 96       	adiw	r26, 0x06	; 6
     30e:	9c 93       	st	X, r25
     310:	8e 93       	st	-X, r24
     312:	15 97       	sbiw	r26, 0x05	; 5
		txFrame.data.u16[2] = OCR3B;
     314:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
     318:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     31c:	18 96       	adiw	r26, 0x08	; 8
     31e:	9c 93       	st	X, r25
     320:	8e 93       	st	-X, r24
     322:	17 97       	sbiw	r26, 0x07	; 7
		txFrame.data.u16[3] = vals->rpm;
     324:	83 81       	ldd	r24, Z+3	; 0x03
     326:	94 81       	ldd	r25, Z+4	; 0x04
     328:	1a 96       	adiw	r26, 0x0a	; 10
     32a:	9c 93       	st	X, r25
     32c:	8e 93       	st	-X, r24
     32e:	19 97       	sbiw	r26, 0x09	; 9
		
		can_send_message(&txFrame);
     330:	cd 01       	movw	r24, r26
     332:	56 d3       	rcall	.+1708   	; 0x9e0 <can_send_message>
		*send = 0;
     334:	18 82       	st	Y, r1
	}
}
     336:	df 91       	pop	r29
     338:	cf 91       	pop	r28
     33a:	08 95       	ret

0000033c <handle_current_sensor>:
void handle_current_sensor(float *f32_prev_current, uint16_t u16_ADC_reg){ //----------------------------------------------------------------------------TODO test if ok with uint32, otherwise use float
     33c:	0f 93       	push	r16
     33e:	1f 93       	push	r17
     340:	cf 93       	push	r28
     342:	df 93       	push	r29
     344:	00 d0       	rcall	.+0      	; 0x346 <handle_current_sensor+0xa>
     346:	00 d0       	rcall	.+0      	; 0x348 <handle_current_sensor+0xc>
     348:	cd b7       	in	r28, 0x3d	; 61
     34a:	de b7       	in	r29, 0x3e	; 62
     34c:	8c 01       	movw	r16, r24
	
	volatile float f_new_current = ((((float)u16_ADC_reg*3.3/1024) - TRANSDUCER_OFFSET)/TRANSDUCER_SENSIBILITY)/3 ;// /3 because current passes 3x in transducer for more precision.
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	95 d5       	rcall	.+2858   	; 0xe7e <__floatunsisf>
     354:	23 e3       	ldi	r18, 0x33	; 51
     356:	33 e3       	ldi	r19, 0x33	; 51
     358:	43 e5       	ldi	r20, 0x53	; 83
     35a:	50 e4       	ldi	r21, 0x40	; 64
     35c:	46 d6       	rcall	.+3212   	; 0xfea <__mulsf3>
     35e:	20 e0       	ldi	r18, 0x00	; 0
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	40 e8       	ldi	r20, 0x80	; 128
     364:	5a e3       	ldi	r21, 0x3A	; 58
     366:	41 d6       	rcall	.+3202   	; 0xfea <__mulsf3>
     368:	27 ed       	ldi	r18, 0xD7	; 215
     36a:	33 ea       	ldi	r19, 0xA3	; 163
     36c:	40 e1       	ldi	r20, 0x10	; 16
     36e:	50 e4       	ldi	r21, 0x40	; 64
     370:	84 d4       	rcall	.+2312   	; 0xc7a <__subsf3>
     372:	23 ec       	ldi	r18, 0xC3	; 195
     374:	34 e6       	ldi	r19, 0x64	; 100
     376:	4a e2       	ldi	r20, 0x2A	; 42
     378:	5d e3       	ldi	r21, 0x3D	; 61
     37a:	e8 d4       	rcall	.+2512   	; 0xd4c <__divsf3>
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	40 e4       	ldi	r20, 0x40	; 64
     382:	50 e4       	ldi	r21, 0x40	; 64
     384:	e3 d4       	rcall	.+2502   	; 0xd4c <__divsf3>
     386:	69 83       	std	Y+1, r22	; 0x01
     388:	7a 83       	std	Y+2, r23	; 0x02
     38a:	8b 83       	std	Y+3, r24	; 0x03
     38c:	9c 83       	std	Y+4, r25	; 0x04
	f_new_current = (f_new_current+0.11)*1.1 ;// correction of offset and ramp error (conversion + hardware) measured with ampmeter of the power supply : bad
     38e:	69 81       	ldd	r22, Y+1	; 0x01
     390:	7a 81       	ldd	r23, Y+2	; 0x02
     392:	8b 81       	ldd	r24, Y+3	; 0x03
     394:	9c 81       	ldd	r25, Y+4	; 0x04
     396:	2e ea       	ldi	r18, 0xAE	; 174
     398:	37 e4       	ldi	r19, 0x47	; 71
     39a:	41 ee       	ldi	r20, 0xE1	; 225
     39c:	5d e3       	ldi	r21, 0x3D	; 61
     39e:	6e d4       	rcall	.+2268   	; 0xc7c <__addsf3>
     3a0:	2d ec       	ldi	r18, 0xCD	; 205
     3a2:	3c ec       	ldi	r19, 0xCC	; 204
     3a4:	4c e8       	ldi	r20, 0x8C	; 140
     3a6:	5f e3       	ldi	r21, 0x3F	; 63
     3a8:	20 d6       	rcall	.+3136   	; 0xfea <__mulsf3>
     3aa:	69 83       	std	Y+1, r22	; 0x01
     3ac:	7a 83       	std	Y+2, r23	; 0x02
     3ae:	8b 83       	std	Y+3, r24	; 0x03
     3b0:	9c 83       	std	Y+4, r25	; 0x04
	//*f32_prev_current = (*f32_prev_current)*(1-LOWPASS_CONSTANT) + LOWPASS_CONSTANT*f_new_current ;// low pass filter ---------------------TODO test
	*f32_prev_current = f_new_current;
     3b2:	89 81       	ldd	r24, Y+1	; 0x01
     3b4:	9a 81       	ldd	r25, Y+2	; 0x02
     3b6:	ab 81       	ldd	r26, Y+3	; 0x03
     3b8:	bc 81       	ldd	r27, Y+4	; 0x04
     3ba:	f8 01       	movw	r30, r16
     3bc:	80 83       	st	Z, r24
     3be:	91 83       	std	Z+1, r25	; 0x01
     3c0:	a2 83       	std	Z+2, r26	; 0x02
     3c2:	b3 83       	std	Z+3, r27	; 0x03
}
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	0f 90       	pop	r0
     3ca:	0f 90       	pop	r0
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	08 95       	ret

000003d6 <main>:

int main(void)	
{
	cli();
     3d6:	f8 94       	cli
	pid_init(&Current, 0.1, 0.05, 0, 0);
     3d8:	81 2c       	mov	r8, r1
     3da:	91 2c       	mov	r9, r1
     3dc:	54 01       	movw	r10, r8
     3de:	75 01       	movw	r14, r10
     3e0:	64 01       	movw	r12, r8
     3e2:	0d ec       	ldi	r16, 0xCD	; 205
     3e4:	1c ec       	ldi	r17, 0xCC	; 204
     3e6:	2c e4       	ldi	r18, 0x4C	; 76
     3e8:	3d e3       	ldi	r19, 0x3D	; 61
     3ea:	4d ec       	ldi	r20, 0xCD	; 205
     3ec:	5c ec       	ldi	r21, 0xCC	; 204
     3ee:	6c ec       	ldi	r22, 0xCC	; 204
     3f0:	7d e3       	ldi	r23, 0x3D	; 61
     3f2:	89 ed       	ldi	r24, 0xD9	; 217
	usbdbg_init();
     3f4:	92 e0       	ldi	r25, 0x02	; 2
	pwm_init();
     3f6:	1b d1       	rcall	.+566    	; 0x62e <pid_init>
	pwm_set_top_t3(0x319);
     3f8:	2e d4       	rcall	.+2140   	; 0xc56 <usbdbg_init>
     3fa:	70 d3       	rcall	.+1760   	; 0xadc <pwm_init>
     3fc:	89 e1       	ldi	r24, 0x19	; 25
	can_init(0,0);
     3fe:	93 e0       	ldi	r25, 0x03	; 3
     400:	d0 d3       	rcall	.+1952   	; 0xba2 <pwm_set_top_t3>
	timer1_init_ts();
     402:	60 e0       	ldi	r22, 0x00	; 0
     404:	70 e0       	ldi	r23, 0x00	; 0
	timer0_init_ts();
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	90 e0       	ldi	r25, 0x00	; 0
	//ADC
	adc_Free_running_init();
     40a:	52 d2       	rcall	.+1188   	; 0x8b0 <can_init>
	ADMUX &= 0b11100000;
     40c:	06 df       	rcall	.-500    	; 0x21a <timer1_init_ts>
     40e:	1d df       	rcall	.-454    	; 0x24a <timer0_init_ts>
     410:	3a d1       	rcall	.+628    	; 0x686 <adc_Free_running_init>
     412:	ec e7       	ldi	r30, 0x7C	; 124
	ADMUX |= CH_ADC2;
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	80 81       	ld	r24, Z
     418:	80 7e       	andi	r24, 0xE0	; 224
	
	rgbled_init();
     41a:	80 83       	st	Z, r24
     41c:	80 81       	ld	r24, Z
	txFrame.id = MOTOR_CAN_ID;
     41e:	82 60       	ori	r24, 0x02	; 2
     420:	80 83       	st	Z, r24
     422:	c8 d3       	rcall	.+1936   	; 0xbb4 <rgbled_init>
     424:	e1 ef       	ldi	r30, 0xF1	; 241
	txFrame.length = 8;
     426:	f2 e0       	ldi	r31, 0x02	; 2
     428:	80 e5       	ldi	r24, 0x50	; 80
	sei();
	
	// Output pin to turn off DCDC
	DDRB |= (1 << PB3);
	toggle_DCDC(OFF);
     42a:	94 e0       	ldi	r25, 0x04	; 4
     42c:	91 83       	std	Z+1, r25	; 0x01
     42e:	80 83       	st	Z, r24
	
	rgbled_turn_on(LED_BLUE);
     430:	88 e0       	ldi	r24, 0x08	; 8
     432:	82 83       	std	Z+2, r24	; 0x02
	
    while (1){
		
		handle_motor_status_can_msg(&send_can, &ComValues);
     434:	78 94       	sei
     436:	23 9a       	sbi	0x04, 3	; 4
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	16 df       	rcall	.-468    	; 0x268 <toggle_DCDC>
     43c:	80 e8       	ldi	r24, 0x80	; 128
		handle_can(&ComValues, &rxFrame);
     43e:	c0 d3       	rcall	.+1920   	; 0xbc0 <rgbled_turn_on>
     440:	6e e0       	ldi	r22, 0x0E	; 14
     442:	71 e0       	ldi	r23, 0x01	; 1
     444:	83 e2       	ldi	r24, 0x23	; 35
     446:	91 e0       	ldi	r25, 0x01	; 1
		
	
		//simple mode with pwm controlled by potentiometer /
	
		pot_val = (float)u16_ADC2_reg/1024 ;
     448:	4d df       	rcall	.-358    	; 0x2e4 <handle_motor_status_can_msg>
     44a:	6e ec       	ldi	r22, 0xCE	; 206
     44c:	72 e0       	ldi	r23, 0x02	; 2
     44e:	8e e0       	ldi	r24, 0x0E	; 14
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	10 df       	rcall	.-480    	; 0x274 <handle_can>
     454:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <u16_ADC2_reg>
     458:	70 91 22 01 	lds	r23, 0x0122	; 0x800122 <u16_ADC2_reg+0x1>
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e d5       	rcall	.+2588   	; 0xe7e <__floatunsisf>
     462:	20 e0       	ldi	r18, 0x00	; 0
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	40 e8       	ldi	r20, 0x80	; 128
     468:	5a e3       	ldi	r21, 0x3A	; 58
     46a:	bf d5       	rcall	.+2942   	; 0xfea <__mulsf3>
     46c:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <pot_val>
     470:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <pot_val+0x1>
     474:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <pot_val+0x2>
     478:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <pot_val+0x3>
     47c:	e1 cf       	rjmp	.-62     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>

0000047e <__vector_12>:
		
		
	}
}

ISR(TIMER1_COMPA_vect){
     47e:	1f 92       	push	r1
     480:	0f 92       	push	r0
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	0f 92       	push	r0
     486:	11 24       	eor	r1, r1
     488:	0b b6       	in	r0, 0x3b	; 59
     48a:	0f 92       	push	r0
     48c:	2f 93       	push	r18
     48e:	3f 93       	push	r19
     490:	4f 93       	push	r20
     492:	5f 93       	push	r21
     494:	6f 93       	push	r22
     496:	7f 93       	push	r23
     498:	8f 93       	push	r24
     49a:	9f 93       	push	r25
     49c:	af 93       	push	r26
     49e:	bf 93       	push	r27
     4a0:	ef 93       	push	r30
     4a2:	ff 93       	push	r31
	send_can = 1;
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <send_can>
	read_current = 1;
	handle_current_sensor(&f32_prev_current, u16_ADC3_reg);
     4aa:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <u16_ADC3_reg>
     4ae:	70 91 20 01 	lds	r23, 0x0120	; 0x800120 <u16_ADC3_reg+0x1>
     4b2:	84 e2       	ldi	r24, 0x24	; 36
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	42 df       	rcall	.-380    	; 0x33c <handle_current_sensor>
	
}
     4b8:	ff 91       	pop	r31
     4ba:	ef 91       	pop	r30
     4bc:	bf 91       	pop	r27
     4be:	af 91       	pop	r26
     4c0:	9f 91       	pop	r25
     4c2:	8f 91       	pop	r24
     4c4:	7f 91       	pop	r23
     4c6:	6f 91       	pop	r22
     4c8:	5f 91       	pop	r21
     4ca:	4f 91       	pop	r20
     4cc:	3f 91       	pop	r19
     4ce:	2f 91       	pop	r18
     4d0:	0f 90       	pop	r0
     4d2:	0b be       	out	0x3b, r0	; 59
     4d4:	0f 90       	pop	r0
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	0f 90       	pop	r0
     4da:	1f 90       	pop	r1
     4dc:	18 95       	reti

000004de <__vector_16>:

ISR(TIMER0_COMP_vect){ // every 10ms
     4de:	1f 92       	push	r1
     4e0:	0f 92       	push	r0
     4e2:	0f b6       	in	r0, 0x3f	; 63
     4e4:	0f 92       	push	r0
     4e6:	11 24       	eor	r1, r1
     4e8:	0b b6       	in	r0, 0x3b	; 59
     4ea:	0f 92       	push	r0
     4ec:	cf 92       	push	r12
     4ee:	df 92       	push	r13
     4f0:	ef 92       	push	r14
     4f2:	ff 92       	push	r15
     4f4:	2f 93       	push	r18
     4f6:	3f 93       	push	r19
     4f8:	4f 93       	push	r20
     4fa:	5f 93       	push	r21
     4fc:	6f 93       	push	r22
     4fe:	7f 93       	push	r23
     500:	8f 93       	push	r24
     502:	9f 93       	push	r25
     504:	af 93       	push	r26
     506:	bf 93       	push	r27
     508:	ef 93       	push	r30
     50a:	ff 93       	push	r31
	controller(pot_val*5, f32_prev_current); // current from 0 to 5A
     50c:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <pot_val>
     510:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <pot_val+0x1>
     514:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <pot_val+0x2>
     518:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <pot_val+0x3>
     51c:	c0 90 24 01 	lds	r12, 0x0124	; 0x800124 <f32_prev_current>
     520:	d0 90 25 01 	lds	r13, 0x0125	; 0x800125 <f32_prev_current+0x1>
     524:	e0 90 26 01 	lds	r14, 0x0126	; 0x800126 <f32_prev_current+0x2>
     528:	f0 90 27 01 	lds	r15, 0x0127	; 0x800127 <f32_prev_current+0x3>
     52c:	20 e0       	ldi	r18, 0x00	; 0
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	40 ea       	ldi	r20, 0xA0	; 160
     532:	50 e4       	ldi	r21, 0x40	; 64
     534:	5a d5       	rcall	.+2740   	; 0xfea <__mulsf3>
     536:	a7 01       	movw	r20, r14
     538:	96 01       	movw	r18, r12
     53a:	cb dd       	rcall	.-1130   	; 0xd2 <controller>
}
     53c:	ff 91       	pop	r31
     53e:	ef 91       	pop	r30
     540:	bf 91       	pop	r27
     542:	af 91       	pop	r26
     544:	9f 91       	pop	r25
     546:	8f 91       	pop	r24
     548:	7f 91       	pop	r23
     54a:	6f 91       	pop	r22
     54c:	5f 91       	pop	r21
     54e:	4f 91       	pop	r20
     550:	3f 91       	pop	r19
     552:	2f 91       	pop	r18
     554:	ff 90       	pop	r15
     556:	ef 90       	pop	r14
     558:	df 90       	pop	r13
     55a:	cf 90       	pop	r12
     55c:	0f 90       	pop	r0
     55e:	0b be       	out	0x3b, r0	; 59
     560:	0f 90       	pop	r0
     562:	0f be       	out	0x3f, r0	; 63
     564:	0f 90       	pop	r0
     566:	1f 90       	pop	r1
     568:	18 95       	reti

0000056a <__vector_25>:


ISR(ADC_vect)
{
     56a:	1f 92       	push	r1
     56c:	0f 92       	push	r0
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	0f 92       	push	r0
     572:	11 24       	eor	r1, r1
     574:	0b b6       	in	r0, 0x3b	; 59
     576:	0f 92       	push	r0
     578:	2f 93       	push	r18
     57a:	3f 93       	push	r19
     57c:	4f 93       	push	r20
     57e:	5f 93       	push	r21
     580:	6f 93       	push	r22
     582:	7f 93       	push	r23
     584:	8f 93       	push	r24
     586:	9f 93       	push	r25
     588:	af 93       	push	r26
     58a:	bf 93       	push	r27
     58c:	ef 93       	push	r30
     58e:	ff 93       	push	r31
	if (u8_ADC_mux == 3)
     590:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <u8_ADC_mux>
     594:	83 30       	cpi	r24, 0x03	; 3
     596:	89 f4       	brne	.+34     	; 0x5ba <__vector_25+0x50>
	{
		u16_ADC3_reg = (ADCL+(ADCH<<8)); // reading conversion result
     598:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     59c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	98 2f       	mov	r25, r24
     5a4:	88 27       	eor	r24, r24
     5a6:	82 0f       	add	r24, r18
     5a8:	91 1d       	adc	r25, r1
     5aa:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <u16_ADC3_reg+0x1>
     5ae:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <u16_ADC3_reg>
		u8_ADC_mux = 0;
     5b2:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <u8_ADC_mux>
	if (u8_ADC_mux == 2)
	{
		Set_ADC_Channel(CH_ADC3);
		u8_ADC_mux++ ;
	}
	if (u8_ADC_mux == 1)
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	1e c0       	rjmp	.+60     	; 0x5f6 <__vector_25+0x8c>
	if (u8_ADC_mux == 3)
	{
		u16_ADC3_reg = (ADCL+(ADCH<<8)); // reading conversion result
		u8_ADC_mux = 0;
	}
	if (u8_ADC_mux == 2)
     5ba:	82 30       	cpi	r24, 0x02	; 2
     5bc:	39 f4       	brne	.+14     	; 0x5cc <__vector_25+0x62>
	{
		Set_ADC_Channel(CH_ADC3);
     5be:	83 e0       	ldi	r24, 0x03	; 3
     5c0:	7e d0       	rcall	.+252    	; 0x6be <Set_ADC_Channel>
		u8_ADC_mux++ ;
     5c2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <u8_ADC_mux>
     5c6:	8f 5f       	subi	r24, 0xFF	; 255
     5c8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <u8_ADC_mux>
	}
	if (u8_ADC_mux == 1)
     5cc:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <u8_ADC_mux>
     5d0:	81 30       	cpi	r24, 0x01	; 1
     5d2:	89 f4       	brne	.+34     	; 0x5f6 <__vector_25+0x8c>
	{
		u16_ADC2_reg = (ADCL+(ADCH<<8)); // reading conversion result
     5d4:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     5d8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	98 2f       	mov	r25, r24
     5e0:	88 27       	eor	r24, r24
     5e2:	82 0f       	add	r24, r18
     5e4:	91 1d       	adc	r25, r1
     5e6:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <u16_ADC2_reg+0x1>
     5ea:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <u16_ADC2_reg>
		u8_ADC_mux++ ;
     5ee:	82 e0       	ldi	r24, 0x02	; 2
     5f0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <u8_ADC_mux>
     5f4:	09 c0       	rjmp	.+18     	; 0x608 <__vector_25+0x9e>
	}
	if (u8_ADC_mux == 0)
     5f6:	81 11       	cpse	r24, r1
	{
		Set_ADC_Channel(CH_ADC2);
     5f8:	07 c0       	rjmp	.+14     	; 0x608 <__vector_25+0x9e>
     5fa:	82 e0       	ldi	r24, 0x02	; 2
		u8_ADC_mux++ ;
     5fc:	60 d0       	rcall	.+192    	; 0x6be <Set_ADC_Channel>
     5fe:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <u8_ADC_mux>
     602:	8f 5f       	subi	r24, 0xFF	; 255
     604:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <u8_ADC_mux>
	}
}
     608:	ff 91       	pop	r31
     60a:	ef 91       	pop	r30
     60c:	bf 91       	pop	r27
     60e:	af 91       	pop	r26
     610:	9f 91       	pop	r25
     612:	8f 91       	pop	r24
     614:	7f 91       	pop	r23
     616:	6f 91       	pop	r22
     618:	5f 91       	pop	r21
     61a:	4f 91       	pop	r20
     61c:	3f 91       	pop	r19
     61e:	2f 91       	pop	r18
     620:	0f 90       	pop	r0
     622:	0b be       	out	0x3b, r0	; 59
     624:	0f 90       	pop	r0
     626:	0f be       	out	0x3f, r0	; 63
     628:	0f 90       	pop	r0
     62a:	1f 90       	pop	r1
     62c:	18 95       	reti

0000062e <pid_init>:
	output = propGain + intGain + derGain;
	//printf("Out: %d \n", output);
	return output;
}

void pid_init(Pid_t *PID, float t, float p, float i, float d){
     62e:	8f 92       	push	r8
     630:	9f 92       	push	r9
     632:	af 92       	push	r10
     634:	bf 92       	push	r11
     636:	cf 92       	push	r12
     638:	df 92       	push	r13
     63a:	ef 92       	push	r14
     63c:	ff 92       	push	r15
     63e:	0f 93       	push	r16
     640:	1f 93       	push	r17
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	cd b7       	in	r28, 0x3d	; 61
     648:	de b7       	in	r29, 0x3e	; 62
     64a:	fc 01       	movw	r30, r24
	PID->Kp = p;
     64c:	04 87       	std	Z+12, r16	; 0x0c
     64e:	15 87       	std	Z+13, r17	; 0x0d
     650:	26 87       	std	Z+14, r18	; 0x0e
     652:	37 87       	std	Z+15, r19	; 0x0f
	PID->Ki = i;
     654:	c4 8a       	std	Z+20, r12	; 0x14
     656:	d5 8a       	std	Z+21, r13	; 0x15
     658:	e6 8a       	std	Z+22, r14	; 0x16
     65a:	f7 8a       	std	Z+23, r15	; 0x17
	PID->Kd = d;
     65c:	80 8a       	std	Z+16, r8	; 0x10
     65e:	91 8a       	std	Z+17, r9	; 0x11
     660:	a2 8a       	std	Z+18, r10	; 0x12
     662:	b3 8a       	std	Z+19, r11	; 0x13
	PID->timeStep = t;
     664:	40 87       	std	Z+8, r20	; 0x08
     666:	51 87       	std	Z+9, r21	; 0x09
     668:	62 87       	std	Z+10, r22	; 0x0a
     66a:	73 87       	std	Z+11, r23	; 0x0b
     66c:	df 91       	pop	r29
     66e:	cf 91       	pop	r28
     670:	1f 91       	pop	r17
     672:	0f 91       	pop	r16
     674:	ff 90       	pop	r15
     676:	ef 90       	pop	r14
     678:	df 90       	pop	r13
     67a:	cf 90       	pop	r12
     67c:	bf 90       	pop	r11
     67e:	af 90       	pop	r10
     680:	9f 90       	pop	r9
     682:	8f 90       	pop	r8
     684:	08 95       	ret

00000686 <adc_Free_running_init>:
	//Setting channel and type of reading, see enum in adc.h
	ADMUX &= 0b11100000;
	ADMUX |= (int8_t)channel;

	return (ADCL+(ADCH<<8));
}
     686:	ec e7       	ldi	r30, 0x7C	; 124
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	80 81       	ld	r24, Z
     68c:	80 64       	ori	r24, 0x40	; 64
     68e:	80 83       	st	Z, r24
     690:	ea e7       	ldi	r30, 0x7A	; 122
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	80 81       	ld	r24, Z
     696:	84 60       	ori	r24, 0x04	; 4
     698:	80 83       	st	Z, r24
     69a:	80 81       	ld	r24, Z
     69c:	80 62       	ori	r24, 0x20	; 32
     69e:	80 83       	st	Z, r24
     6a0:	80 81       	ld	r24, Z
     6a2:	88 60       	ori	r24, 0x08	; 8
     6a4:	80 83       	st	Z, r24
     6a6:	ab e7       	ldi	r26, 0x7B	; 123
     6a8:	b0 e0       	ldi	r27, 0x00	; 0
     6aa:	8c 91       	ld	r24, X
     6ac:	88 7f       	andi	r24, 0xF8	; 248
     6ae:	8c 93       	st	X, r24
     6b0:	80 81       	ld	r24, Z
     6b2:	80 68       	ori	r24, 0x80	; 128
     6b4:	80 83       	st	Z, r24
     6b6:	80 81       	ld	r24, Z
     6b8:	80 64       	ori	r24, 0x40	; 64
     6ba:	80 83       	st	Z, r24
     6bc:	08 95       	ret

000006be <Set_ADC_Channel>:

void Set_ADC_Channel(adc_channel_t channel)
{
	channel &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|channel; // clears the bottom 3 bits before ORing
     6be:	ec e7       	ldi	r30, 0x7C	; 124
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	90 81       	ld	r25, Z
     6c4:	98 7f       	andi	r25, 0xF8	; 248
     6c6:	87 70       	andi	r24, 0x07	; 7
     6c8:	89 2b       	or	r24, r25
     6ca:	80 83       	st	Z, r24
     6cc:	08 95       	ret

000006ce <__vector_18>:

/**************************************************************************************************
*   CAN ISR - See 'can.h' Header file for Description
**************************************************************************************************/
ISR(CANIT_vect)
{
     6ce:	1f 92       	push	r1
     6d0:	0f 92       	push	r0
     6d2:	0f b6       	in	r0, 0x3f	; 63
     6d4:	0f 92       	push	r0
     6d6:	11 24       	eor	r1, r1
     6d8:	0b b6       	in	r0, 0x3b	; 59
     6da:	0f 92       	push	r0
     6dc:	2f 93       	push	r18
     6de:	3f 93       	push	r19
     6e0:	4f 93       	push	r20
     6e2:	5f 93       	push	r21
     6e4:	6f 93       	push	r22
     6e6:	8f 93       	push	r24
     6e8:	9f 93       	push	r25
     6ea:	af 93       	push	r26
     6ec:	bf 93       	push	r27
     6ee:	ef 93       	push	r30
     6f0:	ff 93       	push	r31
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
     6f6:	1f 92       	push	r1
     6f8:	cd b7       	in	r28, 0x3d	; 61
     6fa:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t mob_status;

	uint8_t mob_interrupts = CANSIT2;
     6fc:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>

	// TX
	if ((mob_interrupts & (1 << SIT0)) && (CANIE2 & (1 << ENMOB0))) {
     700:	80 ff       	sbrs	r24, 0
     702:	47 c0       	rjmp	.+142    	; 0x792 <__vector_18+0xc4>
     704:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     708:	90 ff       	sbrs	r25, 0
     70a:	43 c0       	rjmp	.+134    	; 0x792 <__vector_18+0xc4>
		CANPAGE = (0x0 << MOBNB0); //Select TX Mob (Mob0)
     70c:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		mob_status = CANSTMOB;
     710:	ee ee       	ldi	r30, 0xEE	; 238
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	80 81       	ld	r24, Z
     716:	89 83       	std	Y+1, r24	; 0x01
		CANSTMOB &= ~(1 << TXOK); //clear MB1, TX interrupt
     718:	80 81       	ld	r24, Z
     71a:	8f 7b       	andi	r24, 0xBF	; 191
     71c:	80 83       	st	Z, r24

		if (tx_on != tx_off) {
     71e:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <tx_off>
     722:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <tx_on>
     726:	98 17       	cp	r25, r24
     728:	89 f1       	breq	.+98     	; 0x78c <__vector_18+0xbe>
			unsigned char pos;
			pos = tx_off & (TX_SIZE-1);
			//set ID
			CANIDT4 = tx_frames[pos].array[0];
     72a:	8f 70       	andi	r24, 0x0F	; 15
     72c:	2b e0       	ldi	r18, 0x0B	; 11
     72e:	82 9f       	mul	r24, r18
     730:	c0 01       	movw	r24, r0
     732:	11 24       	eor	r1, r1
     734:	fc 01       	movw	r30, r24
     736:	e2 52       	subi	r30, 0x22	; 34
     738:	fe 4f       	sbci	r31, 0xFE	; 254
     73a:	20 81       	ld	r18, Z
     73c:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			CANIDT2 = tx_frames[pos].array[0];
     740:	20 81       	ld	r18, Z
     742:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			CANIDT1 = tx_frames[pos].array[1];
     746:	21 81       	ldd	r18, Z+1	; 0x01
     748:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

			//program data registers - auto increment CANMSG
			CANMSG = tx_frames[pos].data[0];
     74c:	23 81       	ldd	r18, Z+3	; 0x03
     74e:	aa ef       	ldi	r26, 0xFA	; 250
     750:	b0 e0       	ldi	r27, 0x00	; 0
     752:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[1];
     754:	24 81       	ldd	r18, Z+4	; 0x04
     756:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[2];
     758:	25 81       	ldd	r18, Z+5	; 0x05
     75a:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[3];
     75c:	26 81       	ldd	r18, Z+6	; 0x06
     75e:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[4];
     760:	27 81       	ldd	r18, Z+7	; 0x07
     762:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[5];
     764:	20 85       	ldd	r18, Z+8	; 0x08
     766:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[6];
     768:	21 85       	ldd	r18, Z+9	; 0x09
     76a:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[7];
     76c:	22 85       	ldd	r18, Z+10	; 0x0a
     76e:	2c 93       	st	X, r18

			//set length and request send
			CANCDMOB = (1 << CONMOB0) | tx_frames[pos].length;
     770:	fc 01       	movw	r30, r24
     772:	e0 52       	subi	r30, 0x20	; 32
     774:	fe 4f       	sbci	r31, 0xFE	; 254
     776:	80 81       	ld	r24, Z
     778:	8f 70       	andi	r24, 0x0F	; 15
     77a:	80 64       	ori	r24, 0x40	; 64
     77c:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
			tx_off++;
     780:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <tx_off>
     784:	8f 5f       	subi	r24, 0xFF	; 255
     786:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <tx_off>
     78a:	7d c0       	rjmp	.+250    	; 0x886 <__vector_18+0x1b8>
		} else {
			tx_busy = 0;
     78c:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <tx_busy>
     790:	7a c0       	rjmp	.+244    	; 0x886 <__vector_18+0x1b8>
		}
	}
	// RX
	else if ((mob_interrupts & (1 << SIT1)) && (CANIE2 & (1 << ENMOB1))) {
     792:	81 ff       	sbrs	r24, 1
     794:	78 c0       	rjmp	.+240    	; 0x886 <__vector_18+0x1b8>
     796:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     79a:	81 ff       	sbrs	r24, 1
     79c:	74 c0       	rjmp	.+232    	; 0x886 <__vector_18+0x1b8>
		//Select RX Mob (Mob1)
		CANPAGE = (0x1 << MOBNB0);
     79e:	80 e1       	ldi	r24, 0x10	; 16
     7a0:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		if (((rx_on - rx_off) & RX_ABS_MASK) < RX_SIZE) {
     7a4:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <rx_on>
     7a8:	28 2f       	mov	r18, r24
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <rx_off>
     7b0:	29 1b       	sub	r18, r25
     7b2:	31 09       	sbc	r19, r1
     7b4:	2f 77       	andi	r18, 0x7F	; 127
     7b6:	33 27       	eor	r19, r19
     7b8:	20 31       	cpi	r18, 0x10	; 16
     7ba:	31 05       	cpc	r19, r1
     7bc:	0c f0       	brlt	.+2      	; 0x7c0 <__vector_18+0xf2>
     7be:	58 c0       	rjmp	.+176    	; 0x870 <__vector_18+0x1a2>
			unsigned char pos;
			pos = rx_on & (RX_SIZE-1);
			//Read length
			rx_frames[pos].length = CANCDMOB & 0x0F;
     7c0:	e8 2f       	mov	r30, r24
     7c2:	ef 70       	andi	r30, 0x0F	; 15
     7c4:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     7c8:	2e 2f       	mov	r18, r30
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	4b e0       	ldi	r20, 0x0B	; 11
     7ce:	e4 9f       	mul	r30, r20
     7d0:	f0 01       	movw	r30, r0
     7d2:	11 24       	eor	r1, r1
     7d4:	e2 5d       	subi	r30, 0xD2	; 210
     7d6:	fe 4f       	sbci	r31, 0xFE	; 254
     7d8:	9f 70       	andi	r25, 0x0F	; 15
     7da:	42 81       	ldd	r20, Z+2	; 0x02
     7dc:	40 7f       	andi	r20, 0xF0	; 240
     7de:	94 2b       	or	r25, r20
     7e0:	92 83       	std	Z+2, r25	; 0x02
			//Read ID
			rx_frames[pos].array[0] = (CANIDT2 & 0xE0) | (CANIDT4 & 0x07);
     7e2:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     7e6:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     7ea:	40 7e       	andi	r20, 0xE0	; 224
     7ec:	97 70       	andi	r25, 0x07	; 7
     7ee:	94 2b       	or	r25, r20
     7f0:	90 83       	st	Z, r25
			rx_frames[pos].array[1] = CANIDT1;
     7f2:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     7f6:	91 83       	std	Z+1, r25	; 0x01

			//read data registers - auto increment CANMSG
			rx_frames[pos].data[0] = CANMSG;
     7f8:	aa ef       	ldi	r26, 0xFA	; 250
     7fa:	b0 e0       	ldi	r27, 0x00	; 0
     7fc:	9c 91       	ld	r25, X
     7fe:	93 83       	std	Z+3, r25	; 0x03
			rx_frames[pos].data[1] = CANMSG;
     800:	9c 91       	ld	r25, X
     802:	94 83       	std	Z+4, r25	; 0x04
			rx_frames[pos].data[2] = CANMSG;
     804:	9c 91       	ld	r25, X
     806:	95 83       	std	Z+5, r25	; 0x05
			rx_frames[pos].data[3] = CANMSG;
     808:	9c 91       	ld	r25, X
     80a:	96 83       	std	Z+6, r25	; 0x06
			rx_frames[pos].data[4] = CANMSG;
     80c:	9c 91       	ld	r25, X
     80e:	97 83       	std	Z+7, r25	; 0x07
			rx_frames[pos].data[5] = CANMSG;
     810:	9c 91       	ld	r25, X
     812:	90 87       	std	Z+8, r25	; 0x08
			rx_frames[pos].data[6] = CANMSG;
     814:	9c 91       	ld	r25, X
     816:	91 87       	std	Z+9, r25	; 0x09
			rx_frames[pos].data[7] = CANMSG;
     818:	9c 91       	ld	r25, X
     81a:	92 87       	std	Z+10, r25	; 0x0a
			rx_on++;
     81c:	8f 5f       	subi	r24, 0xFF	; 255
     81e:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <rx_on>

			// Reset if reset can message
			if(rx_frames[pos].id == 0x000 && rx_frames[pos].data[0] == 0x03){
     822:	40 81       	ld	r20, Z
     824:	42 95       	swap	r20
     826:	46 95       	lsr	r20
     828:	47 70       	andi	r20, 0x07	; 7
     82a:	51 81       	ldd	r21, Z+1	; 0x01
     82c:	65 2f       	mov	r22, r21
     82e:	66 0f       	add	r22, r22
     830:	66 0f       	add	r22, r22
     832:	66 0f       	add	r22, r22
     834:	86 2f       	mov	r24, r22
     836:	84 2b       	or	r24, r20
     838:	95 2f       	mov	r25, r21
     83a:	92 95       	swap	r25
     83c:	96 95       	lsr	r25
     83e:	97 70       	andi	r25, 0x07	; 7
     840:	89 2b       	or	r24, r25
     842:	b1 f4       	brne	.+44     	; 0x870 <__vector_18+0x1a2>
     844:	8b e0       	ldi	r24, 0x0B	; 11
     846:	82 9f       	mul	r24, r18
     848:	f0 01       	movw	r30, r0
     84a:	83 9f       	mul	r24, r19
     84c:	f0 0d       	add	r31, r0
     84e:	11 24       	eor	r1, r1
     850:	e2 5d       	subi	r30, 0xD2	; 210
     852:	fe 4f       	sbci	r31, 0xFE	; 254
     854:	83 81       	ldd	r24, Z+3	; 0x03
     856:	83 30       	cpi	r24, 0x03	; 3
     858:	59 f4       	brne	.+22     	; 0x870 <__vector_18+0x1a2>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     85a:	98 e0       	ldi	r25, 0x08	; 8
     85c:	88 e1       	ldi	r24, 0x18	; 24
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	f8 94       	cli
     862:	a8 95       	wdr
     864:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     868:	0f be       	out	0x3f, r0	; 63
     86a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     86e:	ff cf       	rjmp	.-2      	; 0x86e <__vector_18+0x1a0>
				while(1); //wait for watchdog
			}
		}

		// Clear irq
		mob_status = CANSTMOB;
     870:	ee ee       	ldi	r30, 0xEE	; 238
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	80 81       	ld	r24, Z
     876:	89 83       	std	Y+1, r24	; 0x01
		(void)mob_status;
     878:	89 81       	ldd	r24, Y+1	; 0x01

		CANSTMOB &= ~(1 << RXOK);
     87a:	80 81       	ld	r24, Z
     87c:	8f 7d       	andi	r24, 0xDF	; 223
     87e:	80 83       	st	Z, r24
		CANCDMOB = (1 << CONMOB1);			//Set Mob 1 as RX
     880:	80 e8       	ldi	r24, 0x80	; 128
     882:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	}
}
     886:	0f 90       	pop	r0
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	ff 91       	pop	r31
     88e:	ef 91       	pop	r30
     890:	bf 91       	pop	r27
     892:	af 91       	pop	r26
     894:	9f 91       	pop	r25
     896:	8f 91       	pop	r24
     898:	6f 91       	pop	r22
     89a:	5f 91       	pop	r21
     89c:	4f 91       	pop	r20
     89e:	3f 91       	pop	r19
     8a0:	2f 91       	pop	r18
     8a2:	0f 90       	pop	r0
     8a4:	0b be       	out	0x3b, r0	; 59
     8a6:	0f 90       	pop	r0
     8a8:	0f be       	out	0x3f, r0	; 63
     8aa:	0f 90       	pop	r0
     8ac:	1f 90       	pop	r1
     8ae:	18 95       	reti

000008b0 <can_init>:


void can_init(uint16_t accept_mask_id, uint16_t accept_tag_id) {
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
	// Reset CAN controller
	CANGCON = (1 << SWRES);
     8b4:	e8 ed       	ldi	r30, 0xD8	; 216
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	21 e0       	ldi	r18, 0x01	; 1
     8ba:	20 83       	st	Z, r18

	CANBT1 = (BRP_VALUE - 1) << 1;
     8bc:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = ((SJW_VALUE - 1) << 5) | ((PROP_SEG - 1) << 1);
     8c0:	2c e0       	ldi	r18, 0x0C	; 12
     8c2:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = ((PHASE_SEG_2 - 1) << 4) | ((PHASE_SEG_1 - 1) << 1) | 1;
     8c6:	27 e3       	ldi	r18, 0x37	; 55
     8c8:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	CANTIM = 0;
     8cc:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
     8d0:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	CANTTC = 0;
     8d4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     8d8:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	CANHPMOB = 0;
     8dc:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	CANTCON = 0;
     8e0:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	// Switch to Mob 0 access
	CANPAGE = (0x0 << MOBNB0);
     8e4:	cd ee       	ldi	r28, 0xED	; 237
     8e6:	d0 e0       	ldi	r29, 0x00	; 0
     8e8:	18 82       	st	Y, r1
	CANSTMOB = 0;
     8ea:	ae ee       	ldi	r26, 0xEE	; 238
     8ec:	b0 e0       	ldi	r27, 0x00	; 0
     8ee:	1c 92       	st	X, r1

	// Switch to Mob 1 access
	CANPAGE = (0x1 << MOBNB0);
     8f0:	20 e1       	ldi	r18, 0x10	; 16
     8f2:	28 83       	st	Y, r18
	CANSTMOB = 0;
     8f4:	1c 92       	st	X, r1
	CANIDM4 = 0;
     8f6:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANIDM2 = (accept_mask_id << 5) & 0xFF;
     8fa:	28 2f       	mov	r18, r24
     8fc:	22 95       	swap	r18
     8fe:	22 0f       	add	r18, r18
     900:	20 7e       	andi	r18, 0xE0	; 224
     902:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = (accept_mask_id >> 3) & 0xFF;
     906:	96 95       	lsr	r25
     908:	87 95       	ror	r24
     90a:	96 95       	lsr	r25
     90c:	87 95       	ror	r24
     90e:	96 95       	lsr	r25
     910:	87 95       	ror	r24
     912:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDT4 = 0;
     916:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT2 = (accept_tag_id << 5) & 0xFF;
     91a:	86 2f       	mov	r24, r22
     91c:	82 95       	swap	r24
     91e:	88 0f       	add	r24, r24
     920:	80 7e       	andi	r24, 0xE0	; 224
     922:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (accept_tag_id >> 3) & 0xFF;
     926:	76 95       	lsr	r23
     928:	67 95       	ror	r22
     92a:	76 95       	lsr	r23
     92c:	67 95       	ror	r22
     92e:	76 95       	lsr	r23
     930:	67 95       	ror	r22
     932:	60 93 f3 00 	sts	0x00F3, r22	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

	// Set Mob 1 as RX
	CANCDMOB = (1 << CONMOB1);
     936:	80 e8       	ldi	r24, 0x80	; 128
     938:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	// Enable Mob 0 and 1
	CANEN2 = (1 << ENMOB1) | (1 << ENMOB0);
     93c:	83 e0       	ldi	r24, 0x03	; 3
     93e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	// Enable Mob 0 and 1 Interrupt
	CANIE2 = (1 << ENMOB1) | (1 << ENMOB0);
     942:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	// Enable TX and RX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);	
     946:	80 eb       	ldi	r24, 0xB0	; 176
     948:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>

	// Enable CAN controller
	CANGCON = (1 << ENASTB);
     94c:	82 e0       	ldi	r24, 0x02	; 2
     94e:	80 83       	st	Z, r24

	reset = 0;
     950:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <reset>
}
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	08 95       	ret

0000095a <can_read_message_if_new>:

bool can_read_message_if_new(CanMessage_t* message) {
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	ec 01       	movw	r28, r24
	// Check if there is a new message
	if (rx_on == rx_off) {
     960:	40 91 2a 01 	lds	r20, 0x012A	; 0x80012a <rx_off>
     964:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <rx_on>
     968:	24 17       	cp	r18, r20
     96a:	89 f1       	breq	.+98     	; 0x9ce <can_read_message_if_new+0x74>
     96c:	a4 2f       	mov	r26, r20
     96e:	af 70       	andi	r26, 0x0F	; 15
	}

	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
     970:	8b e0       	ldi	r24, 0x0B	; 11
     972:	a8 9f       	mul	r26, r24
     974:	b0 01       	movw	r22, r0
     976:	11 24       	eor	r1, r1
     978:	fb 01       	movw	r30, r22
     97a:	e2 5d       	subi	r30, 0xD2	; 210
     97c:	fe 4f       	sbci	r31, 0xFE	; 254
     97e:	20 81       	ld	r18, Z
     980:	22 95       	swap	r18
     982:	26 95       	lsr	r18
     984:	27 70       	andi	r18, 0x07	; 7
     986:	31 81       	ldd	r19, Z+1	; 0x01
     988:	53 2f       	mov	r21, r19
     98a:	55 0f       	add	r21, r21
     98c:	55 0f       	add	r21, r21
     98e:	55 0f       	add	r21, r21
     990:	25 2b       	or	r18, r21
     992:	32 95       	swap	r19
     994:	36 95       	lsr	r19
     996:	37 70       	andi	r19, 0x07	; 7
     998:	28 83       	st	Y, r18
     99a:	39 83       	std	Y+1, r19	; 0x01
	message->length = frame->length;
     99c:	fb 01       	movw	r30, r22
     99e:	e0 5d       	subi	r30, 0xD0	; 208
     9a0:	fe 4f       	sbci	r31, 0xFE	; 254
     9a2:	20 81       	ld	r18, Z
     9a4:	2f 70       	andi	r18, 0x0F	; 15
     9a6:	2a 83       	std	Y+2, r18	; 0x02
	for (int i = 0; i < message->length; i++) {
     9a8:	22 23       	and	r18, r18
     9aa:	99 f0       	breq	.+38     	; 0x9d2 <can_read_message_if_new+0x78>
     9ac:	db 01       	movw	r26, r22
     9ae:	af 5c       	subi	r26, 0xCF	; 207
     9b0:	be 4f       	sbci	r27, 0xFE	; 254
     9b2:	fe 01       	movw	r30, r28
     9b4:	33 96       	adiw	r30, 0x03	; 3
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	2d 5f       	subi	r18, 0xFD	; 253
     9ba:	3f 4f       	sbci	r19, 0xFF	; 255
     9bc:	ce 01       	movw	r24, r28
     9be:	82 0f       	add	r24, r18
     9c0:	93 1f       	adc	r25, r19
		message->data.u8[i] = frame->data[i];
     9c2:	2d 91       	ld	r18, X+
     9c4:	21 93       	st	Z+, r18
	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
	message->length = frame->length;
	for (int i = 0; i < message->length; i++) {
     9c6:	e8 17       	cp	r30, r24
     9c8:	f9 07       	cpc	r31, r25
     9ca:	d9 f7       	brne	.-10     	; 0x9c2 <can_read_message_if_new+0x68>
     9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <can_read_message_if_new+0x78>
}

bool can_read_message_if_new(CanMessage_t* message) {
	// Check if there is a new message
	if (rx_on == rx_off) {
		return false;
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <can_read_message_if_new+0x80>
		message->data.u8[i] = frame->data[i];
	}

	// Advance to next can message
	if (rx_on != rx_off) {
		rx_off++;
     9d2:	4f 5f       	subi	r20, 0xFF	; 255
     9d4:	40 93 2a 01 	sts	0x012A, r20	; 0x80012a <rx_off>
	}

	return true;
     9d8:	81 e0       	ldi	r24, 0x01	; 1
}
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	08 95       	ret

000009e0 <can_send_message>:

bool can_send_message(CanMessage_t* message) {
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	fc 01       	movw	r30, r24
	bool result = false;

	CANGIE &= ~(1 << ENIT);
     9e6:	ab ed       	ldi	r26, 0xDB	; 219
     9e8:	b0 e0       	ldi	r27, 0x00	; 0
     9ea:	8c 91       	ld	r24, X
     9ec:	8f 77       	andi	r24, 0x7F	; 127
     9ee:	8c 93       	st	X, r24

	if (!tx_busy) {
     9f0:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <tx_busy>
     9f4:	81 11       	cpse	r24, r1
     9f6:	27 c0       	rjmp	.+78     	; 0xa46 <can_send_message+0x66>
		// Switch to Mob 0 access
		CANPAGE = 0 << 4;
     9f8:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		// Set ID
		CANIDT2 = message->id << 5;
     9fc:	80 81       	ld	r24, Z
     9fe:	82 95       	swap	r24
     a00:	88 0f       	add	r24, r24
     a02:	80 7e       	andi	r24, 0xE0	; 224
     a04:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT1 = message->id >> 3;
     a08:	80 81       	ld	r24, Z
     a0a:	91 81       	ldd	r25, Z+1	; 0x01
     a0c:	96 95       	lsr	r25
     a0e:	87 95       	ror	r24
     a10:	96 95       	lsr	r25
     a12:	87 95       	ror	r24
     a14:	96 95       	lsr	r25
     a16:	87 95       	ror	r24
     a18:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     a1c:	df 01       	movw	r26, r30
     a1e:	13 96       	adiw	r26, 0x03	; 3
     a20:	9f 01       	movw	r18, r30
     a22:	25 5f       	subi	r18, 0xF5	; 245
     a24:	3f 4f       	sbci	r19, 0xFF	; 255

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
     a26:	ca ef       	ldi	r28, 0xFA	; 250
     a28:	d0 e0       	ldi	r29, 0x00	; 0
     a2a:	9d 91       	ld	r25, X+
     a2c:	98 83       	st	Y, r25
		// Set ID
		CANIDT2 = message->id << 5;
		CANIDT1 = message->id >> 3;

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
     a2e:	a2 17       	cp	r26, r18
     a30:	b3 07       	cpc	r27, r19
     a32:	d9 f7       	brne	.-10     	; 0xa2a <can_send_message+0x4a>
			CANMSG = message->data.u8[i];
		}
		
		result = true;
		tx_busy = 1;
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <tx_busy>

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
     a3a:	82 81       	ldd	r24, Z+2	; 0x02
     a3c:	80 64       	ori	r24, 0x40	; 64
     a3e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
		}
		
		result = true;
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	43 c0       	rjmp	.+134    	; 0xacc <can_send_message+0xec>
		tx_busy = 1;

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
	}
	else if (TX_SIZE - ((tx_on - tx_off) & TX_ABS_MASK)) {
     a46:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <tx_on>
     a4a:	82 2f       	mov	r24, r18
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <tx_off>
     a52:	83 1b       	sub	r24, r19
     a54:	91 09       	sbc	r25, r1
     a56:	8f 77       	andi	r24, 0x7F	; 127
     a58:	99 27       	eor	r25, r25
     a5a:	40 97       	sbiw	r24, 0x10	; 16
     a5c:	b1 f1       	breq	.+108    	; 0xaca <can_send_message+0xea>
		// Copy data into TX buffer
		tx_frames[tx_on & (TX_SIZE-1)].id = message->id;
     a5e:	a2 2f       	mov	r26, r18
     a60:	af 70       	andi	r26, 0x0F	; 15
     a62:	8b e0       	ldi	r24, 0x0B	; 11
     a64:	a8 9f       	mul	r26, r24
     a66:	d0 01       	movw	r26, r0
     a68:	11 24       	eor	r1, r1
     a6a:	ed 01       	movw	r28, r26
     a6c:	c2 52       	subi	r28, 0x22	; 34
     a6e:	de 4f       	sbci	r29, 0xFE	; 254
     a70:	80 81       	ld	r24, Z
     a72:	98 2f       	mov	r25, r24
     a74:	92 95       	swap	r25
     a76:	99 0f       	add	r25, r25
     a78:	90 7e       	andi	r25, 0xE0	; 224
     a7a:	88 81       	ld	r24, Y
     a7c:	8f 71       	andi	r24, 0x1F	; 31
     a7e:	89 2b       	or	r24, r25
     a80:	88 83       	st	Y, r24
     a82:	80 81       	ld	r24, Z
     a84:	98 2f       	mov	r25, r24
     a86:	96 95       	lsr	r25
     a88:	96 95       	lsr	r25
     a8a:	96 95       	lsr	r25
     a8c:	89 81       	ldd	r24, Y+1	; 0x01
     a8e:	80 7e       	andi	r24, 0xE0	; 224
     a90:	89 2b       	or	r24, r25
     a92:	89 83       	std	Y+1, r24	; 0x01
     a94:	91 81       	ldd	r25, Z+1	; 0x01
     a96:	92 95       	swap	r25
     a98:	99 0f       	add	r25, r25
     a9a:	90 7e       	andi	r25, 0xE0	; 224
     a9c:	8f 71       	andi	r24, 0x1F	; 31
     a9e:	89 2b       	or	r24, r25
     aa0:	89 83       	std	Y+1, r24	; 0x01
		tx_frames[tx_on & (TX_SIZE-1)].length = message->length;
     aa2:	82 81       	ldd	r24, Z+2	; 0x02
     aa4:	98 2f       	mov	r25, r24
     aa6:	9f 70       	andi	r25, 0x0F	; 15
     aa8:	8a 81       	ldd	r24, Y+2	; 0x02
     aaa:	80 7f       	andi	r24, 0xF0	; 240
     aac:	89 2b       	or	r24, r25
     aae:	8a 83       	std	Y+2, r24	; 0x02
		memcpy(tx_frames[tx_on & (TX_SIZE-1)].data, &message->data, CAN_FRAME_DATA_MAX_LENGTH);
     ab0:	af 51       	subi	r26, 0x1F	; 31
     ab2:	be 4f       	sbci	r27, 0xFE	; 254
     ab4:	33 96       	adiw	r30, 0x03	; 3
     ab6:	88 e0       	ldi	r24, 0x08	; 8
     ab8:	01 90       	ld	r0, Z+
     aba:	0d 92       	st	X+, r0
     abc:	8a 95       	dec	r24
     abe:	e1 f7       	brne	.-8      	; 0xab8 <can_send_message+0xd8>

		/*for (int i = 0; i < 8; i++) {
			tx_frames[tx_on & (TX_SIZE-1)].data[i] = message->data.u8[i];
		}*/

		tx_on++;
     ac0:	2f 5f       	subi	r18, 0xFF	; 255
     ac2:	20 93 2c 01 	sts	0x012C, r18	; 0x80012c <tx_on>
		result = true;
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	01 c0       	rjmp	.+2      	; 0xacc <can_send_message+0xec>

	return true;
}

bool can_send_message(CanMessage_t* message) {
	bool result = false;
     aca:	80 e0       	ldi	r24, 0x00	; 0

		tx_on++;
		result = true;
	}

	CANGIE |= (1 << ENIT);
     acc:	eb ed       	ldi	r30, 0xDB	; 219
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	90 81       	ld	r25, Z
     ad2:	90 68       	ori	r25, 0x80	; 128
     ad4:	90 83       	st	Z, r25

	return result;
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	08 95       	ret

00000adc <pwm_init>:
			break;
		case PWM_PE4:
			OCR3B = (dutyCycle & 0xFFFF);
			break;
		case PWM_PE5:
			OCR3C = (dutyCycle & 0xFFFF);
     adc:	0f 93       	push	r16
     ade:	1f 93       	push	r17
     ae0:	cf 93       	push	r28
     ae2:	df 93       	push	r29
     ae4:	8e b1       	in	r24, 0x0e	; 14
     ae6:	87 7c       	andi	r24, 0xC7	; 199
     ae8:	8e b9       	out	0x0e, r24	; 14
     aea:	8d b1       	in	r24, 0x0d	; 13
     aec:	88 63       	ori	r24, 0x38	; 56
     aee:	8d b9       	out	0x0d, r24	; 13
     af0:	2c 98       	cbi	0x05, 4	; 5
     af2:	24 9a       	sbi	0x04, 4	; 4
     af4:	a1 e9       	ldi	r26, 0x91	; 145
     af6:	b0 e0       	ldi	r27, 0x00	; 0
     af8:	8c 91       	ld	r24, X
     afa:	88 61       	ori	r24, 0x18	; 24
     afc:	8c 93       	st	X, r24
     afe:	e0 e9       	ldi	r30, 0x90	; 144
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	80 81       	ld	r24, Z
     b04:	82 60       	ori	r24, 0x02	; 2
     b06:	80 83       	st	Z, r24
     b08:	80 81       	ld	r24, Z
     b0a:	8e 7f       	andi	r24, 0xFE	; 254
     b0c:	80 83       	st	Z, r24
     b0e:	c0 eb       	ldi	r28, 0xB0	; 176
     b10:	d0 e0       	ldi	r29, 0x00	; 0
     b12:	88 81       	ld	r24, Y
     b14:	88 64       	ori	r24, 0x48	; 72
     b16:	88 83       	st	Y, r24
     b18:	80 81       	ld	r24, Z
     b1a:	80 68       	ori	r24, 0x80	; 128
     b1c:	80 83       	st	Z, r24
     b1e:	80 81       	ld	r24, Z
     b20:	8f 7b       	andi	r24, 0xBF	; 191
     b22:	80 83       	st	Z, r24
     b24:	80 81       	ld	r24, Z
     b26:	80 62       	ori	r24, 0x20	; 32
     b28:	80 83       	st	Z, r24
     b2a:	80 81       	ld	r24, Z
     b2c:	80 61       	ori	r24, 0x10	; 16
     b2e:	80 83       	st	Z, r24
     b30:	88 81       	ld	r24, Y
     b32:	80 62       	ori	r24, 0x20	; 32
     b34:	88 83       	st	Y, r24
     b36:	88 81       	ld	r24, Y
     b38:	8f 7e       	andi	r24, 0xEF	; 239
     b3a:	88 83       	st	Y, r24
     b3c:	8c 91       	ld	r24, X
     b3e:	81 60       	ori	r24, 0x01	; 1
     b40:	8c 93       	st	X, r24
     b42:	8c 91       	ld	r24, X
     b44:	89 7f       	andi	r24, 0xF9	; 249
     b46:	8c 93       	st	X, r24
     b48:	e6 e9       	ldi	r30, 0x96	; 150
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	8f ef       	ldi	r24, 0xFF	; 255
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	91 83       	std	Z+1, r25	; 0x01
     b52:	80 83       	st	Z, r24
     b54:	c8 e9       	ldi	r28, 0x98	; 152
     b56:	d0 e0       	ldi	r29, 0x00	; 0
     b58:	19 82       	std	Y+1, r1	; 0x01
     b5a:	18 82       	st	Y, r1
     b5c:	0a e9       	ldi	r16, 0x9A	; 154
     b5e:	10 e0       	ldi	r17, 0x00	; 0
     b60:	d8 01       	movw	r26, r16
     b62:	11 96       	adiw	r26, 0x01	; 1
     b64:	1c 92       	st	X, r1
     b66:	1e 92       	st	-X, r1
     b68:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
     b6c:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     b70:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     b74:	60 81       	ld	r22, Z
     b76:	71 81       	ldd	r23, Z+1	; 0x01
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	80 d1       	rcall	.+768    	; 0xe7e <__floatunsisf>
     b7e:	20 e0       	ldi	r18, 0x00	; 0
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	5f e3       	ldi	r21, 0x3F	; 63
     b86:	31 d2       	rcall	.+1122   	; 0xfea <__mulsf3>
     b88:	49 d1       	rcall	.+658    	; 0xe1c <__fixsfsi>
     b8a:	79 83       	std	Y+1, r23	; 0x01
     b8c:	68 83       	st	Y, r22
     b8e:	88 81       	ld	r24, Y
     b90:	99 81       	ldd	r25, Y+1	; 0x01
     b92:	f8 01       	movw	r30, r16
     b94:	91 83       	std	Z+1, r25	; 0x01
     b96:	80 83       	st	Z, r24
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	08 95       	ret

00000ba2 <pwm_set_top_t3>:
	}
}

void pwm_set_top_t3(uint16_t top)
{
	ICR3 = (top & 0xFFFF);
     ba2:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
     ba6:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
     baa:	08 95       	ret

00000bac <rgbled_turn_off>:
	DDRB |= LED_ALL;
	rgbled_turn_off(LED_ALL);
}

void rgbled_turn_off(RgbLedColor_t color) {
	PORTB |= color;
     bac:	95 b1       	in	r25, 0x05	; 5
     bae:	89 2b       	or	r24, r25
     bb0:	85 b9       	out	0x05, r24	; 5
     bb2:	08 95       	ret

00000bb4 <rgbled_init>:
#include "rgbled.h"
#include <avr/io.h>


void rgbled_init() {
	DDRB |= LED_ALL;
     bb4:	84 b1       	in	r24, 0x04	; 4
     bb6:	80 6e       	ori	r24, 0xE0	; 224
     bb8:	84 b9       	out	0x04, r24	; 4
	rgbled_turn_off(LED_ALL);
     bba:	80 ee       	ldi	r24, 0xE0	; 224
     bbc:	f7 cf       	rjmp	.-18     	; 0xbac <rgbled_turn_off>
     bbe:	08 95       	ret

00000bc0 <rgbled_turn_on>:
void rgbled_turn_off(RgbLedColor_t color) {
	PORTB |= color;
}

void rgbled_turn_on(RgbLedColor_t color) {
	PORTB &= ~color;
     bc0:	95 b1       	in	r25, 0x05	; 5
     bc2:	80 95       	com	r24
     bc4:	98 23       	and	r25, r24
     bc6:	95 b9       	out	0x05, r25	; 5
     bc8:	08 95       	ret

00000bca <__vector_17>:

uint16_t timer_elapsed_ms(timer_t timer) {
	return elapsed_microseconds[timer] / 1000;
}

ISR(TIMER0_OVF_vect) {
     bca:	1f 92       	push	r1
     bcc:	0f 92       	push	r0
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	0f 92       	push	r0
     bd2:	11 24       	eor	r1, r1
     bd4:	0b b6       	in	r0, 0x3b	; 59
     bd6:	0f 92       	push	r0
     bd8:	2f 93       	push	r18
     bda:	3f 93       	push	r19
     bdc:	4f 93       	push	r20
     bde:	5f 93       	push	r21
     be0:	6f 93       	push	r22
     be2:	7f 93       	push	r23
     be4:	8f 93       	push	r24
     be6:	af 93       	push	r26
     be8:	bf 93       	push	r27
     bea:	ef 93       	push	r30
     bec:	ff 93       	push	r31
     bee:	ae ea       	ldi	r26, 0xAE	; 174
     bf0:	b2 e0       	ldi	r27, 0x02	; 2
     bf2:	ee e8       	ldi	r30, 0x8E	; 142
     bf4:	f2 e0       	ldi	r31, 0x02	; 2
     bf6:	2e ea       	ldi	r18, 0xAE	; 174
     bf8:	32 e0       	ldi	r19, 0x02	; 2
	for (int t = 0; t < NUMBER_OF_TIMERS; t++) {
		if (timer_enabled[t]){
     bfa:	8d 91       	ld	r24, X+
     bfc:	88 23       	and	r24, r24
     bfe:	59 f0       	breq	.+22     	; 0xc16 <__vector_17+0x4c>
			elapsed_microseconds[t] += (1000000ULL * 256 * 256) / F_CPU;
     c00:	40 81       	ld	r20, Z
     c02:	51 81       	ldd	r21, Z+1	; 0x01
     c04:	62 81       	ldd	r22, Z+2	; 0x02
     c06:	73 81       	ldd	r23, Z+3	; 0x03
     c08:	50 5e       	subi	r21, 0xE0	; 224
     c0a:	6f 4f       	sbci	r22, 0xFF	; 255
     c0c:	7f 4f       	sbci	r23, 0xFF	; 255
     c0e:	40 83       	st	Z, r20
     c10:	51 83       	std	Z+1, r21	; 0x01
     c12:	62 83       	std	Z+2, r22	; 0x02
     c14:	73 83       	std	Z+3, r23	; 0x03
     c16:	34 96       	adiw	r30, 0x04	; 4
uint16_t timer_elapsed_ms(timer_t timer) {
	return elapsed_microseconds[timer] / 1000;
}

ISR(TIMER0_OVF_vect) {
	for (int t = 0; t < NUMBER_OF_TIMERS; t++) {
     c18:	e2 17       	cp	r30, r18
     c1a:	f3 07       	cpc	r31, r19
     c1c:	71 f7       	brne	.-36     	; 0xbfa <__vector_17+0x30>
		if (timer_enabled[t]){
			elapsed_microseconds[t] += (1000000ULL * 256 * 256) / F_CPU;
		}
	}
}
     c1e:	ff 91       	pop	r31
     c20:	ef 91       	pop	r30
     c22:	bf 91       	pop	r27
     c24:	af 91       	pop	r26
     c26:	8f 91       	pop	r24
     c28:	7f 91       	pop	r23
     c2a:	6f 91       	pop	r22
     c2c:	5f 91       	pop	r21
     c2e:	4f 91       	pop	r20
     c30:	3f 91       	pop	r19
     c32:	2f 91       	pop	r18
     c34:	0f 90       	pop	r0
     c36:	0b be       	out	0x3b, r0	; 59
     c38:	0f 90       	pop	r0
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	0f 90       	pop	r0
     c3e:	1f 90       	pop	r1
     c40:	18 95       	reti

00000c42 <usbdbg_tx_char>:
	fdevopen(usbdbg_tx_char, NULL);
}

int usbdbg_tx_char(char c, FILE* stream)
{
	while (!(UCSR0A & (1 << UDRE0))) { }; // Wait until data register is empty
     c42:	e0 ec       	ldi	r30, 0xC0	; 192
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	90 81       	ld	r25, Z
     c48:	95 ff       	sbrs	r25, 5
     c4a:	fd cf       	rjmp	.-6      	; 0xc46 <usbdbg_tx_char+0x4>
	UDR0 = c;
     c4c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 1;
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	08 95       	ret

00000c56 <usbdbg_init>:
#include <stdlib.h>

void usbdbg_init()
{
	const uint32_t baud_rate = 500000;
	UBRR0 = (F_CPU / 16) / baud_rate - 1;
     c56:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     c5a:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C = (3 << UCSZ0);	// 8 bit transfer
     c5e:	86 e0       	ldi	r24, 0x06	; 6
     c60:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B |= (1 << TXEN0); // Enable transmit
     c64:	e1 ec       	ldi	r30, 0xC1	; 193
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	88 60       	ori	r24, 0x08	; 8
     c6c:	80 83       	st	Z, r24
	
	fdevopen(usbdbg_tx_char, NULL);
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	81 e2       	ldi	r24, 0x21	; 33
     c74:	96 e0       	ldi	r25, 0x06	; 6
     c76:	1c c2       	rjmp	.+1080   	; 0x10b0 <fdevopen>
     c78:	08 95       	ret

00000c7a <__subsf3>:
     c7a:	50 58       	subi	r21, 0x80	; 128

00000c7c <__addsf3>:
     c7c:	bb 27       	eor	r27, r27
     c7e:	aa 27       	eor	r26, r26
     c80:	0e d0       	rcall	.+28     	; 0xc9e <__addsf3x>
     c82:	75 c1       	rjmp	.+746    	; 0xf6e <__fp_round>
     c84:	66 d1       	rcall	.+716    	; 0xf52 <__fp_pscA>
     c86:	30 f0       	brcs	.+12     	; 0xc94 <__addsf3+0x18>
     c88:	6b d1       	rcall	.+726    	; 0xf60 <__fp_pscB>
     c8a:	20 f0       	brcs	.+8      	; 0xc94 <__addsf3+0x18>
     c8c:	31 f4       	brne	.+12     	; 0xc9a <__addsf3+0x1e>
     c8e:	9f 3f       	cpi	r25, 0xFF	; 255
     c90:	11 f4       	brne	.+4      	; 0xc96 <__addsf3+0x1a>
     c92:	1e f4       	brtc	.+6      	; 0xc9a <__addsf3+0x1e>
     c94:	5b c1       	rjmp	.+694    	; 0xf4c <__fp_nan>
     c96:	0e f4       	brtc	.+2      	; 0xc9a <__addsf3+0x1e>
     c98:	e0 95       	com	r30
     c9a:	e7 fb       	bst	r30, 7
     c9c:	51 c1       	rjmp	.+674    	; 0xf40 <__fp_inf>

00000c9e <__addsf3x>:
     c9e:	e9 2f       	mov	r30, r25
     ca0:	77 d1       	rcall	.+750    	; 0xf90 <__fp_split3>
     ca2:	80 f3       	brcs	.-32     	; 0xc84 <__addsf3+0x8>
     ca4:	ba 17       	cp	r27, r26
     ca6:	62 07       	cpc	r22, r18
     ca8:	73 07       	cpc	r23, r19
     caa:	84 07       	cpc	r24, r20
     cac:	95 07       	cpc	r25, r21
     cae:	18 f0       	brcs	.+6      	; 0xcb6 <__addsf3x+0x18>
     cb0:	71 f4       	brne	.+28     	; 0xcce <__addsf3x+0x30>
     cb2:	9e f5       	brtc	.+102    	; 0xd1a <__addsf3x+0x7c>
     cb4:	8f c1       	rjmp	.+798    	; 0xfd4 <__fp_zero>
     cb6:	0e f4       	brtc	.+2      	; 0xcba <__addsf3x+0x1c>
     cb8:	e0 95       	com	r30
     cba:	0b 2e       	mov	r0, r27
     cbc:	ba 2f       	mov	r27, r26
     cbe:	a0 2d       	mov	r26, r0
     cc0:	0b 01       	movw	r0, r22
     cc2:	b9 01       	movw	r22, r18
     cc4:	90 01       	movw	r18, r0
     cc6:	0c 01       	movw	r0, r24
     cc8:	ca 01       	movw	r24, r20
     cca:	a0 01       	movw	r20, r0
     ccc:	11 24       	eor	r1, r1
     cce:	ff 27       	eor	r31, r31
     cd0:	59 1b       	sub	r21, r25
     cd2:	99 f0       	breq	.+38     	; 0xcfa <__addsf3x+0x5c>
     cd4:	59 3f       	cpi	r21, 0xF9	; 249
     cd6:	50 f4       	brcc	.+20     	; 0xcec <__addsf3x+0x4e>
     cd8:	50 3e       	cpi	r21, 0xE0	; 224
     cda:	68 f1       	brcs	.+90     	; 0xd36 <__addsf3x+0x98>
     cdc:	1a 16       	cp	r1, r26
     cde:	f0 40       	sbci	r31, 0x00	; 0
     ce0:	a2 2f       	mov	r26, r18
     ce2:	23 2f       	mov	r18, r19
     ce4:	34 2f       	mov	r19, r20
     ce6:	44 27       	eor	r20, r20
     ce8:	58 5f       	subi	r21, 0xF8	; 248
     cea:	f3 cf       	rjmp	.-26     	; 0xcd2 <__addsf3x+0x34>
     cec:	46 95       	lsr	r20
     cee:	37 95       	ror	r19
     cf0:	27 95       	ror	r18
     cf2:	a7 95       	ror	r26
     cf4:	f0 40       	sbci	r31, 0x00	; 0
     cf6:	53 95       	inc	r21
     cf8:	c9 f7       	brne	.-14     	; 0xcec <__addsf3x+0x4e>
     cfa:	7e f4       	brtc	.+30     	; 0xd1a <__addsf3x+0x7c>
     cfc:	1f 16       	cp	r1, r31
     cfe:	ba 0b       	sbc	r27, r26
     d00:	62 0b       	sbc	r22, r18
     d02:	73 0b       	sbc	r23, r19
     d04:	84 0b       	sbc	r24, r20
     d06:	ba f0       	brmi	.+46     	; 0xd36 <__addsf3x+0x98>
     d08:	91 50       	subi	r25, 0x01	; 1
     d0a:	a1 f0       	breq	.+40     	; 0xd34 <__addsf3x+0x96>
     d0c:	ff 0f       	add	r31, r31
     d0e:	bb 1f       	adc	r27, r27
     d10:	66 1f       	adc	r22, r22
     d12:	77 1f       	adc	r23, r23
     d14:	88 1f       	adc	r24, r24
     d16:	c2 f7       	brpl	.-16     	; 0xd08 <__addsf3x+0x6a>
     d18:	0e c0       	rjmp	.+28     	; 0xd36 <__addsf3x+0x98>
     d1a:	ba 0f       	add	r27, r26
     d1c:	62 1f       	adc	r22, r18
     d1e:	73 1f       	adc	r23, r19
     d20:	84 1f       	adc	r24, r20
     d22:	48 f4       	brcc	.+18     	; 0xd36 <__addsf3x+0x98>
     d24:	87 95       	ror	r24
     d26:	77 95       	ror	r23
     d28:	67 95       	ror	r22
     d2a:	b7 95       	ror	r27
     d2c:	f7 95       	ror	r31
     d2e:	9e 3f       	cpi	r25, 0xFE	; 254
     d30:	08 f0       	brcs	.+2      	; 0xd34 <__addsf3x+0x96>
     d32:	b3 cf       	rjmp	.-154    	; 0xc9a <__addsf3+0x1e>
     d34:	93 95       	inc	r25
     d36:	88 0f       	add	r24, r24
     d38:	08 f0       	brcs	.+2      	; 0xd3c <__addsf3x+0x9e>
     d3a:	99 27       	eor	r25, r25
     d3c:	ee 0f       	add	r30, r30
     d3e:	97 95       	ror	r25
     d40:	87 95       	ror	r24
     d42:	08 95       	ret

00000d44 <__cmpsf2>:
     d44:	d9 d0       	rcall	.+434    	; 0xef8 <__fp_cmp>
     d46:	08 f4       	brcc	.+2      	; 0xd4a <__cmpsf2+0x6>
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	08 95       	ret

00000d4c <__divsf3>:
     d4c:	0c d0       	rcall	.+24     	; 0xd66 <__divsf3x>
     d4e:	0f c1       	rjmp	.+542    	; 0xf6e <__fp_round>
     d50:	07 d1       	rcall	.+526    	; 0xf60 <__fp_pscB>
     d52:	40 f0       	brcs	.+16     	; 0xd64 <__divsf3+0x18>
     d54:	fe d0       	rcall	.+508    	; 0xf52 <__fp_pscA>
     d56:	30 f0       	brcs	.+12     	; 0xd64 <__divsf3+0x18>
     d58:	21 f4       	brne	.+8      	; 0xd62 <__divsf3+0x16>
     d5a:	5f 3f       	cpi	r21, 0xFF	; 255
     d5c:	19 f0       	breq	.+6      	; 0xd64 <__divsf3+0x18>
     d5e:	f0 c0       	rjmp	.+480    	; 0xf40 <__fp_inf>
     d60:	51 11       	cpse	r21, r1
     d62:	39 c1       	rjmp	.+626    	; 0xfd6 <__fp_szero>
     d64:	f3 c0       	rjmp	.+486    	; 0xf4c <__fp_nan>

00000d66 <__divsf3x>:
     d66:	14 d1       	rcall	.+552    	; 0xf90 <__fp_split3>
     d68:	98 f3       	brcs	.-26     	; 0xd50 <__divsf3+0x4>

00000d6a <__divsf3_pse>:
     d6a:	99 23       	and	r25, r25
     d6c:	c9 f3       	breq	.-14     	; 0xd60 <__divsf3+0x14>
     d6e:	55 23       	and	r21, r21
     d70:	b1 f3       	breq	.-20     	; 0xd5e <__divsf3+0x12>
     d72:	95 1b       	sub	r25, r21
     d74:	55 0b       	sbc	r21, r21
     d76:	bb 27       	eor	r27, r27
     d78:	aa 27       	eor	r26, r26
     d7a:	62 17       	cp	r22, r18
     d7c:	73 07       	cpc	r23, r19
     d7e:	84 07       	cpc	r24, r20
     d80:	38 f0       	brcs	.+14     	; 0xd90 <__divsf3_pse+0x26>
     d82:	9f 5f       	subi	r25, 0xFF	; 255
     d84:	5f 4f       	sbci	r21, 0xFF	; 255
     d86:	22 0f       	add	r18, r18
     d88:	33 1f       	adc	r19, r19
     d8a:	44 1f       	adc	r20, r20
     d8c:	aa 1f       	adc	r26, r26
     d8e:	a9 f3       	breq	.-22     	; 0xd7a <__divsf3_pse+0x10>
     d90:	33 d0       	rcall	.+102    	; 0xdf8 <__divsf3_pse+0x8e>
     d92:	0e 2e       	mov	r0, r30
     d94:	3a f0       	brmi	.+14     	; 0xda4 <__divsf3_pse+0x3a>
     d96:	e0 e8       	ldi	r30, 0x80	; 128
     d98:	30 d0       	rcall	.+96     	; 0xdfa <__divsf3_pse+0x90>
     d9a:	91 50       	subi	r25, 0x01	; 1
     d9c:	50 40       	sbci	r21, 0x00	; 0
     d9e:	e6 95       	lsr	r30
     da0:	00 1c       	adc	r0, r0
     da2:	ca f7       	brpl	.-14     	; 0xd96 <__divsf3_pse+0x2c>
     da4:	29 d0       	rcall	.+82     	; 0xdf8 <__divsf3_pse+0x8e>
     da6:	fe 2f       	mov	r31, r30
     da8:	27 d0       	rcall	.+78     	; 0xdf8 <__divsf3_pse+0x8e>
     daa:	66 0f       	add	r22, r22
     dac:	77 1f       	adc	r23, r23
     dae:	88 1f       	adc	r24, r24
     db0:	bb 1f       	adc	r27, r27
     db2:	26 17       	cp	r18, r22
     db4:	37 07       	cpc	r19, r23
     db6:	48 07       	cpc	r20, r24
     db8:	ab 07       	cpc	r26, r27
     dba:	b0 e8       	ldi	r27, 0x80	; 128
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <__divsf3_pse+0x56>
     dbe:	bb 0b       	sbc	r27, r27
     dc0:	80 2d       	mov	r24, r0
     dc2:	bf 01       	movw	r22, r30
     dc4:	ff 27       	eor	r31, r31
     dc6:	93 58       	subi	r25, 0x83	; 131
     dc8:	5f 4f       	sbci	r21, 0xFF	; 255
     dca:	2a f0       	brmi	.+10     	; 0xdd6 <__divsf3_pse+0x6c>
     dcc:	9e 3f       	cpi	r25, 0xFE	; 254
     dce:	51 05       	cpc	r21, r1
     dd0:	68 f0       	brcs	.+26     	; 0xdec <__divsf3_pse+0x82>
     dd2:	b6 c0       	rjmp	.+364    	; 0xf40 <__fp_inf>
     dd4:	00 c1       	rjmp	.+512    	; 0xfd6 <__fp_szero>
     dd6:	5f 3f       	cpi	r21, 0xFF	; 255
     dd8:	ec f3       	brlt	.-6      	; 0xdd4 <__divsf3_pse+0x6a>
     dda:	98 3e       	cpi	r25, 0xE8	; 232
     ddc:	dc f3       	brlt	.-10     	; 0xdd4 <__divsf3_pse+0x6a>
     dde:	86 95       	lsr	r24
     de0:	77 95       	ror	r23
     de2:	67 95       	ror	r22
     de4:	b7 95       	ror	r27
     de6:	f7 95       	ror	r31
     de8:	9f 5f       	subi	r25, 0xFF	; 255
     dea:	c9 f7       	brne	.-14     	; 0xdde <__divsf3_pse+0x74>
     dec:	88 0f       	add	r24, r24
     dee:	91 1d       	adc	r25, r1
     df0:	96 95       	lsr	r25
     df2:	87 95       	ror	r24
     df4:	97 f9       	bld	r25, 7
     df6:	08 95       	ret
     df8:	e1 e0       	ldi	r30, 0x01	; 1
     dfa:	66 0f       	add	r22, r22
     dfc:	77 1f       	adc	r23, r23
     dfe:	88 1f       	adc	r24, r24
     e00:	bb 1f       	adc	r27, r27
     e02:	62 17       	cp	r22, r18
     e04:	73 07       	cpc	r23, r19
     e06:	84 07       	cpc	r24, r20
     e08:	ba 07       	cpc	r27, r26
     e0a:	20 f0       	brcs	.+8      	; 0xe14 <__divsf3_pse+0xaa>
     e0c:	62 1b       	sub	r22, r18
     e0e:	73 0b       	sbc	r23, r19
     e10:	84 0b       	sbc	r24, r20
     e12:	ba 0b       	sbc	r27, r26
     e14:	ee 1f       	adc	r30, r30
     e16:	88 f7       	brcc	.-30     	; 0xdfa <__divsf3_pse+0x90>
     e18:	e0 95       	com	r30
     e1a:	08 95       	ret

00000e1c <__fixsfsi>:
     e1c:	04 d0       	rcall	.+8      	; 0xe26 <__fixunssfsi>
     e1e:	68 94       	set
     e20:	b1 11       	cpse	r27, r1
     e22:	d9 c0       	rjmp	.+434    	; 0xfd6 <__fp_szero>
     e24:	08 95       	ret

00000e26 <__fixunssfsi>:
     e26:	bc d0       	rcall	.+376    	; 0xfa0 <__fp_splitA>
     e28:	88 f0       	brcs	.+34     	; 0xe4c <__fixunssfsi+0x26>
     e2a:	9f 57       	subi	r25, 0x7F	; 127
     e2c:	90 f0       	brcs	.+36     	; 0xe52 <__fixunssfsi+0x2c>
     e2e:	b9 2f       	mov	r27, r25
     e30:	99 27       	eor	r25, r25
     e32:	b7 51       	subi	r27, 0x17	; 23
     e34:	a0 f0       	brcs	.+40     	; 0xe5e <__fixunssfsi+0x38>
     e36:	d1 f0       	breq	.+52     	; 0xe6c <__fixunssfsi+0x46>
     e38:	66 0f       	add	r22, r22
     e3a:	77 1f       	adc	r23, r23
     e3c:	88 1f       	adc	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	1a f0       	brmi	.+6      	; 0xe48 <__fixunssfsi+0x22>
     e42:	ba 95       	dec	r27
     e44:	c9 f7       	brne	.-14     	; 0xe38 <__fixunssfsi+0x12>
     e46:	12 c0       	rjmp	.+36     	; 0xe6c <__fixunssfsi+0x46>
     e48:	b1 30       	cpi	r27, 0x01	; 1
     e4a:	81 f0       	breq	.+32     	; 0xe6c <__fixunssfsi+0x46>
     e4c:	c3 d0       	rcall	.+390    	; 0xfd4 <__fp_zero>
     e4e:	b1 e0       	ldi	r27, 0x01	; 1
     e50:	08 95       	ret
     e52:	c0 c0       	rjmp	.+384    	; 0xfd4 <__fp_zero>
     e54:	67 2f       	mov	r22, r23
     e56:	78 2f       	mov	r23, r24
     e58:	88 27       	eor	r24, r24
     e5a:	b8 5f       	subi	r27, 0xF8	; 248
     e5c:	39 f0       	breq	.+14     	; 0xe6c <__fixunssfsi+0x46>
     e5e:	b9 3f       	cpi	r27, 0xF9	; 249
     e60:	cc f3       	brlt	.-14     	; 0xe54 <__fixunssfsi+0x2e>
     e62:	86 95       	lsr	r24
     e64:	77 95       	ror	r23
     e66:	67 95       	ror	r22
     e68:	b3 95       	inc	r27
     e6a:	d9 f7       	brne	.-10     	; 0xe62 <__fixunssfsi+0x3c>
     e6c:	3e f4       	brtc	.+14     	; 0xe7c <__fixunssfsi+0x56>
     e6e:	90 95       	com	r25
     e70:	80 95       	com	r24
     e72:	70 95       	com	r23
     e74:	61 95       	neg	r22
     e76:	7f 4f       	sbci	r23, 0xFF	; 255
     e78:	8f 4f       	sbci	r24, 0xFF	; 255
     e7a:	9f 4f       	sbci	r25, 0xFF	; 255
     e7c:	08 95       	ret

00000e7e <__floatunsisf>:
     e7e:	e8 94       	clt
     e80:	09 c0       	rjmp	.+18     	; 0xe94 <__floatsisf+0x12>

00000e82 <__floatsisf>:
     e82:	97 fb       	bst	r25, 7
     e84:	3e f4       	brtc	.+14     	; 0xe94 <__floatsisf+0x12>
     e86:	90 95       	com	r25
     e88:	80 95       	com	r24
     e8a:	70 95       	com	r23
     e8c:	61 95       	neg	r22
     e8e:	7f 4f       	sbci	r23, 0xFF	; 255
     e90:	8f 4f       	sbci	r24, 0xFF	; 255
     e92:	9f 4f       	sbci	r25, 0xFF	; 255
     e94:	99 23       	and	r25, r25
     e96:	a9 f0       	breq	.+42     	; 0xec2 <__floatsisf+0x40>
     e98:	f9 2f       	mov	r31, r25
     e9a:	96 e9       	ldi	r25, 0x96	; 150
     e9c:	bb 27       	eor	r27, r27
     e9e:	93 95       	inc	r25
     ea0:	f6 95       	lsr	r31
     ea2:	87 95       	ror	r24
     ea4:	77 95       	ror	r23
     ea6:	67 95       	ror	r22
     ea8:	b7 95       	ror	r27
     eaa:	f1 11       	cpse	r31, r1
     eac:	f8 cf       	rjmp	.-16     	; 0xe9e <__floatsisf+0x1c>
     eae:	fa f4       	brpl	.+62     	; 0xeee <__floatsisf+0x6c>
     eb0:	bb 0f       	add	r27, r27
     eb2:	11 f4       	brne	.+4      	; 0xeb8 <__floatsisf+0x36>
     eb4:	60 ff       	sbrs	r22, 0
     eb6:	1b c0       	rjmp	.+54     	; 0xeee <__floatsisf+0x6c>
     eb8:	6f 5f       	subi	r22, 0xFF	; 255
     eba:	7f 4f       	sbci	r23, 0xFF	; 255
     ebc:	8f 4f       	sbci	r24, 0xFF	; 255
     ebe:	9f 4f       	sbci	r25, 0xFF	; 255
     ec0:	16 c0       	rjmp	.+44     	; 0xeee <__floatsisf+0x6c>
     ec2:	88 23       	and	r24, r24
     ec4:	11 f0       	breq	.+4      	; 0xeca <__floatsisf+0x48>
     ec6:	96 e9       	ldi	r25, 0x96	; 150
     ec8:	11 c0       	rjmp	.+34     	; 0xeec <__floatsisf+0x6a>
     eca:	77 23       	and	r23, r23
     ecc:	21 f0       	breq	.+8      	; 0xed6 <__floatsisf+0x54>
     ece:	9e e8       	ldi	r25, 0x8E	; 142
     ed0:	87 2f       	mov	r24, r23
     ed2:	76 2f       	mov	r23, r22
     ed4:	05 c0       	rjmp	.+10     	; 0xee0 <__floatsisf+0x5e>
     ed6:	66 23       	and	r22, r22
     ed8:	71 f0       	breq	.+28     	; 0xef6 <__floatsisf+0x74>
     eda:	96 e8       	ldi	r25, 0x86	; 134
     edc:	86 2f       	mov	r24, r22
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	2a f0       	brmi	.+10     	; 0xeee <__floatsisf+0x6c>
     ee4:	9a 95       	dec	r25
     ee6:	66 0f       	add	r22, r22
     ee8:	77 1f       	adc	r23, r23
     eea:	88 1f       	adc	r24, r24
     eec:	da f7       	brpl	.-10     	; 0xee4 <__floatsisf+0x62>
     eee:	88 0f       	add	r24, r24
     ef0:	96 95       	lsr	r25
     ef2:	87 95       	ror	r24
     ef4:	97 f9       	bld	r25, 7
     ef6:	08 95       	ret

00000ef8 <__fp_cmp>:
     ef8:	99 0f       	add	r25, r25
     efa:	00 08       	sbc	r0, r0
     efc:	55 0f       	add	r21, r21
     efe:	aa 0b       	sbc	r26, r26
     f00:	e0 e8       	ldi	r30, 0x80	; 128
     f02:	fe ef       	ldi	r31, 0xFE	; 254
     f04:	16 16       	cp	r1, r22
     f06:	17 06       	cpc	r1, r23
     f08:	e8 07       	cpc	r30, r24
     f0a:	f9 07       	cpc	r31, r25
     f0c:	c0 f0       	brcs	.+48     	; 0xf3e <__fp_cmp+0x46>
     f0e:	12 16       	cp	r1, r18
     f10:	13 06       	cpc	r1, r19
     f12:	e4 07       	cpc	r30, r20
     f14:	f5 07       	cpc	r31, r21
     f16:	98 f0       	brcs	.+38     	; 0xf3e <__fp_cmp+0x46>
     f18:	62 1b       	sub	r22, r18
     f1a:	73 0b       	sbc	r23, r19
     f1c:	84 0b       	sbc	r24, r20
     f1e:	95 0b       	sbc	r25, r21
     f20:	39 f4       	brne	.+14     	; 0xf30 <__fp_cmp+0x38>
     f22:	0a 26       	eor	r0, r26
     f24:	61 f0       	breq	.+24     	; 0xf3e <__fp_cmp+0x46>
     f26:	23 2b       	or	r18, r19
     f28:	24 2b       	or	r18, r20
     f2a:	25 2b       	or	r18, r21
     f2c:	21 f4       	brne	.+8      	; 0xf36 <__fp_cmp+0x3e>
     f2e:	08 95       	ret
     f30:	0a 26       	eor	r0, r26
     f32:	09 f4       	brne	.+2      	; 0xf36 <__fp_cmp+0x3e>
     f34:	a1 40       	sbci	r26, 0x01	; 1
     f36:	a6 95       	lsr	r26
     f38:	8f ef       	ldi	r24, 0xFF	; 255
     f3a:	81 1d       	adc	r24, r1
     f3c:	81 1d       	adc	r24, r1
     f3e:	08 95       	ret

00000f40 <__fp_inf>:
     f40:	97 f9       	bld	r25, 7
     f42:	9f 67       	ori	r25, 0x7F	; 127
     f44:	80 e8       	ldi	r24, 0x80	; 128
     f46:	70 e0       	ldi	r23, 0x00	; 0
     f48:	60 e0       	ldi	r22, 0x00	; 0
     f4a:	08 95       	ret

00000f4c <__fp_nan>:
     f4c:	9f ef       	ldi	r25, 0xFF	; 255
     f4e:	80 ec       	ldi	r24, 0xC0	; 192
     f50:	08 95       	ret

00000f52 <__fp_pscA>:
     f52:	00 24       	eor	r0, r0
     f54:	0a 94       	dec	r0
     f56:	16 16       	cp	r1, r22
     f58:	17 06       	cpc	r1, r23
     f5a:	18 06       	cpc	r1, r24
     f5c:	09 06       	cpc	r0, r25
     f5e:	08 95       	ret

00000f60 <__fp_pscB>:
     f60:	00 24       	eor	r0, r0
     f62:	0a 94       	dec	r0
     f64:	12 16       	cp	r1, r18
     f66:	13 06       	cpc	r1, r19
     f68:	14 06       	cpc	r1, r20
     f6a:	05 06       	cpc	r0, r21
     f6c:	08 95       	ret

00000f6e <__fp_round>:
     f6e:	09 2e       	mov	r0, r25
     f70:	03 94       	inc	r0
     f72:	00 0c       	add	r0, r0
     f74:	11 f4       	brne	.+4      	; 0xf7a <__fp_round+0xc>
     f76:	88 23       	and	r24, r24
     f78:	52 f0       	brmi	.+20     	; 0xf8e <__fp_round+0x20>
     f7a:	bb 0f       	add	r27, r27
     f7c:	40 f4       	brcc	.+16     	; 0xf8e <__fp_round+0x20>
     f7e:	bf 2b       	or	r27, r31
     f80:	11 f4       	brne	.+4      	; 0xf86 <__fp_round+0x18>
     f82:	60 ff       	sbrs	r22, 0
     f84:	04 c0       	rjmp	.+8      	; 0xf8e <__fp_round+0x20>
     f86:	6f 5f       	subi	r22, 0xFF	; 255
     f88:	7f 4f       	sbci	r23, 0xFF	; 255
     f8a:	8f 4f       	sbci	r24, 0xFF	; 255
     f8c:	9f 4f       	sbci	r25, 0xFF	; 255
     f8e:	08 95       	ret

00000f90 <__fp_split3>:
     f90:	57 fd       	sbrc	r21, 7
     f92:	90 58       	subi	r25, 0x80	; 128
     f94:	44 0f       	add	r20, r20
     f96:	55 1f       	adc	r21, r21
     f98:	59 f0       	breq	.+22     	; 0xfb0 <__fp_splitA+0x10>
     f9a:	5f 3f       	cpi	r21, 0xFF	; 255
     f9c:	71 f0       	breq	.+28     	; 0xfba <__fp_splitA+0x1a>
     f9e:	47 95       	ror	r20

00000fa0 <__fp_splitA>:
     fa0:	88 0f       	add	r24, r24
     fa2:	97 fb       	bst	r25, 7
     fa4:	99 1f       	adc	r25, r25
     fa6:	61 f0       	breq	.+24     	; 0xfc0 <__fp_splitA+0x20>
     fa8:	9f 3f       	cpi	r25, 0xFF	; 255
     faa:	79 f0       	breq	.+30     	; 0xfca <__fp_splitA+0x2a>
     fac:	87 95       	ror	r24
     fae:	08 95       	ret
     fb0:	12 16       	cp	r1, r18
     fb2:	13 06       	cpc	r1, r19
     fb4:	14 06       	cpc	r1, r20
     fb6:	55 1f       	adc	r21, r21
     fb8:	f2 cf       	rjmp	.-28     	; 0xf9e <__fp_split3+0xe>
     fba:	46 95       	lsr	r20
     fbc:	f1 df       	rcall	.-30     	; 0xfa0 <__fp_splitA>
     fbe:	08 c0       	rjmp	.+16     	; 0xfd0 <__fp_splitA+0x30>
     fc0:	16 16       	cp	r1, r22
     fc2:	17 06       	cpc	r1, r23
     fc4:	18 06       	cpc	r1, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	f1 cf       	rjmp	.-30     	; 0xfac <__fp_splitA+0xc>
     fca:	86 95       	lsr	r24
     fcc:	71 05       	cpc	r23, r1
     fce:	61 05       	cpc	r22, r1
     fd0:	08 94       	sec
     fd2:	08 95       	ret

00000fd4 <__fp_zero>:
     fd4:	e8 94       	clt

00000fd6 <__fp_szero>:
     fd6:	bb 27       	eor	r27, r27
     fd8:	66 27       	eor	r22, r22
     fda:	77 27       	eor	r23, r23
     fdc:	cb 01       	movw	r24, r22
     fde:	97 f9       	bld	r25, 7
     fe0:	08 95       	ret

00000fe2 <__gesf2>:
     fe2:	8a df       	rcall	.-236    	; 0xef8 <__fp_cmp>
     fe4:	08 f4       	brcc	.+2      	; 0xfe8 <__gesf2+0x6>
     fe6:	8f ef       	ldi	r24, 0xFF	; 255
     fe8:	08 95       	ret

00000fea <__mulsf3>:
     fea:	0b d0       	rcall	.+22     	; 0x1002 <__mulsf3x>
     fec:	c0 cf       	rjmp	.-128    	; 0xf6e <__fp_round>
     fee:	b1 df       	rcall	.-158    	; 0xf52 <__fp_pscA>
     ff0:	28 f0       	brcs	.+10     	; 0xffc <__mulsf3+0x12>
     ff2:	b6 df       	rcall	.-148    	; 0xf60 <__fp_pscB>
     ff4:	18 f0       	brcs	.+6      	; 0xffc <__mulsf3+0x12>
     ff6:	95 23       	and	r25, r21
     ff8:	09 f0       	breq	.+2      	; 0xffc <__mulsf3+0x12>
     ffa:	a2 cf       	rjmp	.-188    	; 0xf40 <__fp_inf>
     ffc:	a7 cf       	rjmp	.-178    	; 0xf4c <__fp_nan>
     ffe:	11 24       	eor	r1, r1
    1000:	ea cf       	rjmp	.-44     	; 0xfd6 <__fp_szero>

00001002 <__mulsf3x>:
    1002:	c6 df       	rcall	.-116    	; 0xf90 <__fp_split3>
    1004:	a0 f3       	brcs	.-24     	; 0xfee <__mulsf3+0x4>

00001006 <__mulsf3_pse>:
    1006:	95 9f       	mul	r25, r21
    1008:	d1 f3       	breq	.-12     	; 0xffe <__mulsf3+0x14>
    100a:	95 0f       	add	r25, r21
    100c:	50 e0       	ldi	r21, 0x00	; 0
    100e:	55 1f       	adc	r21, r21
    1010:	62 9f       	mul	r22, r18
    1012:	f0 01       	movw	r30, r0
    1014:	72 9f       	mul	r23, r18
    1016:	bb 27       	eor	r27, r27
    1018:	f0 0d       	add	r31, r0
    101a:	b1 1d       	adc	r27, r1
    101c:	63 9f       	mul	r22, r19
    101e:	aa 27       	eor	r26, r26
    1020:	f0 0d       	add	r31, r0
    1022:	b1 1d       	adc	r27, r1
    1024:	aa 1f       	adc	r26, r26
    1026:	64 9f       	mul	r22, r20
    1028:	66 27       	eor	r22, r22
    102a:	b0 0d       	add	r27, r0
    102c:	a1 1d       	adc	r26, r1
    102e:	66 1f       	adc	r22, r22
    1030:	82 9f       	mul	r24, r18
    1032:	22 27       	eor	r18, r18
    1034:	b0 0d       	add	r27, r0
    1036:	a1 1d       	adc	r26, r1
    1038:	62 1f       	adc	r22, r18
    103a:	73 9f       	mul	r23, r19
    103c:	b0 0d       	add	r27, r0
    103e:	a1 1d       	adc	r26, r1
    1040:	62 1f       	adc	r22, r18
    1042:	83 9f       	mul	r24, r19
    1044:	a0 0d       	add	r26, r0
    1046:	61 1d       	adc	r22, r1
    1048:	22 1f       	adc	r18, r18
    104a:	74 9f       	mul	r23, r20
    104c:	33 27       	eor	r19, r19
    104e:	a0 0d       	add	r26, r0
    1050:	61 1d       	adc	r22, r1
    1052:	23 1f       	adc	r18, r19
    1054:	84 9f       	mul	r24, r20
    1056:	60 0d       	add	r22, r0
    1058:	21 1d       	adc	r18, r1
    105a:	82 2f       	mov	r24, r18
    105c:	76 2f       	mov	r23, r22
    105e:	6a 2f       	mov	r22, r26
    1060:	11 24       	eor	r1, r1
    1062:	9f 57       	subi	r25, 0x7F	; 127
    1064:	50 40       	sbci	r21, 0x00	; 0
    1066:	8a f0       	brmi	.+34     	; 0x108a <__mulsf3_pse+0x84>
    1068:	e1 f0       	breq	.+56     	; 0x10a2 <__mulsf3_pse+0x9c>
    106a:	88 23       	and	r24, r24
    106c:	4a f0       	brmi	.+18     	; 0x1080 <__mulsf3_pse+0x7a>
    106e:	ee 0f       	add	r30, r30
    1070:	ff 1f       	adc	r31, r31
    1072:	bb 1f       	adc	r27, r27
    1074:	66 1f       	adc	r22, r22
    1076:	77 1f       	adc	r23, r23
    1078:	88 1f       	adc	r24, r24
    107a:	91 50       	subi	r25, 0x01	; 1
    107c:	50 40       	sbci	r21, 0x00	; 0
    107e:	a9 f7       	brne	.-22     	; 0x106a <__mulsf3_pse+0x64>
    1080:	9e 3f       	cpi	r25, 0xFE	; 254
    1082:	51 05       	cpc	r21, r1
    1084:	70 f0       	brcs	.+28     	; 0x10a2 <__mulsf3_pse+0x9c>
    1086:	5c cf       	rjmp	.-328    	; 0xf40 <__fp_inf>
    1088:	a6 cf       	rjmp	.-180    	; 0xfd6 <__fp_szero>
    108a:	5f 3f       	cpi	r21, 0xFF	; 255
    108c:	ec f3       	brlt	.-6      	; 0x1088 <__mulsf3_pse+0x82>
    108e:	98 3e       	cpi	r25, 0xE8	; 232
    1090:	dc f3       	brlt	.-10     	; 0x1088 <__mulsf3_pse+0x82>
    1092:	86 95       	lsr	r24
    1094:	77 95       	ror	r23
    1096:	67 95       	ror	r22
    1098:	b7 95       	ror	r27
    109a:	f7 95       	ror	r31
    109c:	e7 95       	ror	r30
    109e:	9f 5f       	subi	r25, 0xFF	; 255
    10a0:	c1 f7       	brne	.-16     	; 0x1092 <__mulsf3_pse+0x8c>
    10a2:	fe 2b       	or	r31, r30
    10a4:	88 0f       	add	r24, r24
    10a6:	91 1d       	adc	r25, r1
    10a8:	96 95       	lsr	r25
    10aa:	87 95       	ror	r24
    10ac:	97 f9       	bld	r25, 7
    10ae:	08 95       	ret

000010b0 <fdevopen>:
    10b0:	0f 93       	push	r16
    10b2:	1f 93       	push	r17
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	31 f4       	brne	.+12     	; 0x10c8 <fdevopen+0x18>
    10bc:	61 15       	cp	r22, r1
    10be:	71 05       	cpc	r23, r1
    10c0:	19 f4       	brne	.+6      	; 0x10c8 <fdevopen+0x18>
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	39 c0       	rjmp	.+114    	; 0x113a <__stack+0x3b>
    10c8:	8b 01       	movw	r16, r22
    10ca:	ec 01       	movw	r28, r24
    10cc:	6e e0       	ldi	r22, 0x0E	; 14
    10ce:	70 e0       	ldi	r23, 0x00	; 0
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	37 d0       	rcall	.+110    	; 0x1144 <calloc>
    10d6:	fc 01       	movw	r30, r24
    10d8:	89 2b       	or	r24, r25
    10da:	99 f3       	breq	.-26     	; 0x10c2 <fdevopen+0x12>
    10dc:	80 e8       	ldi	r24, 0x80	; 128
    10de:	83 83       	std	Z+3, r24	; 0x03
    10e0:	01 15       	cp	r16, r1
    10e2:	11 05       	cpc	r17, r1
    10e4:	71 f0       	breq	.+28     	; 0x1102 <__stack+0x3>
    10e6:	13 87       	std	Z+11, r17	; 0x0b
    10e8:	02 87       	std	Z+10, r16	; 0x0a
    10ea:	81 e8       	ldi	r24, 0x81	; 129
    10ec:	83 83       	std	Z+3, r24	; 0x03
    10ee:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <__iob>
    10f2:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <__iob+0x1>
    10f6:	89 2b       	or	r24, r25
    10f8:	21 f4       	brne	.+8      	; 0x1102 <__stack+0x3>
    10fa:	f0 93 fd 02 	sts	0x02FD, r31	; 0x8002fd <__iob+0x1>
    10fe:	e0 93 fc 02 	sts	0x02FC, r30	; 0x8002fc <__iob>
    1102:	20 97       	sbiw	r28, 0x00	; 0
    1104:	c9 f0       	breq	.+50     	; 0x1138 <__stack+0x39>
    1106:	d1 87       	std	Z+9, r29	; 0x09
    1108:	c0 87       	std	Z+8, r28	; 0x08
    110a:	83 81       	ldd	r24, Z+3	; 0x03
    110c:	82 60       	ori	r24, 0x02	; 2
    110e:	83 83       	std	Z+3, r24	; 0x03
    1110:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <__iob+0x2>
    1114:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <__iob+0x3>
    1118:	89 2b       	or	r24, r25
    111a:	71 f4       	brne	.+28     	; 0x1138 <__stack+0x39>
    111c:	f0 93 ff 02 	sts	0x02FF, r31	; 0x8002ff <__iob+0x3>
    1120:	e0 93 fe 02 	sts	0x02FE, r30	; 0x8002fe <__iob+0x2>
    1124:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <__iob+0x4>
    1128:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <__iob+0x5>
    112c:	89 2b       	or	r24, r25
    112e:	21 f4       	brne	.+8      	; 0x1138 <__stack+0x39>
    1130:	f0 93 01 03 	sts	0x0301, r31	; 0x800301 <__iob+0x5>
    1134:	e0 93 00 03 	sts	0x0300, r30	; 0x800300 <__iob+0x4>
    1138:	cf 01       	movw	r24, r30
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	1f 91       	pop	r17
    1140:	0f 91       	pop	r16
    1142:	08 95       	ret

00001144 <calloc>:
    1144:	0f 93       	push	r16
    1146:	1f 93       	push	r17
    1148:	cf 93       	push	r28
    114a:	df 93       	push	r29
    114c:	86 9f       	mul	r24, r22
    114e:	80 01       	movw	r16, r0
    1150:	87 9f       	mul	r24, r23
    1152:	10 0d       	add	r17, r0
    1154:	96 9f       	mul	r25, r22
    1156:	10 0d       	add	r17, r0
    1158:	11 24       	eor	r1, r1
    115a:	c8 01       	movw	r24, r16
    115c:	0d d0       	rcall	.+26     	; 0x1178 <malloc>
    115e:	ec 01       	movw	r28, r24
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	21 f0       	breq	.+8      	; 0x116c <calloc+0x28>
    1164:	a8 01       	movw	r20, r16
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	70 e0       	ldi	r23, 0x00	; 0
    116a:	27 d1       	rcall	.+590    	; 0x13ba <memset>
    116c:	ce 01       	movw	r24, r28
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	1f 91       	pop	r17
    1174:	0f 91       	pop	r16
    1176:	08 95       	ret

00001178 <malloc>:
    1178:	0f 93       	push	r16
    117a:	1f 93       	push	r17
    117c:	cf 93       	push	r28
    117e:	df 93       	push	r29
    1180:	82 30       	cpi	r24, 0x02	; 2
    1182:	91 05       	cpc	r25, r1
    1184:	10 f4       	brcc	.+4      	; 0x118a <malloc+0x12>
    1186:	82 e0       	ldi	r24, 0x02	; 2
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	e0 91 04 03 	lds	r30, 0x0304	; 0x800304 <__flp>
    118e:	f0 91 05 03 	lds	r31, 0x0305	; 0x800305 <__flp+0x1>
    1192:	20 e0       	ldi	r18, 0x00	; 0
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	a0 e0       	ldi	r26, 0x00	; 0
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	30 97       	sbiw	r30, 0x00	; 0
    119c:	19 f1       	breq	.+70     	; 0x11e4 <malloc+0x6c>
    119e:	40 81       	ld	r20, Z
    11a0:	51 81       	ldd	r21, Z+1	; 0x01
    11a2:	02 81       	ldd	r16, Z+2	; 0x02
    11a4:	13 81       	ldd	r17, Z+3	; 0x03
    11a6:	48 17       	cp	r20, r24
    11a8:	59 07       	cpc	r21, r25
    11aa:	c8 f0       	brcs	.+50     	; 0x11de <malloc+0x66>
    11ac:	84 17       	cp	r24, r20
    11ae:	95 07       	cpc	r25, r21
    11b0:	69 f4       	brne	.+26     	; 0x11cc <malloc+0x54>
    11b2:	10 97       	sbiw	r26, 0x00	; 0
    11b4:	31 f0       	breq	.+12     	; 0x11c2 <malloc+0x4a>
    11b6:	12 96       	adiw	r26, 0x02	; 2
    11b8:	0c 93       	st	X, r16
    11ba:	12 97       	sbiw	r26, 0x02	; 2
    11bc:	13 96       	adiw	r26, 0x03	; 3
    11be:	1c 93       	st	X, r17
    11c0:	27 c0       	rjmp	.+78     	; 0x1210 <malloc+0x98>
    11c2:	00 93 04 03 	sts	0x0304, r16	; 0x800304 <__flp>
    11c6:	10 93 05 03 	sts	0x0305, r17	; 0x800305 <__flp+0x1>
    11ca:	22 c0       	rjmp	.+68     	; 0x1210 <malloc+0x98>
    11cc:	21 15       	cp	r18, r1
    11ce:	31 05       	cpc	r19, r1
    11d0:	19 f0       	breq	.+6      	; 0x11d8 <malloc+0x60>
    11d2:	42 17       	cp	r20, r18
    11d4:	53 07       	cpc	r21, r19
    11d6:	18 f4       	brcc	.+6      	; 0x11de <malloc+0x66>
    11d8:	9a 01       	movw	r18, r20
    11da:	bd 01       	movw	r22, r26
    11dc:	ef 01       	movw	r28, r30
    11de:	df 01       	movw	r26, r30
    11e0:	f8 01       	movw	r30, r16
    11e2:	db cf       	rjmp	.-74     	; 0x119a <malloc+0x22>
    11e4:	21 15       	cp	r18, r1
    11e6:	31 05       	cpc	r19, r1
    11e8:	f9 f0       	breq	.+62     	; 0x1228 <malloc+0xb0>
    11ea:	28 1b       	sub	r18, r24
    11ec:	39 0b       	sbc	r19, r25
    11ee:	24 30       	cpi	r18, 0x04	; 4
    11f0:	31 05       	cpc	r19, r1
    11f2:	80 f4       	brcc	.+32     	; 0x1214 <malloc+0x9c>
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	9b 81       	ldd	r25, Y+3	; 0x03
    11f8:	61 15       	cp	r22, r1
    11fa:	71 05       	cpc	r23, r1
    11fc:	21 f0       	breq	.+8      	; 0x1206 <malloc+0x8e>
    11fe:	fb 01       	movw	r30, r22
    1200:	93 83       	std	Z+3, r25	; 0x03
    1202:	82 83       	std	Z+2, r24	; 0x02
    1204:	04 c0       	rjmp	.+8      	; 0x120e <malloc+0x96>
    1206:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <__flp+0x1>
    120a:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <__flp>
    120e:	fe 01       	movw	r30, r28
    1210:	32 96       	adiw	r30, 0x02	; 2
    1212:	44 c0       	rjmp	.+136    	; 0x129c <malloc+0x124>
    1214:	fe 01       	movw	r30, r28
    1216:	e2 0f       	add	r30, r18
    1218:	f3 1f       	adc	r31, r19
    121a:	81 93       	st	Z+, r24
    121c:	91 93       	st	Z+, r25
    121e:	22 50       	subi	r18, 0x02	; 2
    1220:	31 09       	sbc	r19, r1
    1222:	39 83       	std	Y+1, r19	; 0x01
    1224:	28 83       	st	Y, r18
    1226:	3a c0       	rjmp	.+116    	; 0x129c <malloc+0x124>
    1228:	20 91 02 03 	lds	r18, 0x0302	; 0x800302 <__brkval>
    122c:	30 91 03 03 	lds	r19, 0x0303	; 0x800303 <__brkval+0x1>
    1230:	23 2b       	or	r18, r19
    1232:	41 f4       	brne	.+16     	; 0x1244 <malloc+0xcc>
    1234:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1238:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    123c:	30 93 03 03 	sts	0x0303, r19	; 0x800303 <__brkval+0x1>
    1240:	20 93 02 03 	sts	0x0302, r18	; 0x800302 <__brkval>
    1244:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1248:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    124c:	21 15       	cp	r18, r1
    124e:	31 05       	cpc	r19, r1
    1250:	41 f4       	brne	.+16     	; 0x1262 <malloc+0xea>
    1252:	2d b7       	in	r18, 0x3d	; 61
    1254:	3e b7       	in	r19, 0x3e	; 62
    1256:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    125a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    125e:	24 1b       	sub	r18, r20
    1260:	35 0b       	sbc	r19, r21
    1262:	e0 91 02 03 	lds	r30, 0x0302	; 0x800302 <__brkval>
    1266:	f0 91 03 03 	lds	r31, 0x0303	; 0x800303 <__brkval+0x1>
    126a:	e2 17       	cp	r30, r18
    126c:	f3 07       	cpc	r31, r19
    126e:	a0 f4       	brcc	.+40     	; 0x1298 <malloc+0x120>
    1270:	2e 1b       	sub	r18, r30
    1272:	3f 0b       	sbc	r19, r31
    1274:	28 17       	cp	r18, r24
    1276:	39 07       	cpc	r19, r25
    1278:	78 f0       	brcs	.+30     	; 0x1298 <malloc+0x120>
    127a:	ac 01       	movw	r20, r24
    127c:	4e 5f       	subi	r20, 0xFE	; 254
    127e:	5f 4f       	sbci	r21, 0xFF	; 255
    1280:	24 17       	cp	r18, r20
    1282:	35 07       	cpc	r19, r21
    1284:	48 f0       	brcs	.+18     	; 0x1298 <malloc+0x120>
    1286:	4e 0f       	add	r20, r30
    1288:	5f 1f       	adc	r21, r31
    128a:	50 93 03 03 	sts	0x0303, r21	; 0x800303 <__brkval+0x1>
    128e:	40 93 02 03 	sts	0x0302, r20	; 0x800302 <__brkval>
    1292:	81 93       	st	Z+, r24
    1294:	91 93       	st	Z+, r25
    1296:	02 c0       	rjmp	.+4      	; 0x129c <malloc+0x124>
    1298:	e0 e0       	ldi	r30, 0x00	; 0
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	cf 01       	movw	r24, r30
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	1f 91       	pop	r17
    12a4:	0f 91       	pop	r16
    12a6:	08 95       	ret

000012a8 <free>:
    12a8:	cf 93       	push	r28
    12aa:	df 93       	push	r29
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	09 f4       	brne	.+2      	; 0x12b2 <free+0xa>
    12b0:	81 c0       	rjmp	.+258    	; 0x13b4 <free+0x10c>
    12b2:	fc 01       	movw	r30, r24
    12b4:	32 97       	sbiw	r30, 0x02	; 2
    12b6:	13 82       	std	Z+3, r1	; 0x03
    12b8:	12 82       	std	Z+2, r1	; 0x02
    12ba:	a0 91 04 03 	lds	r26, 0x0304	; 0x800304 <__flp>
    12be:	b0 91 05 03 	lds	r27, 0x0305	; 0x800305 <__flp+0x1>
    12c2:	10 97       	sbiw	r26, 0x00	; 0
    12c4:	81 f4       	brne	.+32     	; 0x12e6 <free+0x3e>
    12c6:	20 81       	ld	r18, Z
    12c8:	31 81       	ldd	r19, Z+1	; 0x01
    12ca:	82 0f       	add	r24, r18
    12cc:	93 1f       	adc	r25, r19
    12ce:	20 91 02 03 	lds	r18, 0x0302	; 0x800302 <__brkval>
    12d2:	30 91 03 03 	lds	r19, 0x0303	; 0x800303 <__brkval+0x1>
    12d6:	28 17       	cp	r18, r24
    12d8:	39 07       	cpc	r19, r25
    12da:	51 f5       	brne	.+84     	; 0x1330 <free+0x88>
    12dc:	f0 93 03 03 	sts	0x0303, r31	; 0x800303 <__brkval+0x1>
    12e0:	e0 93 02 03 	sts	0x0302, r30	; 0x800302 <__brkval>
    12e4:	67 c0       	rjmp	.+206    	; 0x13b4 <free+0x10c>
    12e6:	ed 01       	movw	r28, r26
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	ce 17       	cp	r28, r30
    12ee:	df 07       	cpc	r29, r31
    12f0:	40 f4       	brcc	.+16     	; 0x1302 <free+0x5a>
    12f2:	4a 81       	ldd	r20, Y+2	; 0x02
    12f4:	5b 81       	ldd	r21, Y+3	; 0x03
    12f6:	9e 01       	movw	r18, r28
    12f8:	41 15       	cp	r20, r1
    12fa:	51 05       	cpc	r21, r1
    12fc:	f1 f0       	breq	.+60     	; 0x133a <free+0x92>
    12fe:	ea 01       	movw	r28, r20
    1300:	f5 cf       	rjmp	.-22     	; 0x12ec <free+0x44>
    1302:	d3 83       	std	Z+3, r29	; 0x03
    1304:	c2 83       	std	Z+2, r28	; 0x02
    1306:	40 81       	ld	r20, Z
    1308:	51 81       	ldd	r21, Z+1	; 0x01
    130a:	84 0f       	add	r24, r20
    130c:	95 1f       	adc	r25, r21
    130e:	c8 17       	cp	r28, r24
    1310:	d9 07       	cpc	r29, r25
    1312:	59 f4       	brne	.+22     	; 0x132a <free+0x82>
    1314:	88 81       	ld	r24, Y
    1316:	99 81       	ldd	r25, Y+1	; 0x01
    1318:	84 0f       	add	r24, r20
    131a:	95 1f       	adc	r25, r21
    131c:	02 96       	adiw	r24, 0x02	; 2
    131e:	91 83       	std	Z+1, r25	; 0x01
    1320:	80 83       	st	Z, r24
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	9b 81       	ldd	r25, Y+3	; 0x03
    1326:	93 83       	std	Z+3, r25	; 0x03
    1328:	82 83       	std	Z+2, r24	; 0x02
    132a:	21 15       	cp	r18, r1
    132c:	31 05       	cpc	r19, r1
    132e:	29 f4       	brne	.+10     	; 0x133a <free+0x92>
    1330:	f0 93 05 03 	sts	0x0305, r31	; 0x800305 <__flp+0x1>
    1334:	e0 93 04 03 	sts	0x0304, r30	; 0x800304 <__flp>
    1338:	3d c0       	rjmp	.+122    	; 0x13b4 <free+0x10c>
    133a:	e9 01       	movw	r28, r18
    133c:	fb 83       	std	Y+3, r31	; 0x03
    133e:	ea 83       	std	Y+2, r30	; 0x02
    1340:	49 91       	ld	r20, Y+
    1342:	59 91       	ld	r21, Y+
    1344:	c4 0f       	add	r28, r20
    1346:	d5 1f       	adc	r29, r21
    1348:	ec 17       	cp	r30, r28
    134a:	fd 07       	cpc	r31, r29
    134c:	61 f4       	brne	.+24     	; 0x1366 <free+0xbe>
    134e:	80 81       	ld	r24, Z
    1350:	91 81       	ldd	r25, Z+1	; 0x01
    1352:	84 0f       	add	r24, r20
    1354:	95 1f       	adc	r25, r21
    1356:	02 96       	adiw	r24, 0x02	; 2
    1358:	e9 01       	movw	r28, r18
    135a:	99 83       	std	Y+1, r25	; 0x01
    135c:	88 83       	st	Y, r24
    135e:	82 81       	ldd	r24, Z+2	; 0x02
    1360:	93 81       	ldd	r25, Z+3	; 0x03
    1362:	9b 83       	std	Y+3, r25	; 0x03
    1364:	8a 83       	std	Y+2, r24	; 0x02
    1366:	e0 e0       	ldi	r30, 0x00	; 0
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	12 96       	adiw	r26, 0x02	; 2
    136c:	8d 91       	ld	r24, X+
    136e:	9c 91       	ld	r25, X
    1370:	13 97       	sbiw	r26, 0x03	; 3
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	19 f0       	breq	.+6      	; 0x137c <free+0xd4>
    1376:	fd 01       	movw	r30, r26
    1378:	dc 01       	movw	r26, r24
    137a:	f7 cf       	rjmp	.-18     	; 0x136a <free+0xc2>
    137c:	8d 91       	ld	r24, X+
    137e:	9c 91       	ld	r25, X
    1380:	11 97       	sbiw	r26, 0x01	; 1
    1382:	9d 01       	movw	r18, r26
    1384:	2e 5f       	subi	r18, 0xFE	; 254
    1386:	3f 4f       	sbci	r19, 0xFF	; 255
    1388:	82 0f       	add	r24, r18
    138a:	93 1f       	adc	r25, r19
    138c:	20 91 02 03 	lds	r18, 0x0302	; 0x800302 <__brkval>
    1390:	30 91 03 03 	lds	r19, 0x0303	; 0x800303 <__brkval+0x1>
    1394:	28 17       	cp	r18, r24
    1396:	39 07       	cpc	r19, r25
    1398:	69 f4       	brne	.+26     	; 0x13b4 <free+0x10c>
    139a:	30 97       	sbiw	r30, 0x00	; 0
    139c:	29 f4       	brne	.+10     	; 0x13a8 <free+0x100>
    139e:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <__flp+0x1>
    13a2:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <__flp>
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <free+0x104>
    13a8:	13 82       	std	Z+3, r1	; 0x03
    13aa:	12 82       	std	Z+2, r1	; 0x02
    13ac:	b0 93 03 03 	sts	0x0303, r27	; 0x800303 <__brkval+0x1>
    13b0:	a0 93 02 03 	sts	0x0302, r26	; 0x800302 <__brkval>
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	08 95       	ret

000013ba <memset>:
    13ba:	dc 01       	movw	r26, r24
    13bc:	01 c0       	rjmp	.+2      	; 0x13c0 <memset+0x6>
    13be:	6d 93       	st	X+, r22
    13c0:	41 50       	subi	r20, 0x01	; 1
    13c2:	50 40       	sbci	r21, 0x00	; 0
    13c4:	e0 f7       	brcc	.-8      	; 0x13be <memset+0x4>
    13c6:	08 95       	ret

000013c8 <_exit>:
    13c8:	f8 94       	cli

000013ca <__stop_program>:
    13ca:	ff cf       	rjmp	.-2      	; 0x13ca <__stop_program>
