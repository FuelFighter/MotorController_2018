
MotorController_2018.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00001342  000013d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001342  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000283  00800106  00800106  000013dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000140c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000408  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004581  00000000  00000000  00001854  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000167c  00000000  00000000  00005dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000020cb  00000000  00000000  00007451  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cf4  00000000  00000000  0000951c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001234  00000000  00000000  0000a210  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003932  00000000  00000000  0000b444  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000358  00000000  00000000  0000ed76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	7e c3       	rjmp	.+1788   	; 0x716 <__vector_6>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d0 c2       	rjmp	.+1440   	; 0x5d2 <__vector_12>
      32:	00 00       	nop
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	74 c2       	rjmp	.+1256   	; 0x52a <__vector_16>
      42:	00 00       	nop
      44:	25 c7       	rjmp	.+3658   	; 0xe90 <__vector_17>
      46:	00 00       	nop
      48:	78 c4       	rjmp	.+2288   	; 0x93a <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	6a c1       	rjmp	.+724    	; 0x32a <__vector_21>
      56:	00 00       	nop
      58:	4a c1       	rjmp	.+660    	; 0x2ee <__vector_22>
      5a:	00 00       	nop
      5c:	39 c0       	rjmp	.+114    	; 0xd0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	8d c1       	rjmp	.+794    	; 0x39c <__vector_32>
      82:	00 00       	nop
      84:	6d c1       	rjmp	.+730    	; 0x360 <__vector_33>
      86:	00 00       	nop
      88:	23 c0       	rjmp	.+70     	; 0xd0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e2 e4       	ldi	r30, 0x42	; 66
      a8:	f3 e1       	ldi	r31, 0x13	; 19
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a6 30       	cpi	r26, 0x06	; 6
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	23 e0       	ldi	r18, 0x03	; 3
      bc:	a6 e0       	ldi	r26, 0x06	; 6
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a9 38       	cpi	r26, 0x89	; 137
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	fc d1       	rcall	.+1016   	; 0x4c4 <main>
      cc:	0c 94 9f 09 	jmp	0x133e	; 0x133e <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <controller>:


static float f32_Integrator = 0.0 ;
static float f32_DutyCycleCmd = 50.0 ;

void controller(float f32_current_cmd, float f32_prev_current){
      d2:	8f 92       	push	r8
      d4:	9f 92       	push	r9
      d6:	af 92       	push	r10
      d8:	bf 92       	push	r11
      da:	cf 92       	push	r12
      dc:	df 92       	push	r13
      de:	ef 92       	push	r14
      e0:	ff 92       	push	r15
      e2:	cf 93       	push	r28
	
	float f32_CurrentDelta=f32_current_cmd-f32_prev_current	;
      e4:	df 93       	push	r29
      e6:	10 d7       	rcall	.+3616   	; 0xf08 <__subsf3>
      e8:	4b 01       	movw	r8, r22

	f32_Integrator+=f32_CurrentDelta*TimeStep ;
      ea:	5c 01       	movw	r10, r24
      ec:	2a e0       	ldi	r18, 0x0A	; 10
      ee:	37 ed       	ldi	r19, 0xD7	; 215
      f0:	43 e2       	ldi	r20, 0x23	; 35
      f2:	5c e3       	ldi	r21, 0x3C	; 60
      f4:	0e 94 3c 09 	call	0x1278	; 0x1278 <__mulsf3>
      f8:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
      fc:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     100:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__data_end+0x2>
     104:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__data_end+0x3>
     108:	00 d7       	rcall	.+3584   	; 0xf0a <__addsf3>
     10a:	6b 01       	movw	r12, r22
     10c:	7c 01       	movw	r14, r24
     10e:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <__data_end>
     112:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <__data_end+0x1>
     116:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end+0x2>
     11a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x3>
	f32_DutyCycleCmd=Kp*f32_CurrentDelta+f32_Integrator/Ti ;
	f32_DutyCycleCmd=(f32_DutyCycleCmd+50) ;
     11e:	23 ea       	ldi	r18, 0xA3	; 163
     120:	36 e0       	ldi	r19, 0x06	; 6
     122:	43 ed       	ldi	r20, 0xD3	; 211
     124:	5a e3       	ldi	r21, 0x3A	; 58
     126:	c5 01       	movw	r24, r10
     128:	b4 01       	movw	r22, r8
     12a:	0e 94 3c 09 	call	0x1278	; 0x1278 <__mulsf3>
     12e:	4b 01       	movw	r8, r22
     130:	5c 01       	movw	r10, r24
     132:	2c e5       	ldi	r18, 0x5C	; 92
     134:	3f e8       	ldi	r19, 0x8F	; 143
     136:	42 ec       	ldi	r20, 0xC2	; 194
     138:	50 e4       	ldi	r21, 0x40	; 64
     13a:	c7 01       	movw	r24, r14
     13c:	b6 01       	movw	r22, r12
     13e:	4d d7       	rcall	.+3738   	; 0xfda <__divsf3>
     140:	9b 01       	movw	r18, r22
     142:	ac 01       	movw	r20, r24
     144:	c5 01       	movw	r24, r10
     146:	b4 01       	movw	r22, r8
     148:	e0 d6       	rcall	.+3520   	; 0xf0a <__addsf3>
     14a:	20 e0       	ldi	r18, 0x00	; 0
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	48 e4       	ldi	r20, 0x48	; 72
     150:	52 e4       	ldi	r21, 0x42	; 66
     152:	db d6       	rcall	.+3510   	; 0xf0a <__addsf3>
     154:	6b 01       	movw	r12, r22
     156:	7c 01       	movw	r14, r24
     158:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     15c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     160:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     164:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	
	//bounding of duty cycle for well function of bootstrap capacitors

	if (f32_DutyCycleCmd > 95)
     168:	20 e0       	ldi	r18, 0x00	; 0
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	4e eb       	ldi	r20, 0xBE	; 190
     16e:	52 e4       	ldi	r21, 0x42	; 66
     170:	0e 94 38 09 	call	0x1270	; 0x1270 <__gesf2>
     174:	18 16       	cp	r1, r24
	{
		f32_DutyCycleCmd = 95;
     176:	6c f4       	brge	.+26     	; 0x192 <controller+0xc0>
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	ae eb       	ldi	r26, 0xBE	; 190
     17e:	b2 e4       	ldi	r27, 0x42	; 66
     180:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     184:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     188:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     18c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	}
	
	if (f32_DutyCycleCmd < 5)
     190:	15 c0       	rjmp	.+42     	; 0x1bc <controller+0xea>
     192:	20 e0       	ldi	r18, 0x00	; 0
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	40 ea       	ldi	r20, 0xA0	; 160
     198:	50 e4       	ldi	r21, 0x40	; 64
     19a:	c7 01       	movw	r24, r14
     19c:	b6 01       	movw	r22, r12
     19e:	19 d7       	rcall	.+3634   	; 0xfd2 <__cmpsf2>
     1a0:	88 23       	and	r24, r24
	{
		f32_DutyCycleCmd = 5;
     1a2:	64 f4       	brge	.+24     	; 0x1bc <controller+0xea>
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	a0 ea       	ldi	r26, 0xA0	; 160
     1aa:	b0 e4       	ldi	r27, 0x40	; 64
     1ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     1b0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     1b4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     1b8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	}
	
	OCR3A = (int)((f32_DutyCycleCmd/100)*ICR3) ; //PWM_PE3 (non inverted)
     1bc:	c0 91 96 00 	lds	r28, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
     1c0:	d0 91 97 00 	lds	r29, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	48 ec       	ldi	r20, 0xC8	; 200
     1ca:	52 e4       	ldi	r21, 0x42	; 66
     1cc:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     1d0:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     1d4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     1d8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     1dc:	fe d6       	rcall	.+3580   	; 0xfda <__divsf3>
     1de:	6b 01       	movw	r12, r22
     1e0:	7c 01       	movw	r14, r24
     1e2:	be 01       	movw	r22, r28
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	91 d7       	rcall	.+3874   	; 0x110c <__floatunsisf>
     1ea:	9b 01       	movw	r18, r22
     1ec:	ac 01       	movw	r20, r24
     1ee:	c7 01       	movw	r24, r14
     1f0:	b6 01       	movw	r22, r12
     1f2:	0e 94 3c 09 	call	0x1278	; 0x1278 <__mulsf3>
     1f6:	59 d7       	rcall	.+3762   	; 0x10aa <__fixsfsi>
     1f8:	e8 e9       	ldi	r30, 0x98	; 152
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	71 83       	std	Z+1, r23	; 0x01
	OCR3B = OCR3A ; //PWM_PE4 (inverted)
     1fe:	60 83       	st	Z, r22
     200:	80 81       	ld	r24, Z
     202:	91 81       	ldd	r25, Z+1	; 0x01
     204:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     208:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
}
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	ff 90       	pop	r15
     212:	ef 90       	pop	r14
     214:	df 90       	pop	r13
     216:	cf 90       	pop	r12
     218:	bf 90       	pop	r11
     21a:	af 90       	pop	r10
     21c:	9f 90       	pop	r9
     21e:	8f 90       	pop	r8
     220:	08 95       	ret

00000222 <speed_init>:
#define LOWPASS_CONSTANT_S 0.1

void speed_init()
{
	//pin
	DDRE &= ~(1<<PE5); //define pin as input
     222:	6d 98       	cbi	0x0d, 5	; 13
	PORTE &= ~(1<<PE5); //no pull-up 
     224:	75 98       	cbi	0x0e, 5	; 14
	//int
	EIMSK &= ~(1<<INT5) ; // interrupt disable to prevent interrupt raise during init
     226:	ed 98       	cbi	0x1d, 5	; 29
	EICRB |= (1<<ISC50)|(1<<ISC51); // interrupt on rising edge
     228:	ea e6       	ldi	r30, 0x6A	; 106
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	8c 60       	ori	r24, 0x0C	; 12
     230:	80 83       	st	Z, r24
	EIFR |= (1<<INTF5) ; // clear flag
     232:	e5 9a       	sbi	0x1c, 5	; 28
	EIMSK |= (1<<INT5) ; // interrupt enable
     234:	ed 9a       	sbi	0x1d, 5	; 29
     236:	08 95       	ret

00000238 <handle_speed_sensor>:
}

void handle_speed_sensor(uint8_t *u8_speed,uint16_t u16_counter, uint8_t u8_period) // period in ms
{
     238:	8f 92       	push	r8
     23a:	9f 92       	push	r9
     23c:	af 92       	push	r10
     23e:	bf 92       	push	r11
     240:	ef 92       	push	r14
     242:	ff 92       	push	r15
     244:	1f 93       	push	r17
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	1f 92       	push	r1
     24c:	cd b7       	in	r28, 0x3d	; 61
     24e:	de b7       	in	r29, 0x3e	; 62
     250:	7c 01       	movw	r14, r24
     252:	14 2f       	mov	r17, r20
	volatile uint8_t u8_new_speed = (uint8_t)((float)u16_counter*COUNT_TO_DISTANCE/u8_period);
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	59 d7       	rcall	.+3762   	; 0x110c <__floatunsisf>
     25a:	20 e0       	ldi	r18, 0x00	; 0
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	40 e0       	ldi	r20, 0x00	; 0
     260:	5f e3       	ldi	r21, 0x3F	; 63
     262:	0e 94 3c 09 	call	0x1278	; 0x1278 <__mulsf3>
     266:	23 ec       	ldi	r18, 0xC3	; 195
     268:	35 ef       	ldi	r19, 0xF5	; 245
     26a:	48 e4       	ldi	r20, 0x48	; 72
     26c:	50 e4       	ldi	r21, 0x40	; 64
     26e:	0e 94 3c 09 	call	0x1278	; 0x1278 <__mulsf3>
     272:	20 e0       	ldi	r18, 0x00	; 0
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	40 e8       	ldi	r20, 0x80	; 128
     278:	5e e3       	ldi	r21, 0x3E	; 62
     27a:	fe d7       	rcall	.+4092   	; 0x1278 <__mulsf3>
     27c:	4b 01       	movw	r8, r22
     27e:	5c 01       	movw	r10, r24
     280:	61 2f       	mov	r22, r17
     282:	70 e0       	ldi	r23, 0x00	; 0
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	43 d7       	rcall	.+3718   	; 0x1110 <__floatsisf>
     28a:	9b 01       	movw	r18, r22
     28c:	ac 01       	movw	r20, r24
     28e:	c5 01       	movw	r24, r10
     290:	b4 01       	movw	r22, r8
     292:	a3 d6       	rcall	.+3398   	; 0xfda <__divsf3>
     294:	0f d7       	rcall	.+3614   	; 0x10b4 <__fixunssfsi>
     296:	69 83       	std	Y+1, r22	; 0x01
	*u8_speed = (*u8_speed)*(1-LOWPASS_CONSTANT_S) + LOWPASS_CONSTANT_S*u8_new_speed ;// low pass filter
     298:	19 81       	ldd	r17, Y+1	; 0x01
     29a:	f7 01       	movw	r30, r14
     29c:	60 81       	ld	r22, Z
     29e:	70 e0       	ldi	r23, 0x00	; 0
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	35 d7       	rcall	.+3690   	; 0x1110 <__floatsisf>
     2a6:	26 e6       	ldi	r18, 0x66	; 102
     2a8:	36 e6       	ldi	r19, 0x66	; 102
     2aa:	46 e6       	ldi	r20, 0x66	; 102
     2ac:	5f e3       	ldi	r21, 0x3F	; 63
     2ae:	e4 d7       	rcall	.+4040   	; 0x1278 <__mulsf3>
     2b0:	4b 01       	movw	r8, r22
     2b2:	5c 01       	movw	r10, r24
     2b4:	61 2f       	mov	r22, r17
     2b6:	70 e0       	ldi	r23, 0x00	; 0
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	29 d7       	rcall	.+3666   	; 0x1110 <__floatsisf>
     2be:	2d ec       	ldi	r18, 0xCD	; 205
     2c0:	3c ec       	ldi	r19, 0xCC	; 204
     2c2:	4c ec       	ldi	r20, 0xCC	; 204
     2c4:	5d e3       	ldi	r21, 0x3D	; 61
     2c6:	d8 d7       	rcall	.+4016   	; 0x1278 <__mulsf3>
     2c8:	9b 01       	movw	r18, r22
     2ca:	ac 01       	movw	r20, r24
     2cc:	c5 01       	movw	r24, r10
     2ce:	b4 01       	movw	r22, r8
     2d0:	1c d6       	rcall	.+3128   	; 0xf0a <__addsf3>
     2d2:	f0 d6       	rcall	.+3552   	; 0x10b4 <__fixunssfsi>
     2d4:	f7 01       	movw	r30, r14
     2d6:	60 83       	st	Z, r22
}
     2d8:	0f 90       	pop	r0
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	1f 91       	pop	r17
     2e0:	ff 90       	pop	r15
     2e2:	ef 90       	pop	r14
     2e4:	bf 90       	pop	r11
     2e6:	af 90       	pop	r10
     2e8:	9f 90       	pop	r9
     2ea:	8f 90       	pop	r8
     2ec:	08 95       	ret

000002ee <__vector_22>:

#ifndef NO_TX0_INTERRUPT

	ISR(UDRE0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     2ee:	0f 93       	push	r16
     2f0:	0f b7       	in	r16, 0x3f	; 63
     2f2:	ef 93       	push	r30
     2f4:	ff 93       	push	r31
     2f6:	e0 91 dc 02 	lds	r30, 0x02DC	; 0x8002dc <tx0_Tail>
     2fa:	f0 91 fe 02 	lds	r31, 0x02FE	; 0x8002fe <tx0_Head>
     2fe:	e3 95       	inc	r30
     300:	ef 71       	andi	r30, 0x1F	; 31
     302:	ef 13       	cpse	r30, r31
     304:	05 c0       	rjmp	.+10     	; 0x310 <USART0_TX_CONTINUE>
     306:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     30a:	ff 7d       	andi	r31, 0xDF	; 223
     30c:	f0 93 c1 00 	sts	0x00C1, r31	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

00000310 <USART0_TX_CONTINUE>:
     310:	e0 93 dc 02 	sts	0x02DC, r30	; 0x8002dc <tx0_Tail>
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	ed 5d       	subi	r30, 0xDD	; 221
     318:	fc 4f       	sbci	r31, 0xFC	; 252
     31a:	e0 81       	ld	r30, Z
     31c:	e0 93 c6 00 	sts	0x00C6, r30	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

00000320 <USART0_TX_EXIT>:
     320:	ff 91       	pop	r31
     322:	ef 91       	pop	r30
     324:	0f bf       	out	0x3f, r16	; 63
     326:	0f 91       	pop	r16
     328:	18 95       	reti

0000032a <__vector_21>:

#ifndef NO_RX0_INTERRUPT

	ISR(RX0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     32a:	0f 93       	push	r16
     32c:	0f b7       	in	r16, 0x3f	; 63
     32e:	9f 93       	push	r25
     330:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     334:	ef 93       	push	r30
     336:	ff 93       	push	r31
     338:	e0 91 1f 03 	lds	r30, 0x031F	; 0x80031f <rx0_Head>
     33c:	f0 91 dd 02 	lds	r31, 0x02DD	; 0x8002dd <rx0_Tail>
     340:	e3 95       	inc	r30
     342:	ef 71       	andi	r30, 0x1F	; 31
     344:	fe 17       	cp	r31, r30
     346:	31 f0       	breq	.+12     	; 0x354 <USART0_RX_EXIT>
     348:	e0 93 1f 03 	sts	0x031F, r30	; 0x80031f <rx0_Head>
     34c:	f0 e0       	ldi	r31, 0x00	; 0
     34e:	e5 54       	subi	r30, 0x45	; 69
     350:	fd 4f       	sbci	r31, 0xFD	; 253
     352:	90 83       	st	Z, r25

00000354 <USART0_RX_EXIT>:
     354:	ff 91       	pop	r31
     356:	ef 91       	pop	r30
     358:	9f 91       	pop	r25
     35a:	0f bf       	out	0x3f, r16	; 63
     35c:	0f 91       	pop	r16
     35e:	18 95       	reti

00000360 <__vector_33>:

#ifndef NO_TX1_INTERRUPT

	ISR(UDRE1_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     360:	0f 93       	push	r16
     362:	0f b7       	in	r16, 0x3f	; 63
     364:	ef 93       	push	r30
     366:	ff 93       	push	r31
     368:	e0 91 20 03 	lds	r30, 0x0320	; 0x800320 <tx1_Tail>
     36c:	f0 91 22 03 	lds	r31, 0x0322	; 0x800322 <tx1_Head>
     370:	e3 95       	inc	r30
     372:	ef 71       	andi	r30, 0x1F	; 31
     374:	ef 13       	cpse	r30, r31
     376:	05 c0       	rjmp	.+10     	; 0x382 <USART1_TX_CONTINUE>
     378:	f0 91 c9 00 	lds	r31, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     37c:	ff 7d       	andi	r31, 0xDF	; 223
     37e:	f0 93 c9 00 	sts	0x00C9, r31	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

00000382 <USART1_TX_CONTINUE>:
     382:	e0 93 20 03 	sts	0x0320, r30	; 0x800320 <tx1_Tail>
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	e2 52       	subi	r30, 0x22	; 34
     38a:	fd 4f       	sbci	r31, 0xFD	; 253
     38c:	e0 81       	ld	r30, Z
     38e:	e0 93 ce 00 	sts	0x00CE, r30	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>

00000392 <USART1_TX_EXIT>:
     392:	ff 91       	pop	r31
     394:	ef 91       	pop	r30
     396:	0f bf       	out	0x3f, r16	; 63
     398:	0f 91       	pop	r16
     39a:	18 95       	reti

0000039c <__vector_32>:

#ifndef NO_RX1_INTERRUPT
	
	ISR(RX1_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     39c:	0f 93       	push	r16
     39e:	0f b7       	in	r16, 0x3f	; 63
     3a0:	9f 93       	push	r25
     3a2:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     3a6:	ef 93       	push	r30
     3a8:	ff 93       	push	r31
     3aa:	e0 91 21 03 	lds	r30, 0x0321	; 0x800321 <rx1_Head>
     3ae:	f0 91 db 02 	lds	r31, 0x02DB	; 0x8002db <rx1_Tail>
     3b2:	e3 95       	inc	r30
     3b4:	ef 71       	andi	r30, 0x1F	; 31
     3b6:	fe 17       	cp	r31, r30
     3b8:	31 f0       	breq	.+12     	; 0x3c6 <USART1_RX_EXIT>
     3ba:	e0 93 21 03 	sts	0x0321, r30	; 0x800321 <rx1_Head>
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	e1 50       	subi	r30, 0x01	; 1
     3c2:	fd 4f       	sbci	r31, 0xFD	; 253
     3c4:	90 83       	st	Z, r25

000003c6 <USART1_RX_EXIT>:
     3c6:	ff 91       	pop	r31
     3c8:	ef 91       	pop	r30
     3ca:	9f 91       	pop	r25
     3cc:	0f bf       	out	0x3f, r16	; 63
     3ce:	0f 91       	pop	r16
     3d0:	18 95       	reti

000003d2 <timer1_init_ts>:

//for speed
static uint16_t u16_speed_count = 0;

void timer1_init_ts(){
	TCCR1B |= (1<<CS10)|(1<<CS11); // timer 1 prescaler set CLK/64
     3d2:	e1 e8       	ldi	r30, 0x81	; 129
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	80 81       	ld	r24, Z
     3d8:	83 60       	ori	r24, 0x03	; 3
     3da:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12); //CTC
     3dc:	80 81       	ld	r24, Z
     3de:	88 60       	ori	r24, 0x08	; 8
     3e0:	80 83       	st	Z, r24
	TCNT1 = 0; //reset timer value
     3e2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     3e6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIMSK1 |= (1<<OCIE1A); //enable interrupt
     3ea:	ef e6       	ldi	r30, 0x6F	; 111
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	80 81       	ld	r24, Z
     3f0:	82 60       	ori	r24, 0x02	; 2
     3f2:	80 83       	st	Z, r24
	OCR1A = 125 - 1; //compare value //every 1ms
     3f4:	8c e7       	ldi	r24, 0x7C	; 124
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     3fc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     400:	08 95       	ret

00000402 <timer0_init_ts>:
}

void timer0_init_ts(){ 
	TCCR0A |= (1<<CS10)|(1<<CS11); // timer 0 prescaler set CLK/1024
     402:	84 b5       	in	r24, 0x24	; 36
     404:	83 60       	ori	r24, 0x03	; 3
     406:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM01); //CTC
     408:	84 b5       	in	r24, 0x24	; 36
     40a:	88 60       	ori	r24, 0x08	; 8
     40c:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0; //reset timer value
     40e:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1<<OCIE0A); //enable interrupt
     410:	ee e6       	ldi	r30, 0x6E	; 110
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	80 81       	ld	r24, Z
     416:	82 60       	ori	r24, 0x02	; 2
     418:	80 83       	st	Z, r24
	OCR0A = 79; //compare value
     41a:	8f e4       	ldi	r24, 0x4F	; 79
     41c:	87 bd       	out	0x27, r24	; 39
     41e:	08 95       	ret

00000420 <handle_can>:
	.mamp = 0,
	.motor_status = IDLE,
};


void handle_can(ModuleValues_t *vals, CanMessage_t *rx){
     420:	0f 93       	push	r16
     422:	1f 93       	push	r17
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	8c 01       	movw	r16, r24
     42a:	eb 01       	movw	r28, r22
	if (can_read_message_if_new(rx)){
     42c:	cb 01       	movw	r24, r22
     42e:	cb d3       	rcall	.+1942   	; 0xbc6 <can_read_message_if_new>
     430:	88 23       	and	r24, r24
     432:	b9 f0       	breq	.+46     	; 0x462 <handle_can+0x42>
		switch (rx->id){
     434:	88 81       	ld	r24, Y
     436:	99 81       	ldd	r25, Y+1	; 0x01
     438:	80 31       	cpi	r24, 0x10	; 16
     43a:	21 e0       	ldi	r18, 0x01	; 1
     43c:	92 07       	cpc	r25, r18
     43e:	21 f0       	breq	.+8      	; 0x448 <handle_can+0x28>
     440:	80 33       	cpi	r24, 0x30	; 48
     442:	92 40       	sbci	r25, 0x02	; 2
     444:	41 f0       	breq	.+16     	; 0x456 <handle_can+0x36>
     446:	0d c0       	rjmp	.+26     	; 0x462 <handle_can+0x42>
			case BRAKE_CAN_ID:
				vals->braking = rx->data.u8[0];
     448:	8b 81       	ldd	r24, Y+3	; 0x03
     44a:	f8 01       	movw	r30, r16
     44c:	84 83       	std	Z+4, r24	; 0x04
				u8_watchdog = WATCHDOG_RELOAD_VALUE ;
     44e:	85 e0       	ldi	r24, 0x05	; 5
     450:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <u8_watchdog>
				break;
     454:	06 c0       	rjmp	.+12     	; 0x462 <handle_can+0x42>
			case FORWARD_CAN_ID:
				vals->u8_throttle_cmd = rx->data.u8[3];
     456:	8e 81       	ldd	r24, Y+6	; 0x06
     458:	f8 01       	movw	r30, r16
     45a:	80 83       	st	Z, r24
				u8_watchdog = WATCHDOG_RELOAD_VALUE ;
     45c:	85 e0       	ldi	r24, 0x05	; 5
     45e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <u8_watchdog>
				vals->rpm = rx->data.u16[ENCODER_CHANNEL];
				break;
				*/
		}
	}
}
     462:	df 91       	pop	r29
     464:	cf 91       	pop	r28
     466:	1f 91       	pop	r17
     468:	0f 91       	pop	r16
     46a:	08 95       	ret

0000046c <handle_motor_status_can_msg>:

void handle_motor_status_can_msg(uint8_t *send, ModuleValues_t *vals){
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
	if(*send){
     470:	fc 01       	movw	r30, r24
     472:	20 81       	ld	r18, Z
     474:	22 23       	and	r18, r18
     476:	19 f1       	breq	.+70     	; 0x4be <handle_motor_status_can_msg+0x52>
     478:	fb 01       	movw	r30, r22
     47a:	ec 01       	movw	r28, r24
		txFrame.data.u8[0] = vals->motor_status;
     47c:	ae e7       	ldi	r26, 0x7E	; 126
     47e:	b3 e0       	ldi	r27, 0x03	; 3
     480:	81 85       	ldd	r24, Z+9	; 0x09
     482:	13 96       	adiw	r26, 0x03	; 3
     484:	8c 93       	st	X, r24
     486:	13 97       	sbiw	r26, 0x03	; 3
		txFrame.data.u8[1] = vals->u8_throttle_cmd;
     488:	80 81       	ld	r24, Z
     48a:	14 96       	adiw	r26, 0x04	; 4
     48c:	8c 93       	st	X, r24
     48e:	14 97       	sbiw	r26, 0x04	; 4
		txFrame.data.u16[1] = vals->mamp;
     490:	85 81       	ldd	r24, Z+5	; 0x05
     492:	96 81       	ldd	r25, Z+6	; 0x06
     494:	16 96       	adiw	r26, 0x06	; 6
     496:	9c 93       	st	X, r25
     498:	8e 93       	st	-X, r24
     49a:	15 97       	sbiw	r26, 0x05	; 5
		txFrame.data.u16[2] = OCR3B ;   //not useful
     49c:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
     4a0:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     4a4:	18 96       	adiw	r26, 0x08	; 8
     4a6:	9c 93       	st	X, r25
     4a8:	8e 93       	st	-X, r24
     4aa:	17 97       	sbiw	r26, 0x07	; 7
		txFrame.data.u16[3] = vals->rpm;
     4ac:	82 81       	ldd	r24, Z+2	; 0x02
     4ae:	93 81       	ldd	r25, Z+3	; 0x03
     4b0:	1a 96       	adiw	r26, 0x0a	; 10
     4b2:	9c 93       	st	X, r25
     4b4:	8e 93       	st	-X, r24
     4b6:	19 97       	sbiw	r26, 0x09	; 9
		
		can_send_message(&txFrame);
     4b8:	cd 01       	movw	r24, r26
     4ba:	c8 d3       	rcall	.+1936   	; 0xc4c <can_send_message>
		*send = 0;
     4bc:	18 82       	st	Y, r1
	}
}
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	08 95       	ret

000004c4 <main>:

int main(void)	
{
	cli();
     4c4:	f8 94       	cli
	pid_init(&Current, 0.1, 0.05, 0, 0);
     4c6:	81 2c       	mov	r8, r1
     4c8:	91 2c       	mov	r9, r1
     4ca:	54 01       	movw	r10, r8
     4cc:	75 01       	movw	r14, r10
     4ce:	64 01       	movw	r12, r8
     4d0:	0d ec       	ldi	r16, 0xCD	; 205
     4d2:	1c ec       	ldi	r17, 0xCC	; 204
     4d4:	2c e4       	ldi	r18, 0x4C	; 76
     4d6:	3d e3       	ldi	r19, 0x3D	; 61
     4d8:	4d ec       	ldi	r20, 0xCD	; 205
     4da:	5c ec       	ldi	r21, 0xCC	; 204
     4dc:	6c ec       	ldi	r22, 0xCC	; 204
     4de:	7d e3       	ldi	r23, 0x3D	; 61
     4e0:	86 e6       	ldi	r24, 0x66	; 102
     4e2:	93 e0       	ldi	r25, 0x03	; 3
	pwm_init();
     4e4:	2f d1       	rcall	.+606    	; 0x744 <pid_init>
     4e6:	30 d4       	rcall	.+2144   	; 0xd48 <pwm_init>
	can_init(0,0);
     4e8:	60 e0       	ldi	r22, 0x00	; 0
     4ea:	70 e0       	ldi	r23, 0x00	; 0
	timer1_init_ts();
	timer0_init_ts();
     4ec:	80 e0       	ldi	r24, 0x00	; 0
	speed_init();
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	15 d3       	rcall	.+1578   	; 0xb1c <can_init>
	
	spi_init(DIV_2); // init of SPI for external ADC device
     4f2:	6f df       	rcall	.-290    	; 0x3d2 <timer1_init_ts>
     4f4:	86 df       	rcall	.-244    	; 0x402 <timer0_init_ts>
     4f6:	95 de       	rcall	.-726    	; 0x222 <speed_init>

	
	rgbled_init();
     4f8:	84 e0       	ldi	r24, 0x04	; 4
     4fa:	98 d4       	rcall	.+2352   	; 0xe2c <spi_init>
	txFrame.id = MOTOR_CAN_ID;
     4fc:	8c d4       	rcall	.+2328   	; 0xe16 <rgbled_init>
     4fe:	ee e7       	ldi	r30, 0x7E	; 126
     500:	f3 e0       	ldi	r31, 0x03	; 3
     502:	80 e5       	ldi	r24, 0x50	; 80
     504:	94 e0       	ldi	r25, 0x04	; 4
	txFrame.length = 8;
     506:	91 83       	std	Z+1, r25	; 0x01
	
	sei();
     508:	80 83       	st	Z, r24
	
	rgbled_turn_on(LED_BLUE);
     50a:	88 e0       	ldi	r24, 0x08	; 8
     50c:	82 83       	std	Z+2, r24	; 0x02
	
    while (1){
		
		handle_motor_status_can_msg(&send_can, &ComValues);
     50e:	78 94       	sei
     510:	80 e8       	ldi	r24, 0x80	; 128
     512:	87 d4       	rcall	.+2318   	; 0xe22 <rgbled_turn_on>
     514:	6a e0       	ldi	r22, 0x0A	; 10
     516:	71 e0       	ldi	r23, 0x01	; 1
		handle_can(&ComValues, &rxFrame);
     518:	8a e1       	ldi	r24, 0x1A	; 26
     51a:	91 e0       	ldi	r25, 0x01	; 1
     51c:	a7 df       	rcall	.-178    	; 0x46c <handle_motor_status_can_msg>
     51e:	6b e5       	ldi	r22, 0x5B	; 91
     520:	73 e0       	ldi	r23, 0x03	; 3
     522:	8a e0       	ldi	r24, 0x0A	; 10
     524:	91 e0       	ldi	r25, 0x01	; 1
     526:	7c df       	rcall	.-264    	; 0x420 <handle_can>
     528:	f5 cf       	rjmp	.-22     	; 0x514 <main+0x50>

0000052a <__vector_16>:
	}
}


ISR(TIMER0_COMP_vect){ // every 100ms
     52a:	1f 92       	push	r1
     52c:	0f 92       	push	r0
     52e:	0f b6       	in	r0, 0x3f	; 63
     530:	0f 92       	push	r0
     532:	11 24       	eor	r1, r1
     534:	0b b6       	in	r0, 0x3b	; 59
     536:	0f 92       	push	r0
     538:	cf 92       	push	r12
     53a:	df 92       	push	r13
     53c:	ef 92       	push	r14
     53e:	ff 92       	push	r15
     540:	2f 93       	push	r18
     542:	3f 93       	push	r19
     544:	4f 93       	push	r20
     546:	5f 93       	push	r21
     548:	6f 93       	push	r22
     54a:	7f 93       	push	r23
     54c:	8f 93       	push	r24
     54e:	9f 93       	push	r25
     550:	af 93       	push	r26
     552:	bf 93       	push	r27
     554:	ef 93       	push	r30
     556:	ff 93       	push	r31
	if (u8_watchdog == 0)
     558:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <u8_watchdog>
     55c:	81 11       	cpse	r24, r1
     55e:	03 c0       	rjmp	.+6      	; 0x566 <__vector_16+0x3c>
	{
		ComValues.u8_throttle_cmd = 0 ;
     560:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <ComValues>
     564:	03 c0       	rjmp	.+6      	; 0x56c <__vector_16+0x42>
		/*TODO
		* send CAN to demand motor disengage
		* drivers disable
		*/
	} else {
		u8_watchdog -- ;	
     566:	81 50       	subi	r24, 0x01	; 1
     568:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <u8_watchdog>
	}
	send_can = 1;
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <send_can>
	controller(ComValues.u8_throttle_cmd, f32_motor_current);
     572:	c0 90 29 01 	lds	r12, 0x0129	; 0x800129 <f32_motor_current>
     576:	d0 90 2a 01 	lds	r13, 0x012A	; 0x80012a <f32_motor_current+0x1>
     57a:	e0 90 2b 01 	lds	r14, 0x012B	; 0x80012b <f32_motor_current+0x2>
     57e:	f0 90 2c 01 	lds	r15, 0x012C	; 0x80012c <f32_motor_current+0x3>
     582:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <ComValues>
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	bf d5       	rcall	.+2942   	; 0x110c <__floatunsisf>
     58e:	a7 01       	movw	r20, r14
     590:	96 01       	movw	r18, r12
     592:	9f dd       	rcall	.-1218   	; 0xd2 <controller>
	handle_speed_sensor(&u8_car_speed, u16_speed_count, 100);
     594:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <u16_speed_count>
     598:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <u16_speed_count+0x1>
     59c:	44 e6       	ldi	r20, 0x64	; 100
     59e:	83 e2       	ldi	r24, 0x23	; 35
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	4a de       	rcall	.-876    	; 0x238 <handle_speed_sensor>
}
     5a4:	ff 91       	pop	r31
     5a6:	ef 91       	pop	r30
     5a8:	bf 91       	pop	r27
     5aa:	af 91       	pop	r26
     5ac:	9f 91       	pop	r25
     5ae:	8f 91       	pop	r24
     5b0:	7f 91       	pop	r23
     5b2:	6f 91       	pop	r22
     5b4:	5f 91       	pop	r21
     5b6:	4f 91       	pop	r20
     5b8:	3f 91       	pop	r19
     5ba:	2f 91       	pop	r18
     5bc:	ff 90       	pop	r15
     5be:	ef 90       	pop	r14
     5c0:	df 90       	pop	r13
     5c2:	cf 90       	pop	r12
     5c4:	0f 90       	pop	r0
     5c6:	0b be       	out	0x3b, r0	; 59
     5c8:	0f 90       	pop	r0
     5ca:	0f be       	out	0x3f, r0	; 63
     5cc:	0f 90       	pop	r0
     5ce:	1f 90       	pop	r1
     5d0:	18 95       	reti

000005d2 <__vector_12>:
*	CH2 : Battery current
*	CH3 : Battery voltage
*	CH5 : Motor temperature
*/

ISR(TIMER1_COMPA_vect){// every 1ms
     5d2:	1f 92       	push	r1
     5d4:	0f 92       	push	r0
     5d6:	0f b6       	in	r0, 0x3f	; 63
     5d8:	0f 92       	push	r0
     5da:	11 24       	eor	r1, r1
     5dc:	0b b6       	in	r0, 0x3b	; 59
     5de:	0f 92       	push	r0
     5e0:	2f 93       	push	r18
     5e2:	3f 93       	push	r19
     5e4:	4f 93       	push	r20
     5e6:	5f 93       	push	r21
     5e8:	6f 93       	push	r22
     5ea:	7f 93       	push	r23
     5ec:	8f 93       	push	r24
     5ee:	9f 93       	push	r25
     5f0:	af 93       	push	r26
     5f2:	bf 93       	push	r27
     5f4:	ef 93       	push	r30
     5f6:	ff 93       	push	r31

	if (u8_SPI_count == 1)
     5f8:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <u8_SPI_count>
     5fc:	81 30       	cpi	r24, 0x01	; 1
     5fe:	b1 f4       	brne	.+44     	; 0x62c <__vector_12+0x5a>
	{
		//motor current
		u8_ADC_mux = 1; 
     600:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <u8_ADC_mux>
		spi_trancieve(&u8_ADC_mux, &u8_rxBuffer, 16, 0);
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	40 e1       	ldi	r20, 0x10	; 16
     608:	50 e0       	ldi	r21, 0x00	; 0
     60a:	67 e1       	ldi	r22, 0x17	; 23
     60c:	71 e0       	ldi	r23, 0x01	; 1
     60e:	88 e1       	ldi	r24, 0x18	; 24
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	1a d4       	rcall	.+2100   	; 0xe48 <spi_trancieve>
		u16_ADC1_reg = u8_rxBuffer;
     614:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <u8_rxBuffer>
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <u16_ADC1_reg+0x1>
     61e:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <u16_ADC1_reg>
		u8_SPI_count ++ ;
     622:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <u8_SPI_count>
     626:	8f 5f       	subi	r24, 0xFF	; 255
     628:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <u8_SPI_count>

	}

	if (u8_SPI_count == 2)
     62c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <u8_SPI_count>
     630:	82 30       	cpi	r24, 0x02	; 2
     632:	b1 f4       	brne	.+44     	; 0x660 <__vector_12+0x8e>
	{
		//batt current
		u8_ADC_mux = 2;
     634:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <u8_ADC_mux>
		spi_trancieve(&u8_ADC_mux, &u8_rxBuffer, 16, 0);
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	40 e1       	ldi	r20, 0x10	; 16
     63c:	50 e0       	ldi	r21, 0x00	; 0
     63e:	67 e1       	ldi	r22, 0x17	; 23
     640:	71 e0       	ldi	r23, 0x01	; 1
     642:	88 e1       	ldi	r24, 0x18	; 24
     644:	91 e0       	ldi	r25, 0x01	; 1
     646:	00 d4       	rcall	.+2048   	; 0xe48 <spi_trancieve>
		u16_ADC2_reg = u8_rxBuffer;
     648:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <u8_rxBuffer>
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <u16_ADC2_reg+0x1>
     652:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <u16_ADC2_reg>
		u8_SPI_count ++ ;
     656:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <u8_SPI_count>
     65a:	8f 5f       	subi	r24, 0xFF	; 255
     65c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <u8_SPI_count>

	}

	if (u8_SPI_count == 3)
     660:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <u8_SPI_count>
     664:	83 30       	cpi	r24, 0x03	; 3
     666:	b1 f4       	brne	.+44     	; 0x694 <__vector_12+0xc2>
	{
		//batt volt
		u8_ADC_mux = 3;
     668:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <u8_ADC_mux>
		spi_trancieve(&u8_ADC_mux, &u8_rxBuffer, 16, 0);
     66c:	20 e0       	ldi	r18, 0x00	; 0
     66e:	40 e1       	ldi	r20, 0x10	; 16
     670:	50 e0       	ldi	r21, 0x00	; 0
     672:	67 e1       	ldi	r22, 0x17	; 23
     674:	71 e0       	ldi	r23, 0x01	; 1
     676:	88 e1       	ldi	r24, 0x18	; 24
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	e6 d3       	rcall	.+1996   	; 0xe48 <spi_trancieve>
		u16_ADC3_reg = u8_rxBuffer;
     67c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <u8_rxBuffer>
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <u16_ADC3_reg+0x1>
     686:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <u16_ADC3_reg>
		u8_SPI_count ++ ;
     68a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <u8_SPI_count>
     68e:	8f 5f       	subi	r24, 0xFF	; 255
     690:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <u8_SPI_count>

	}

	if (u8_SPI_count == 4)
     694:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <u8_SPI_count>
     698:	84 30       	cpi	r24, 0x04	; 4
     69a:	a9 f4       	brne	.+42     	; 0x6c6 <__vector_12+0xf4>
	{
		//motor temp
		u8_ADC_mux = 5;
     69c:	85 e0       	ldi	r24, 0x05	; 5
     69e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <u8_ADC_mux>
		spi_trancieve(&u8_ADC_mux, &u8_rxBuffer, 16, 0);
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	40 e1       	ldi	r20, 0x10	; 16
     6a6:	50 e0       	ldi	r21, 0x00	; 0
     6a8:	67 e1       	ldi	r22, 0x17	; 23
     6aa:	71 e0       	ldi	r23, 0x01	; 1
     6ac:	88 e1       	ldi	r24, 0x18	; 24
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	cb d3       	rcall	.+1942   	; 0xe48 <spi_trancieve>
		u16_ADC5_reg = u8_rxBuffer;
     6b2:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <u8_rxBuffer>
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <u16_ADC5_reg+0x1>
     6bc:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <u16_ADC5_reg>
		u8_SPI_count = 1 ;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <u8_SPI_count>

	}
	
	////////////////////INTERPRETATION OF RECEIVED ADC VALUES//////////////
	handle_current_sensor(&f32_motor_current, u16_ADC1_reg);
     6c6:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <u16_ADC1_reg>
     6ca:	70 91 22 01 	lds	r23, 0x0122	; 0x800122 <u16_ADC1_reg+0x1>
     6ce:	89 e2       	ldi	r24, 0x29	; 41
     6d0:	91 e0       	ldi	r25, 0x01	; 1
     6d2:	64 d0       	rcall	.+200    	; 0x79c <handle_current_sensor>
	handle_current_sensor(&f32_batt_current, u16_ADC2_reg);
     6d4:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <u16_ADC2_reg>
     6d8:	70 91 20 01 	lds	r23, 0x0120	; 0x800120 <u16_ADC2_reg+0x1>
     6dc:	85 e2       	ldi	r24, 0x25	; 37
     6de:	91 e0       	ldi	r25, 0x01	; 1
	f32_batt_volt = (float)u16_ADC3_reg/82; //*5/4096 (12bit ADC with Vref = 5V) *0.1 (divider bridge 50V -> 5V)
	handle_temp_sensor(&u8_motor_temp, u16_ADC5_reg);
     6e0:	5d d0       	rcall	.+186    	; 0x79c <handle_current_sensor>
     6e2:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <u16_ADC5_reg>
     6e6:	70 91 1c 01 	lds	r23, 0x011C	; 0x80011c <u16_ADC5_reg+0x1>
     6ea:	84 e2       	ldi	r24, 0x24	; 36
     6ec:	91 e0       	ldi	r25, 0x01	; 1
}
     6ee:	a3 d0       	rcall	.+326    	; 0x836 <handle_temp_sensor>
     6f0:	ff 91       	pop	r31
     6f2:	ef 91       	pop	r30
     6f4:	bf 91       	pop	r27
     6f6:	af 91       	pop	r26
     6f8:	9f 91       	pop	r25
     6fa:	8f 91       	pop	r24
     6fc:	7f 91       	pop	r23
     6fe:	6f 91       	pop	r22
     700:	5f 91       	pop	r21
     702:	4f 91       	pop	r20
     704:	3f 91       	pop	r19
     706:	2f 91       	pop	r18
     708:	0f 90       	pop	r0
     70a:	0b be       	out	0x3b, r0	; 59
     70c:	0f 90       	pop	r0
     70e:	0f be       	out	0x3f, r0	; 63
     710:	0f 90       	pop	r0
     712:	1f 90       	pop	r1
     714:	18 95       	reti

00000716 <__vector_6>:

ISR(INT5_vect)
{
     716:	1f 92       	push	r1
     718:	0f 92       	push	r0
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	0f 92       	push	r0
     71e:	11 24       	eor	r1, r1
     720:	8f 93       	push	r24
     722:	9f 93       	push	r25
	u16_speed_count ++ ;
     724:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <u16_speed_count>
     728:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <u16_speed_count+0x1>
     72c:	01 96       	adiw	r24, 0x01	; 1
     72e:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <u16_speed_count+0x1>
     732:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <u16_speed_count>
}
     736:	9f 91       	pop	r25
     738:	8f 91       	pop	r24
     73a:	0f 90       	pop	r0
     73c:	0f be       	out	0x3f, r0	; 63
     73e:	0f 90       	pop	r0
     740:	1f 90       	pop	r1
     742:	18 95       	reti

00000744 <pid_init>:
	output = propGain + intGain + derGain;
	//printf("Out: %d \n", output);
	return output;
}

void pid_init(Pid_t *PID, float t, float p, float i, float d){
     744:	8f 92       	push	r8
     746:	9f 92       	push	r9
     748:	af 92       	push	r10
     74a:	bf 92       	push	r11
     74c:	cf 92       	push	r12
     74e:	df 92       	push	r13
     750:	ef 92       	push	r14
     752:	ff 92       	push	r15
     754:	0f 93       	push	r16
     756:	1f 93       	push	r17
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	cd b7       	in	r28, 0x3d	; 61
     75e:	de b7       	in	r29, 0x3e	; 62
     760:	fc 01       	movw	r30, r24
	PID->Kp = p;
     762:	04 87       	std	Z+12, r16	; 0x0c
     764:	15 87       	std	Z+13, r17	; 0x0d
     766:	26 87       	std	Z+14, r18	; 0x0e
     768:	37 87       	std	Z+15, r19	; 0x0f
	PID->Ki = i;
     76a:	c4 8a       	std	Z+20, r12	; 0x14
     76c:	d5 8a       	std	Z+21, r13	; 0x15
     76e:	e6 8a       	std	Z+22, r14	; 0x16
     770:	f7 8a       	std	Z+23, r15	; 0x17
	PID->Kd = d;
     772:	80 8a       	std	Z+16, r8	; 0x10
     774:	91 8a       	std	Z+17, r9	; 0x11
     776:	a2 8a       	std	Z+18, r10	; 0x12
     778:	b3 8a       	std	Z+19, r11	; 0x13
	PID->timeStep = t;
     77a:	40 87       	std	Z+8, r20	; 0x08
     77c:	51 87       	std	Z+9, r21	; 0x09
     77e:	62 87       	std	Z+10, r22	; 0x0a
     780:	73 87       	std	Z+11, r23	; 0x0b
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	1f 91       	pop	r17
     788:	0f 91       	pop	r16
     78a:	ff 90       	pop	r15
     78c:	ef 90       	pop	r14
     78e:	df 90       	pop	r13
     790:	cf 90       	pop	r12
     792:	bf 90       	pop	r11
     794:	af 90       	pop	r10
     796:	9f 90       	pop	r9
     798:	8f 90       	pop	r8
     79a:	08 95       	ret

0000079c <handle_current_sensor>:
#define TRANSDUCER_SENSIBILITY 0.0416
#define TRANSDUCER_OFFSET 2.26
#define LOWPASS_CONSTANT 0.1

void handle_current_sensor(float *f32_current, uint16_t u16_ADC_reg)
{
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	00 d0       	rcall	.+0      	; 0x7a6 <handle_current_sensor+0xa>
     7a6:	00 d0       	rcall	.+0      	; 0x7a8 <handle_current_sensor+0xc>
     7a8:	cd b7       	in	r28, 0x3d	; 61
     7aa:	de b7       	in	r29, 0x3e	; 62
     7ac:	8c 01       	movw	r16, r24
	volatile float f_new_current = ((((float)u16_ADC_reg*5/4096) - TRANSDUCER_OFFSET)/TRANSDUCER_SENSIBILITY)/3 ;// /3 because current passes 3x in transducer for more precision.
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	ac d4       	rcall	.+2392   	; 0x110c <__floatunsisf>
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	40 ea       	ldi	r20, 0xA0	; 160
     7ba:	50 e4       	ldi	r21, 0x40	; 64
     7bc:	5d d5       	rcall	.+2746   	; 0x1278 <__mulsf3>
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	40 e8       	ldi	r20, 0x80	; 128
     7c4:	59 e3       	ldi	r21, 0x39	; 57
     7c6:	58 d5       	rcall	.+2736   	; 0x1278 <__mulsf3>
     7c8:	27 ed       	ldi	r18, 0xD7	; 215
     7ca:	33 ea       	ldi	r19, 0xA3	; 163
     7cc:	40 e1       	ldi	r20, 0x10	; 16
     7ce:	50 e4       	ldi	r21, 0x40	; 64
     7d0:	9b d3       	rcall	.+1846   	; 0xf08 <__subsf3>
     7d2:	23 ec       	ldi	r18, 0xC3	; 195
     7d4:	34 e6       	ldi	r19, 0x64	; 100
     7d6:	4a e2       	ldi	r20, 0x2A	; 42
     7d8:	5d e3       	ldi	r21, 0x3D	; 61
     7da:	ff d3       	rcall	.+2046   	; 0xfda <__divsf3>
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	40 e4       	ldi	r20, 0x40	; 64
     7e2:	50 e4       	ldi	r21, 0x40	; 64
     7e4:	fa d3       	rcall	.+2036   	; 0xfda <__divsf3>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
	f_new_current = (f_new_current+0.11)*1.1 ;// correction of offset and ramp error (conversion + hardware) measured with ampmeter of the power supply : bad
     7ee:	69 81       	ldd	r22, Y+1	; 0x01
     7f0:	7a 81       	ldd	r23, Y+2	; 0x02
     7f2:	8b 81       	ldd	r24, Y+3	; 0x03
     7f4:	9c 81       	ldd	r25, Y+4	; 0x04
     7f6:	2e ea       	ldi	r18, 0xAE	; 174
     7f8:	37 e4       	ldi	r19, 0x47	; 71
     7fa:	41 ee       	ldi	r20, 0xE1	; 225
     7fc:	5d e3       	ldi	r21, 0x3D	; 61
     7fe:	85 d3       	rcall	.+1802   	; 0xf0a <__addsf3>
     800:	2d ec       	ldi	r18, 0xCD	; 205
     802:	3c ec       	ldi	r19, 0xCC	; 204
     804:	4c e8       	ldi	r20, 0x8C	; 140
     806:	5f e3       	ldi	r21, 0x3F	; 63
     808:	37 d5       	rcall	.+2670   	; 0x1278 <__mulsf3>
     80a:	69 83       	std	Y+1, r22	; 0x01
     80c:	7a 83       	std	Y+2, r23	; 0x02
     80e:	8b 83       	std	Y+3, r24	; 0x03
     810:	9c 83       	std	Y+4, r25	; 0x04
	//*f32_prev_current = (*f32_prev_current)*(1-LOWPASS_CONSTANT) + LOWPASS_CONSTANT*f_new_current ;// low pass filter ---------------------TODO test
	*f32_current = f_new_current;
     812:	89 81       	ldd	r24, Y+1	; 0x01
     814:	9a 81       	ldd	r25, Y+2	; 0x02
     816:	ab 81       	ldd	r26, Y+3	; 0x03
     818:	bc 81       	ldd	r27, Y+4	; 0x04
     81a:	f8 01       	movw	r30, r16
     81c:	80 83       	st	Z, r24
     81e:	91 83       	std	Z+1, r25	; 0x01
     820:	a2 83       	std	Z+2, r26	; 0x02
     822:	b3 83       	std	Z+3, r27	; 0x03
}
     824:	0f 90       	pop	r0
     826:	0f 90       	pop	r0
     828:	0f 90       	pop	r0
     82a:	0f 90       	pop	r0
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	1f 91       	pop	r17
     832:	0f 91       	pop	r16
     834:	08 95       	ret

00000836 <handle_temp_sensor>:

void handle_temp_sensor(uint8_t *u8_temp, uint16_t u16_ADC_reg)
{
     836:	0f 93       	push	r16
     838:	1f 93       	push	r17
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
     83e:	00 d0       	rcall	.+0      	; 0x840 <handle_temp_sensor+0xa>
     840:	00 d0       	rcall	.+0      	; 0x842 <handle_temp_sensor+0xc>
     842:	cd b7       	in	r28, 0x3d	; 61
     844:	de b7       	in	r29, 0x3e	; 62
     846:	8c 01       	movw	r16, r24
	volatile float f_sens_volt = ((float)u16_ADC_reg*5/4096);
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	5f d4       	rcall	.+2238   	; 0x110c <__floatunsisf>
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	40 ea       	ldi	r20, 0xA0	; 160
     854:	50 e4       	ldi	r21, 0x40	; 64
     856:	10 d5       	rcall	.+2592   	; 0x1278 <__mulsf3>
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	40 e8       	ldi	r20, 0x80	; 128
     85e:	59 e3       	ldi	r21, 0x39	; 57
     860:	0b d5       	rcall	.+2582   	; 0x1278 <__mulsf3>
     862:	69 83       	std	Y+1, r22	; 0x01
     864:	7a 83       	std	Y+2, r23	; 0x02
     866:	8b 83       	std	Y+3, r24	; 0x03
     868:	9c 83       	std	Y+4, r25	; 0x04
	// 0 -> 3.7V => T = 20*V-22
	// 3.7 -> 4.7V => T = 55.5*V-155.5
	// 4.7 -> 5V => T = 220*V-840
	// this approximation system is used because it requires less processing power and variable accuracy than the 3rd order polyfit.
	
	if (f_sens_volt <= 3.7)
     86a:	69 81       	ldd	r22, Y+1	; 0x01
     86c:	7a 81       	ldd	r23, Y+2	; 0x02
     86e:	8b 81       	ldd	r24, Y+3	; 0x03
     870:	9c 81       	ldd	r25, Y+4	; 0x04
     872:	2d ec       	ldi	r18, 0xCD	; 205
     874:	3c ec       	ldi	r19, 0xCC	; 204
     876:	4c e6       	ldi	r20, 0x6C	; 108
     878:	50 e4       	ldi	r21, 0x40	; 64
     87a:	ab d3       	rcall	.+1878   	; 0xfd2 <__cmpsf2>
     87c:	18 16       	cp	r1, r24
     87e:	8c f0       	brlt	.+34     	; 0x8a2 <handle_temp_sensor+0x6c>
	{
		*u8_temp = (uint8_t)(20*f_sens_volt-22);
     880:	69 81       	ldd	r22, Y+1	; 0x01
     882:	7a 81       	ldd	r23, Y+2	; 0x02
     884:	8b 81       	ldd	r24, Y+3	; 0x03
     886:	9c 81       	ldd	r25, Y+4	; 0x04
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	40 ea       	ldi	r20, 0xA0	; 160
     88e:	51 e4       	ldi	r21, 0x41	; 65
     890:	f3 d4       	rcall	.+2534   	; 0x1278 <__mulsf3>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 eb       	ldi	r20, 0xB0	; 176
     898:	51 e4       	ldi	r21, 0x41	; 65
     89a:	36 d3       	rcall	.+1644   	; 0xf08 <__subsf3>
     89c:	0b d4       	rcall	.+2070   	; 0x10b4 <__fixunssfsi>
     89e:	f8 01       	movw	r30, r16
     8a0:	60 83       	st	Z, r22
	}
	
	if (f_sens_volt <= 4.7 && f_sens_volt > 3.7)
     8a2:	69 81       	ldd	r22, Y+1	; 0x01
     8a4:	7a 81       	ldd	r23, Y+2	; 0x02
     8a6:	8b 81       	ldd	r24, Y+3	; 0x03
     8a8:	9c 81       	ldd	r25, Y+4	; 0x04
     8aa:	26 e6       	ldi	r18, 0x66	; 102
     8ac:	36 e6       	ldi	r19, 0x66	; 102
     8ae:	46 e9       	ldi	r20, 0x96	; 150
     8b0:	50 e4       	ldi	r21, 0x40	; 64
     8b2:	8f d3       	rcall	.+1822   	; 0xfd2 <__cmpsf2>
     8b4:	18 16       	cp	r1, r24
     8b6:	e4 f0       	brlt	.+56     	; 0x8f0 <handle_temp_sensor+0xba>
     8b8:	69 81       	ldd	r22, Y+1	; 0x01
     8ba:	7a 81       	ldd	r23, Y+2	; 0x02
     8bc:	8b 81       	ldd	r24, Y+3	; 0x03
     8be:	9c 81       	ldd	r25, Y+4	; 0x04
     8c0:	2d ec       	ldi	r18, 0xCD	; 205
     8c2:	3c ec       	ldi	r19, 0xCC	; 204
     8c4:	4c e6       	ldi	r20, 0x6C	; 108
     8c6:	50 e4       	ldi	r21, 0x40	; 64
     8c8:	d3 d4       	rcall	.+2470   	; 0x1270 <__gesf2>
	{
		*u8_temp = (uint8_t)(55.5*f_sens_volt-155.5);
     8ca:	18 16       	cp	r1, r24
     8cc:	8c f4       	brge	.+34     	; 0x8f0 <handle_temp_sensor+0xba>
     8ce:	69 81       	ldd	r22, Y+1	; 0x01
     8d0:	7a 81       	ldd	r23, Y+2	; 0x02
     8d2:	8b 81       	ldd	r24, Y+3	; 0x03
     8d4:	9c 81       	ldd	r25, Y+4	; 0x04
     8d6:	20 e0       	ldi	r18, 0x00	; 0
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	4e e5       	ldi	r20, 0x5E	; 94
     8dc:	52 e4       	ldi	r21, 0x42	; 66
     8de:	cc d4       	rcall	.+2456   	; 0x1278 <__mulsf3>
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	30 e8       	ldi	r19, 0x80	; 128
     8e4:	4b e1       	ldi	r20, 0x1B	; 27
     8e6:	53 e4       	ldi	r21, 0x43	; 67
     8e8:	0f d3       	rcall	.+1566   	; 0xf08 <__subsf3>
     8ea:	e4 d3       	rcall	.+1992   	; 0x10b4 <__fixunssfsi>
	}
	
	if (f_sens_volt > 4.7)
     8ec:	f8 01       	movw	r30, r16
     8ee:	60 83       	st	Z, r22
     8f0:	69 81       	ldd	r22, Y+1	; 0x01
     8f2:	7a 81       	ldd	r23, Y+2	; 0x02
     8f4:	8b 81       	ldd	r24, Y+3	; 0x03
     8f6:	9c 81       	ldd	r25, Y+4	; 0x04
     8f8:	26 e6       	ldi	r18, 0x66	; 102
     8fa:	36 e6       	ldi	r19, 0x66	; 102
     8fc:	46 e9       	ldi	r20, 0x96	; 150
     8fe:	50 e4       	ldi	r21, 0x40	; 64
	{
		*u8_temp = (uint8_t)(200*f_sens_volt-840);
     900:	b7 d4       	rcall	.+2414   	; 0x1270 <__gesf2>
     902:	18 16       	cp	r1, r24
     904:	8c f4       	brge	.+34     	; 0x928 <handle_temp_sensor+0xf2>
     906:	69 81       	ldd	r22, Y+1	; 0x01
     908:	7a 81       	ldd	r23, Y+2	; 0x02
     90a:	8b 81       	ldd	r24, Y+3	; 0x03
     90c:	9c 81       	ldd	r25, Y+4	; 0x04
     90e:	20 e0       	ldi	r18, 0x00	; 0
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	48 e4       	ldi	r20, 0x48	; 72
     914:	53 e4       	ldi	r21, 0x43	; 67
     916:	b0 d4       	rcall	.+2400   	; 0x1278 <__mulsf3>
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	42 e5       	ldi	r20, 0x52	; 82
     91e:	54 e4       	ldi	r21, 0x44	; 68
     920:	f3 d2       	rcall	.+1510   	; 0xf08 <__subsf3>
     922:	c8 d3       	rcall	.+1936   	; 0x10b4 <__fixunssfsi>
	}
     924:	f8 01       	movw	r30, r16
     926:	60 83       	st	Z, r22
     928:	0f 90       	pop	r0
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	0f 90       	pop	r0
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	1f 91       	pop	r17
     936:	0f 91       	pop	r16
     938:	08 95       	ret

0000093a <__vector_18>:

/**************************************************************************************************
*   CAN ISR - See 'can.h' Header file for Description
**************************************************************************************************/
ISR(CANIT_vect)
{
     93a:	1f 92       	push	r1
     93c:	0f 92       	push	r0
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	0f 92       	push	r0
     942:	11 24       	eor	r1, r1
     944:	0b b6       	in	r0, 0x3b	; 59
     946:	0f 92       	push	r0
     948:	2f 93       	push	r18
     94a:	3f 93       	push	r19
     94c:	4f 93       	push	r20
     94e:	5f 93       	push	r21
     950:	6f 93       	push	r22
     952:	8f 93       	push	r24
     954:	9f 93       	push	r25
     956:	af 93       	push	r26
     958:	bf 93       	push	r27
     95a:	ef 93       	push	r30
     95c:	ff 93       	push	r31
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	1f 92       	push	r1
     964:	cd b7       	in	r28, 0x3d	; 61
     966:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t mob_status;

	uint8_t mob_interrupts = CANSIT2;
     968:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>

	// TX
	if ((mob_interrupts & (1 << SIT0)) && (CANIE2 & (1 << ENMOB0))) {
     96c:	80 ff       	sbrs	r24, 0
     96e:	47 c0       	rjmp	.+142    	; 0x9fe <__vector_18+0xc4>
     970:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     974:	90 ff       	sbrs	r25, 0
     976:	43 c0       	rjmp	.+134    	; 0x9fe <__vector_18+0xc4>
		CANPAGE = (0x0 << MOBNB0); //Select TX Mob (Mob0)
     978:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		mob_status = CANSTMOB;
     97c:	ee ee       	ldi	r30, 0xEE	; 238
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	80 81       	ld	r24, Z
     982:	89 83       	std	Y+1, r24	; 0x01
		CANSTMOB &= ~(1 << TXOK); //clear MB1, TX interrupt
     984:	80 81       	ld	r24, Z
     986:	8f 7b       	andi	r24, 0xBF	; 191
     988:	80 83       	st	Z, r24

		if (tx_on != tx_off) {
     98a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <tx_off>
     98e:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <tx_on>
     992:	98 17       	cp	r25, r24
     994:	89 f1       	breq	.+98     	; 0x9f8 <__vector_18+0xbe>
			unsigned char pos;
			pos = tx_off & (TX_SIZE-1);
			//set ID
			CANIDT4 = tx_frames[pos].array[0];
     996:	8f 70       	andi	r24, 0x0F	; 15
     998:	2b e0       	ldi	r18, 0x0B	; 11
     99a:	82 9f       	mul	r24, r18
     99c:	c0 01       	movw	r24, r0
     99e:	11 24       	eor	r1, r1
     9a0:	fc 01       	movw	r30, r24
     9a2:	ed 51       	subi	r30, 0x1D	; 29
     9a4:	fe 4f       	sbci	r31, 0xFE	; 254
     9a6:	20 81       	ld	r18, Z
     9a8:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			CANIDT2 = tx_frames[pos].array[0];
     9ac:	20 81       	ld	r18, Z
     9ae:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			CANIDT1 = tx_frames[pos].array[1];
     9b2:	21 81       	ldd	r18, Z+1	; 0x01
     9b4:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

			//program data registers - auto increment CANMSG
			CANMSG = tx_frames[pos].data[0];
     9b8:	23 81       	ldd	r18, Z+3	; 0x03
     9ba:	aa ef       	ldi	r26, 0xFA	; 250
     9bc:	b0 e0       	ldi	r27, 0x00	; 0
     9be:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[1];
     9c0:	24 81       	ldd	r18, Z+4	; 0x04
     9c2:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[2];
     9c4:	25 81       	ldd	r18, Z+5	; 0x05
     9c6:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[3];
     9c8:	26 81       	ldd	r18, Z+6	; 0x06
     9ca:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[4];
     9cc:	27 81       	ldd	r18, Z+7	; 0x07
     9ce:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[5];
     9d0:	20 85       	ldd	r18, Z+8	; 0x08
     9d2:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[6];
     9d4:	21 85       	ldd	r18, Z+9	; 0x09
     9d6:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[7];
     9d8:	22 85       	ldd	r18, Z+10	; 0x0a
     9da:	2c 93       	st	X, r18

			//set length and request send
			CANCDMOB = (1 << CONMOB0) | tx_frames[pos].length;
     9dc:	fc 01       	movw	r30, r24
     9de:	eb 51       	subi	r30, 0x1B	; 27
     9e0:	fe 4f       	sbci	r31, 0xFE	; 254
     9e2:	80 81       	ld	r24, Z
     9e4:	8f 70       	andi	r24, 0x0F	; 15
     9e6:	80 64       	ori	r24, 0x40	; 64
     9e8:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
			tx_off++;
     9ec:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <tx_off>
     9f0:	8f 5f       	subi	r24, 0xFF	; 255
     9f2:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <tx_off>
     9f6:	7d c0       	rjmp	.+250    	; 0xaf2 <__vector_18+0x1b8>
		} else {
			tx_busy = 0;
     9f8:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <tx_busy>
     9fc:	7a c0       	rjmp	.+244    	; 0xaf2 <__vector_18+0x1b8>
		}
	}
	// RX
	else if ((mob_interrupts & (1 << SIT1)) && (CANIE2 & (1 << ENMOB1))) {
     9fe:	81 ff       	sbrs	r24, 1
     a00:	78 c0       	rjmp	.+240    	; 0xaf2 <__vector_18+0x1b8>
     a02:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     a06:	81 ff       	sbrs	r24, 1
     a08:	74 c0       	rjmp	.+232    	; 0xaf2 <__vector_18+0x1b8>
		//Select RX Mob (Mob1)
		CANPAGE = (0x1 << MOBNB0);
     a0a:	80 e1       	ldi	r24, 0x10	; 16
     a0c:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		if (((rx_on - rx_off) & RX_ABS_MASK) < RX_SIZE) {
     a10:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <rx_on>
     a14:	28 2f       	mov	r18, r24
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <rx_off>
     a1c:	29 1b       	sub	r18, r25
     a1e:	31 09       	sbc	r19, r1
     a20:	2f 77       	andi	r18, 0x7F	; 127
     a22:	33 27       	eor	r19, r19
     a24:	20 31       	cpi	r18, 0x10	; 16
     a26:	31 05       	cpc	r19, r1
     a28:	0c f0       	brlt	.+2      	; 0xa2c <__vector_18+0xf2>
     a2a:	58 c0       	rjmp	.+176    	; 0xadc <__vector_18+0x1a2>
			unsigned char pos;
			pos = rx_on & (RX_SIZE-1);
			//Read length
			rx_frames[pos].length = CANCDMOB & 0x0F;
     a2c:	e8 2f       	mov	r30, r24
     a2e:	ef 70       	andi	r30, 0x0F	; 15
     a30:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     a34:	2e 2f       	mov	r18, r30
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	4b e0       	ldi	r20, 0x0B	; 11
     a3a:	e4 9f       	mul	r30, r20
     a3c:	f0 01       	movw	r30, r0
     a3e:	11 24       	eor	r1, r1
     a40:	ed 5c       	subi	r30, 0xCD	; 205
     a42:	fe 4f       	sbci	r31, 0xFE	; 254
     a44:	9f 70       	andi	r25, 0x0F	; 15
     a46:	42 81       	ldd	r20, Z+2	; 0x02
     a48:	40 7f       	andi	r20, 0xF0	; 240
     a4a:	94 2b       	or	r25, r20
     a4c:	92 83       	std	Z+2, r25	; 0x02
			//Read ID
			rx_frames[pos].array[0] = (CANIDT2 & 0xE0) | (CANIDT4 & 0x07);
     a4e:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     a52:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     a56:	40 7e       	andi	r20, 0xE0	; 224
     a58:	97 70       	andi	r25, 0x07	; 7
     a5a:	94 2b       	or	r25, r20
     a5c:	90 83       	st	Z, r25
			rx_frames[pos].array[1] = CANIDT1;
     a5e:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     a62:	91 83       	std	Z+1, r25	; 0x01

			//read data registers - auto increment CANMSG
			rx_frames[pos].data[0] = CANMSG;
     a64:	aa ef       	ldi	r26, 0xFA	; 250
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	9c 91       	ld	r25, X
     a6a:	93 83       	std	Z+3, r25	; 0x03
			rx_frames[pos].data[1] = CANMSG;
     a6c:	9c 91       	ld	r25, X
     a6e:	94 83       	std	Z+4, r25	; 0x04
			rx_frames[pos].data[2] = CANMSG;
     a70:	9c 91       	ld	r25, X
     a72:	95 83       	std	Z+5, r25	; 0x05
			rx_frames[pos].data[3] = CANMSG;
     a74:	9c 91       	ld	r25, X
     a76:	96 83       	std	Z+6, r25	; 0x06
			rx_frames[pos].data[4] = CANMSG;
     a78:	9c 91       	ld	r25, X
     a7a:	97 83       	std	Z+7, r25	; 0x07
			rx_frames[pos].data[5] = CANMSG;
     a7c:	9c 91       	ld	r25, X
     a7e:	90 87       	std	Z+8, r25	; 0x08
			rx_frames[pos].data[6] = CANMSG;
     a80:	9c 91       	ld	r25, X
     a82:	91 87       	std	Z+9, r25	; 0x09
			rx_frames[pos].data[7] = CANMSG;
     a84:	9c 91       	ld	r25, X
     a86:	92 87       	std	Z+10, r25	; 0x0a
			rx_on++;
     a88:	8f 5f       	subi	r24, 0xFF	; 255
     a8a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <rx_on>

			// Reset if reset can message
			if(rx_frames[pos].id == 0x000 && rx_frames[pos].data[0] == 0x03){
     a8e:	40 81       	ld	r20, Z
     a90:	42 95       	swap	r20
     a92:	46 95       	lsr	r20
     a94:	47 70       	andi	r20, 0x07	; 7
     a96:	51 81       	ldd	r21, Z+1	; 0x01
     a98:	65 2f       	mov	r22, r21
     a9a:	66 0f       	add	r22, r22
     a9c:	66 0f       	add	r22, r22
     a9e:	66 0f       	add	r22, r22
     aa0:	86 2f       	mov	r24, r22
     aa2:	84 2b       	or	r24, r20
     aa4:	95 2f       	mov	r25, r21
     aa6:	92 95       	swap	r25
     aa8:	96 95       	lsr	r25
     aaa:	97 70       	andi	r25, 0x07	; 7
     aac:	89 2b       	or	r24, r25
     aae:	b1 f4       	brne	.+44     	; 0xadc <__vector_18+0x1a2>
     ab0:	8b e0       	ldi	r24, 0x0B	; 11
     ab2:	82 9f       	mul	r24, r18
     ab4:	f0 01       	movw	r30, r0
     ab6:	83 9f       	mul	r24, r19
     ab8:	f0 0d       	add	r31, r0
     aba:	11 24       	eor	r1, r1
     abc:	ed 5c       	subi	r30, 0xCD	; 205
     abe:	fe 4f       	sbci	r31, 0xFE	; 254
     ac0:	83 81       	ldd	r24, Z+3	; 0x03
     ac2:	83 30       	cpi	r24, 0x03	; 3
     ac4:	59 f4       	brne	.+22     	; 0xadc <__vector_18+0x1a2>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     ac6:	98 e0       	ldi	r25, 0x08	; 8
     ac8:	88 e1       	ldi	r24, 0x18	; 24
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	f8 94       	cli
     ace:	a8 95       	wdr
     ad0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     ad4:	0f be       	out	0x3f, r0	; 63
     ad6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     ada:	ff cf       	rjmp	.-2      	; 0xada <__vector_18+0x1a0>
				while(1); //wait for watchdog
			}
		}

		// Clear irq
		mob_status = CANSTMOB;
     adc:	ee ee       	ldi	r30, 0xEE	; 238
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	80 81       	ld	r24, Z
     ae2:	89 83       	std	Y+1, r24	; 0x01
		(void)mob_status;
     ae4:	89 81       	ldd	r24, Y+1	; 0x01

		CANSTMOB &= ~(1 << RXOK);
     ae6:	80 81       	ld	r24, Z
     ae8:	8f 7d       	andi	r24, 0xDF	; 223
     aea:	80 83       	st	Z, r24
		CANCDMOB = (1 << CONMOB1);			//Set Mob 1 as RX
     aec:	80 e8       	ldi	r24, 0x80	; 128
     aee:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	}
}
     af2:	0f 90       	pop	r0
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	ff 91       	pop	r31
     afa:	ef 91       	pop	r30
     afc:	bf 91       	pop	r27
     afe:	af 91       	pop	r26
     b00:	9f 91       	pop	r25
     b02:	8f 91       	pop	r24
     b04:	6f 91       	pop	r22
     b06:	5f 91       	pop	r21
     b08:	4f 91       	pop	r20
     b0a:	3f 91       	pop	r19
     b0c:	2f 91       	pop	r18
     b0e:	0f 90       	pop	r0
     b10:	0b be       	out	0x3b, r0	; 59
     b12:	0f 90       	pop	r0
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	0f 90       	pop	r0
     b18:	1f 90       	pop	r1
     b1a:	18 95       	reti

00000b1c <can_init>:


void can_init(uint16_t accept_mask_id, uint16_t accept_tag_id) {
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
	// Reset CAN controller
	CANGCON = (1 << SWRES);
     b20:	e8 ed       	ldi	r30, 0xD8	; 216
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	21 e0       	ldi	r18, 0x01	; 1
     b26:	20 83       	st	Z, r18

	CANBT1 = (BRP_VALUE - 1) << 1;
     b28:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = ((SJW_VALUE - 1) << 5) | ((PROP_SEG - 1) << 1);
     b2c:	2c e0       	ldi	r18, 0x0C	; 12
     b2e:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = ((PHASE_SEG_2 - 1) << 4) | ((PHASE_SEG_1 - 1) << 1) | 1;
     b32:	27 e3       	ldi	r18, 0x37	; 55
     b34:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	CANTIM = 0;
     b38:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
     b3c:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	CANTTC = 0;
     b40:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     b44:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	CANHPMOB = 0;
     b48:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	CANTCON = 0;
     b4c:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	// Switch to Mob 0 access
	CANPAGE = (0x0 << MOBNB0);
     b50:	cd ee       	ldi	r28, 0xED	; 237
     b52:	d0 e0       	ldi	r29, 0x00	; 0
     b54:	18 82       	st	Y, r1
	CANSTMOB = 0;
     b56:	ae ee       	ldi	r26, 0xEE	; 238
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	1c 92       	st	X, r1

	// Switch to Mob 1 access
	CANPAGE = (0x1 << MOBNB0);
     b5c:	20 e1       	ldi	r18, 0x10	; 16
     b5e:	28 83       	st	Y, r18
	CANSTMOB = 0;
     b60:	1c 92       	st	X, r1
	CANIDM4 = 0;
     b62:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANIDM2 = (accept_mask_id << 5) & 0xFF;
     b66:	28 2f       	mov	r18, r24
     b68:	22 95       	swap	r18
     b6a:	22 0f       	add	r18, r18
     b6c:	20 7e       	andi	r18, 0xE0	; 224
     b6e:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = (accept_mask_id >> 3) & 0xFF;
     b72:	96 95       	lsr	r25
     b74:	87 95       	ror	r24
     b76:	96 95       	lsr	r25
     b78:	87 95       	ror	r24
     b7a:	96 95       	lsr	r25
     b7c:	87 95       	ror	r24
     b7e:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDT4 = 0;
     b82:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT2 = (accept_tag_id << 5) & 0xFF;
     b86:	86 2f       	mov	r24, r22
     b88:	82 95       	swap	r24
     b8a:	88 0f       	add	r24, r24
     b8c:	80 7e       	andi	r24, 0xE0	; 224
     b8e:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (accept_tag_id >> 3) & 0xFF;
     b92:	76 95       	lsr	r23
     b94:	67 95       	ror	r22
     b96:	76 95       	lsr	r23
     b98:	67 95       	ror	r22
     b9a:	76 95       	lsr	r23
     b9c:	67 95       	ror	r22
     b9e:	60 93 f3 00 	sts	0x00F3, r22	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

	// Set Mob 1 as RX
	CANCDMOB = (1 << CONMOB1);
     ba2:	80 e8       	ldi	r24, 0x80	; 128
     ba4:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	// Enable Mob 0 and 1
	CANEN2 = (1 << ENMOB1) | (1 << ENMOB0);
     ba8:	83 e0       	ldi	r24, 0x03	; 3
     baa:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	// Enable Mob 0 and 1 Interrupt
	CANIE2 = (1 << ENMOB1) | (1 << ENMOB0);
     bae:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	// Enable TX and RX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);	
     bb2:	80 eb       	ldi	r24, 0xB0	; 176
     bb4:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>

	// Enable CAN controller
	CANGCON = (1 << ENASTB);
     bb8:	82 e0       	ldi	r24, 0x02	; 2
     bba:	80 83       	st	Z, r24

	reset = 0;
     bbc:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <reset>
}
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	08 95       	ret

00000bc6 <can_read_message_if_new>:

bool can_read_message_if_new(CanMessage_t* message) {
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	ec 01       	movw	r28, r24
	// Check if there is a new message
	if (rx_on == rx_off) {
     bcc:	40 91 2f 01 	lds	r20, 0x012F	; 0x80012f <rx_off>
     bd0:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <rx_on>
     bd4:	24 17       	cp	r18, r20
     bd6:	89 f1       	breq	.+98     	; 0xc3a <can_read_message_if_new+0x74>
     bd8:	a4 2f       	mov	r26, r20
     bda:	af 70       	andi	r26, 0x0F	; 15
	}

	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
     bdc:	8b e0       	ldi	r24, 0x0B	; 11
     bde:	a8 9f       	mul	r26, r24
     be0:	b0 01       	movw	r22, r0
     be2:	11 24       	eor	r1, r1
     be4:	fb 01       	movw	r30, r22
     be6:	ed 5c       	subi	r30, 0xCD	; 205
     be8:	fe 4f       	sbci	r31, 0xFE	; 254
     bea:	20 81       	ld	r18, Z
     bec:	22 95       	swap	r18
     bee:	26 95       	lsr	r18
     bf0:	27 70       	andi	r18, 0x07	; 7
     bf2:	31 81       	ldd	r19, Z+1	; 0x01
     bf4:	53 2f       	mov	r21, r19
     bf6:	55 0f       	add	r21, r21
     bf8:	55 0f       	add	r21, r21
     bfa:	55 0f       	add	r21, r21
     bfc:	25 2b       	or	r18, r21
     bfe:	32 95       	swap	r19
     c00:	36 95       	lsr	r19
     c02:	37 70       	andi	r19, 0x07	; 7
     c04:	28 83       	st	Y, r18
     c06:	39 83       	std	Y+1, r19	; 0x01
	message->length = frame->length;
     c08:	fb 01       	movw	r30, r22
     c0a:	eb 5c       	subi	r30, 0xCB	; 203
     c0c:	fe 4f       	sbci	r31, 0xFE	; 254
     c0e:	20 81       	ld	r18, Z
     c10:	2f 70       	andi	r18, 0x0F	; 15
     c12:	2a 83       	std	Y+2, r18	; 0x02
	for (int i = 0; i < message->length; i++) {
     c14:	22 23       	and	r18, r18
     c16:	99 f0       	breq	.+38     	; 0xc3e <can_read_message_if_new+0x78>
     c18:	db 01       	movw	r26, r22
     c1a:	aa 5c       	subi	r26, 0xCA	; 202
     c1c:	be 4f       	sbci	r27, 0xFE	; 254
     c1e:	fe 01       	movw	r30, r28
     c20:	33 96       	adiw	r30, 0x03	; 3
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	2d 5f       	subi	r18, 0xFD	; 253
     c26:	3f 4f       	sbci	r19, 0xFF	; 255
     c28:	ce 01       	movw	r24, r28
     c2a:	82 0f       	add	r24, r18
     c2c:	93 1f       	adc	r25, r19
		message->data.u8[i] = frame->data[i];
     c2e:	2d 91       	ld	r18, X+
     c30:	21 93       	st	Z+, r18
	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
	message->length = frame->length;
	for (int i = 0; i < message->length; i++) {
     c32:	e8 17       	cp	r30, r24
     c34:	f9 07       	cpc	r31, r25
     c36:	d9 f7       	brne	.-10     	; 0xc2e <can_read_message_if_new+0x68>
     c38:	02 c0       	rjmp	.+4      	; 0xc3e <can_read_message_if_new+0x78>
}

bool can_read_message_if_new(CanMessage_t* message) {
	// Check if there is a new message
	if (rx_on == rx_off) {
		return false;
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	04 c0       	rjmp	.+8      	; 0xc46 <can_read_message_if_new+0x80>
		message->data.u8[i] = frame->data[i];
	}

	// Advance to next can message
	if (rx_on != rx_off) {
		rx_off++;
     c3e:	4f 5f       	subi	r20, 0xFF	; 255
     c40:	40 93 2f 01 	sts	0x012F, r20	; 0x80012f <rx_off>
	}

	return true;
     c44:	81 e0       	ldi	r24, 0x01	; 1
}
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	08 95       	ret

00000c4c <can_send_message>:

bool can_send_message(CanMessage_t* message) {
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	fc 01       	movw	r30, r24
	bool result = false;

	CANGIE &= ~(1 << ENIT);
     c52:	ab ed       	ldi	r26, 0xDB	; 219
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	8c 91       	ld	r24, X
     c58:	8f 77       	andi	r24, 0x7F	; 127
     c5a:	8c 93       	st	X, r24

	if (!tx_busy) {
     c5c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <tx_busy>
     c60:	81 11       	cpse	r24, r1
     c62:	27 c0       	rjmp	.+78     	; 0xcb2 <can_send_message+0x66>
		// Switch to Mob 0 access
		CANPAGE = 0 << 4;
     c64:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		// Set ID
		CANIDT2 = message->id << 5;
     c68:	80 81       	ld	r24, Z
     c6a:	82 95       	swap	r24
     c6c:	88 0f       	add	r24, r24
     c6e:	80 7e       	andi	r24, 0xE0	; 224
     c70:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT1 = message->id >> 3;
     c74:	80 81       	ld	r24, Z
     c76:	91 81       	ldd	r25, Z+1	; 0x01
     c78:	96 95       	lsr	r25
     c7a:	87 95       	ror	r24
     c7c:	96 95       	lsr	r25
     c7e:	87 95       	ror	r24
     c80:	96 95       	lsr	r25
     c82:	87 95       	ror	r24
     c84:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     c88:	df 01       	movw	r26, r30
     c8a:	13 96       	adiw	r26, 0x03	; 3
     c8c:	9f 01       	movw	r18, r30
     c8e:	25 5f       	subi	r18, 0xF5	; 245
     c90:	3f 4f       	sbci	r19, 0xFF	; 255

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
     c92:	ca ef       	ldi	r28, 0xFA	; 250
     c94:	d0 e0       	ldi	r29, 0x00	; 0
     c96:	9d 91       	ld	r25, X+
     c98:	98 83       	st	Y, r25
		// Set ID
		CANIDT2 = message->id << 5;
		CANIDT1 = message->id >> 3;

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
     c9a:	a2 17       	cp	r26, r18
     c9c:	b3 07       	cpc	r27, r19
     c9e:	d9 f7       	brne	.-10     	; 0xc96 <can_send_message+0x4a>
			CANMSG = message->data.u8[i];
		}
		
		result = true;
		tx_busy = 1;
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <tx_busy>

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
     ca6:	82 81       	ldd	r24, Z+2	; 0x02
     ca8:	80 64       	ori	r24, 0x40	; 64
     caa:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
		}
		
		result = true;
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	43 c0       	rjmp	.+134    	; 0xd38 <can_send_message+0xec>
		tx_busy = 1;

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
	}
	else if (TX_SIZE - ((tx_on - tx_off) & TX_ABS_MASK)) {
     cb2:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <tx_on>
     cb6:	82 2f       	mov	r24, r18
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <tx_off>
     cbe:	83 1b       	sub	r24, r19
     cc0:	91 09       	sbc	r25, r1
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	99 27       	eor	r25, r25
     cc6:	40 97       	sbiw	r24, 0x10	; 16
     cc8:	b1 f1       	breq	.+108    	; 0xd36 <can_send_message+0xea>
		// Copy data into TX buffer
		tx_frames[tx_on & (TX_SIZE-1)].id = message->id;
     cca:	a2 2f       	mov	r26, r18
     ccc:	af 70       	andi	r26, 0x0F	; 15
     cce:	8b e0       	ldi	r24, 0x0B	; 11
     cd0:	a8 9f       	mul	r26, r24
     cd2:	d0 01       	movw	r26, r0
     cd4:	11 24       	eor	r1, r1
     cd6:	ed 01       	movw	r28, r26
     cd8:	cd 51       	subi	r28, 0x1D	; 29
     cda:	de 4f       	sbci	r29, 0xFE	; 254
     cdc:	80 81       	ld	r24, Z
     cde:	98 2f       	mov	r25, r24
     ce0:	92 95       	swap	r25
     ce2:	99 0f       	add	r25, r25
     ce4:	90 7e       	andi	r25, 0xE0	; 224
     ce6:	88 81       	ld	r24, Y
     ce8:	8f 71       	andi	r24, 0x1F	; 31
     cea:	89 2b       	or	r24, r25
     cec:	88 83       	st	Y, r24
     cee:	80 81       	ld	r24, Z
     cf0:	98 2f       	mov	r25, r24
     cf2:	96 95       	lsr	r25
     cf4:	96 95       	lsr	r25
     cf6:	96 95       	lsr	r25
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	80 7e       	andi	r24, 0xE0	; 224
     cfc:	89 2b       	or	r24, r25
     cfe:	89 83       	std	Y+1, r24	; 0x01
     d00:	91 81       	ldd	r25, Z+1	; 0x01
     d02:	92 95       	swap	r25
     d04:	99 0f       	add	r25, r25
     d06:	90 7e       	andi	r25, 0xE0	; 224
     d08:	8f 71       	andi	r24, 0x1F	; 31
     d0a:	89 2b       	or	r24, r25
     d0c:	89 83       	std	Y+1, r24	; 0x01
		tx_frames[tx_on & (TX_SIZE-1)].length = message->length;
     d0e:	82 81       	ldd	r24, Z+2	; 0x02
     d10:	98 2f       	mov	r25, r24
     d12:	9f 70       	andi	r25, 0x0F	; 15
     d14:	8a 81       	ldd	r24, Y+2	; 0x02
     d16:	80 7f       	andi	r24, 0xF0	; 240
     d18:	89 2b       	or	r24, r25
     d1a:	8a 83       	std	Y+2, r24	; 0x02
		memcpy(tx_frames[tx_on & (TX_SIZE-1)].data, &message->data, CAN_FRAME_DATA_MAX_LENGTH);
     d1c:	aa 51       	subi	r26, 0x1A	; 26
     d1e:	be 4f       	sbci	r27, 0xFE	; 254
     d20:	33 96       	adiw	r30, 0x03	; 3
     d22:	88 e0       	ldi	r24, 0x08	; 8
     d24:	01 90       	ld	r0, Z+
     d26:	0d 92       	st	X+, r0
     d28:	8a 95       	dec	r24
     d2a:	e1 f7       	brne	.-8      	; 0xd24 <can_send_message+0xd8>

		/*for (int i = 0; i < 8; i++) {
			tx_frames[tx_on & (TX_SIZE-1)].data[i] = message->data.u8[i];
		}*/

		tx_on++;
     d2c:	2f 5f       	subi	r18, 0xFF	; 255
     d2e:	20 93 31 01 	sts	0x0131, r18	; 0x800131 <tx_on>
		result = true;
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	01 c0       	rjmp	.+2      	; 0xd38 <can_send_message+0xec>

	return true;
}

bool can_send_message(CanMessage_t* message) {
	bool result = false;
     d36:	80 e0       	ldi	r24, 0x00	; 0

		tx_on++;
		result = true;
	}

	CANGIE |= (1 << ENIT);
     d38:	eb ed       	ldi	r30, 0xDB	; 219
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	90 81       	ld	r25, Z
     d3e:	90 68       	ori	r25, 0x80	; 128
     d40:	90 83       	st	Z, r25

	return result;
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	08 95       	ret

00000d48 <pwm_init>:
#include "pwm.h"

#include <avr/interrupt.h>
#include <avr/io.h>

void pwm_init(void){
     d48:	0f 93       	push	r16
     d4a:	1f 93       	push	r17
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
	
	//Set pwm_pins as output;
	PORTE &= ~((1<<PE3)|(1<<PE4)|(1<<PE5));
     d50:	8e b1       	in	r24, 0x0e	; 14
     d52:	87 7c       	andi	r24, 0xC7	; 199
     d54:	8e b9       	out	0x0e, r24	; 14
	DDRE |= (1<<PE3)|(1<<PE4)|(1<<PE5);
     d56:	8d b1       	in	r24, 0x0d	; 13
     d58:	88 63       	ori	r24, 0x38	; 56
     d5a:	8d b9       	out	0x0d, r24	; 13
	
	PORTB &= ~(1<<PB4);
     d5c:	2c 98       	cbi	0x05, 4	; 5
	DDRB |= (1<<PB4);
     d5e:	24 9a       	sbi	0x04, 4	; 4
	
	//Timer 3 fast pwm, mode 14, TOP at ICR
	TCCR3B |= (1<<WGM33)|(1<<WGM32);
     d60:	a1 e9       	ldi	r26, 0x91	; 145
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	8c 91       	ld	r24, X
     d66:	88 61       	ori	r24, 0x18	; 24
     d68:	8c 93       	st	X, r24
	TCCR3A |= (1<<WGM31);
     d6a:	e0 e9       	ldi	r30, 0x90	; 144
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	82 60       	ori	r24, 0x02	; 2
     d72:	80 83       	st	Z, r24
	TCCR3A &= ~(1<<WGM30);
     d74:	80 81       	ld	r24, Z
     d76:	8e 7f       	andi	r24, 0xFE	; 254
     d78:	80 83       	st	Z, r24
	
	//Timer 2 fast pwm, mode 3, Top at 0xFF
	TCCR2A |= (1<<WGM21)|(1<<WGM20);
     d7a:	c0 eb       	ldi	r28, 0xB0	; 176
     d7c:	d0 e0       	ldi	r29, 0x00	; 0
     d7e:	88 81       	ld	r24, Y
     d80:	88 64       	ori	r24, 0x48	; 72
     d82:	88 83       	st	Y, r24

	// Non inverted PWM for A
	TCCR3A |= (1<<COM3A1);
     d84:	80 81       	ld	r24, Z
     d86:	80 68       	ori	r24, 0x80	; 128
     d88:	80 83       	st	Z, r24
	TCCR3A &= ~(1<<COM3A0);
     d8a:	80 81       	ld	r24, Z
     d8c:	8f 7b       	andi	r24, 0xBF	; 191
     d8e:	80 83       	st	Z, r24
	
	// Inverted PWM for B
	TCCR3A |= (1<<COM3B1);
     d90:	80 81       	ld	r24, Z
     d92:	80 62       	ori	r24, 0x20	; 32
     d94:	80 83       	st	Z, r24
	TCCR3A |= (1<<COM3B0);
     d96:	80 81       	ld	r24, Z
     d98:	80 61       	ori	r24, 0x10	; 16
     d9a:	80 83       	st	Z, r24
	
	TCCR2A |= (1<<COM2A1);
     d9c:	88 81       	ld	r24, Y
     d9e:	80 62       	ori	r24, 0x20	; 32
     da0:	88 83       	st	Y, r24
	TCCR2A &=  ~((1<<COM2A0));
     da2:	88 81       	ld	r24, Y
     da4:	8f 7e       	andi	r24, 0xEF	; 239
     da6:	88 83       	st	Y, r24
	
	//Set prescale clk/1 for timer 3
	
	TCCR3B |= (1<<CS30);
     da8:	8c 91       	ld	r24, X
     daa:	81 60       	ori	r24, 0x01	; 1
     dac:	8c 93       	st	X, r24
	TCCR3B &= ~((1<<CS32)|(1<<CS31));
     dae:	8c 91       	ld	r24, X
     db0:	89 7f       	andi	r24, 0xF9	; 249
     db2:	8c 93       	st	X, r24
	
	//Set top value for timer 3
	ICR3 = 0x199; //20kHz
     db4:	e6 e9       	ldi	r30, 0x96	; 150
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	89 e9       	ldi	r24, 0x99	; 153
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	91 83       	std	Z+1, r25	; 0x01
     dbe:	80 83       	st	Z, r24
	
	//Set off 
	OCR3A = 0;
     dc0:	c8 e9       	ldi	r28, 0x98	; 152
     dc2:	d0 e0       	ldi	r29, 0x00	; 0
     dc4:	19 82       	std	Y+1, r1	; 0x01
     dc6:	18 82       	st	Y, r1
	OCR3B = 0;
     dc8:	0a e9       	ldi	r16, 0x9A	; 154
     dca:	10 e0       	ldi	r17, 0x00	; 0
     dcc:	d8 01       	movw	r26, r16
     dce:	11 96       	adiw	r26, 0x01	; 1
     dd0:	1c 92       	st	X, r1
     dd2:	1e 92       	st	-X, r1
	OCR3C = 0;
     dd4:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
     dd8:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	OCR2A = 0;	
     ddc:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	
	OCR3A = (int)((0.5)*ICR3) ; //PWM_PE3 (non inverted)
     de0:	60 81       	ld	r22, Z
     de2:	71 81       	ldd	r23, Z+1	; 0x01
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	91 d1       	rcall	.+802    	; 0x110c <__floatunsisf>
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	40 e0       	ldi	r20, 0x00	; 0
     df0:	5f e3       	ldi	r21, 0x3F	; 63
     df2:	42 d2       	rcall	.+1156   	; 0x1278 <__mulsf3>
     df4:	5a d1       	rcall	.+692    	; 0x10aa <__fixsfsi>
     df6:	79 83       	std	Y+1, r23	; 0x01
     df8:	68 83       	st	Y, r22
	OCR3B = OCR3A ; //PWM_PE4 (inverted)
     dfa:	88 81       	ld	r24, Y
     dfc:	99 81       	ldd	r25, Y+1	; 0x01
     dfe:	f8 01       	movw	r30, r16
     e00:	91 83       	std	Z+1, r25	; 0x01
     e02:	80 83       	st	Z, r24
}
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	1f 91       	pop	r17
     e0a:	0f 91       	pop	r16
     e0c:	08 95       	ret

00000e0e <rgbled_turn_off>:
	DDRB |= LED_ALL;
	rgbled_turn_off(LED_ALL);
}

void rgbled_turn_off(RgbLedColor_t color) {
	PORTB |= color;
     e0e:	95 b1       	in	r25, 0x05	; 5
     e10:	89 2b       	or	r24, r25
     e12:	85 b9       	out	0x05, r24	; 5
     e14:	08 95       	ret

00000e16 <rgbled_init>:
#include "rgbled.h"
#include <avr/io.h>


void rgbled_init() {
	DDRB |= LED_ALL;
     e16:	84 b1       	in	r24, 0x04	; 4
     e18:	80 6e       	ori	r24, 0xE0	; 224
     e1a:	84 b9       	out	0x04, r24	; 4
	rgbled_turn_off(LED_ALL);
     e1c:	80 ee       	ldi	r24, 0xE0	; 224
     e1e:	f7 cf       	rjmp	.-18     	; 0xe0e <rgbled_turn_off>
     e20:	08 95       	ret

00000e22 <rgbled_turn_on>:
void rgbled_turn_off(RgbLedColor_t color) {
	PORTB |= color;
}

void rgbled_turn_on(RgbLedColor_t color) {
	PORTB &= ~color;
     e22:	95 b1       	in	r25, 0x05	; 5
     e24:	80 95       	com	r24
     e26:	98 23       	and	r25, r24
     e28:	95 b9       	out	0x05, r25	; 5
     e2a:	08 95       	ret

00000e2c <spi_init>:
#define PIN_SCK PB1
#define PIN_SS PB0

void spi_init(spi_prescale_t clock_prescale) {
	// Set MOSI, SS, and SCK output, all others input
	DDR_SPI |= (1 << PIN_MOSI) | (1 << PIN_SCK) | (1 << PIN_SS);
     e2c:	94 b1       	in	r25, 0x04	; 4
     e2e:	97 60       	ori	r25, 0x07	; 7
     e30:	94 b9       	out	0x04, r25	; 4
	
	uint8_t SPI2X_val = (uint8_t)((clock_prescale >> 2) & 0b001);
     e32:	82 fb       	bst	r24, 2
     e34:	99 27       	eor	r25, r25
     e36:	90 f9       	bld	r25, 0
	uint8_t SPR1_val = (uint8_t)((clock_prescale >> 1) & 0b001);
	uint8_t SPR0_val = (uint8_t)((clock_prescale >> 0) & 0b001);

	// Enable SPI, Master, selected prescaling, mode 3 (CPOL = CPHA = 1)
	SPCR = (1 << SPE) | (1 << MSTR) | (SPR1_val << SPR1) | (SPR0_val << SPR0) | (1 << CPOL) | (1 << CPHA);
     e38:	28 2f       	mov	r18, r24
     e3a:	22 70       	andi	r18, 0x02	; 2
     e3c:	81 70       	andi	r24, 0x01	; 1
     e3e:	8c 65       	ori	r24, 0x5C	; 92
     e40:	82 2b       	or	r24, r18
     e42:	8c bd       	out	0x2c, r24	; 44
	SPSR = (SPI2X_val << SPI2X);
     e44:	9d bd       	out	0x2d, r25	; 45
     e46:	08 95       	ret

00000e48 <spi_trancieve>:
}

void spi_trancieve(uint8_t* tx_buffer, uint8_t* rx_buffer, size_t length, bool last_in_transmission) {
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	ec 01       	movw	r28, r24
	PORTB &= ~(1 << PIN_SS);
     e4e:	28 98       	cbi	0x05, 0	; 5

	for (size_t i = 0; i < length; i++) {
     e50:	41 15       	cp	r20, r1
     e52:	51 05       	cpc	r21, r1
     e54:	c1 f0       	breq	.+48     	; 0xe86 <spi_trancieve+0x3e>
     e56:	fb 01       	movw	r30, r22
     e58:	dc 01       	movw	r26, r24
     e5a:	46 0f       	add	r20, r22
     e5c:	57 1f       	adc	r21, r23
		SPDR = (tx_buffer != NULL) ? tx_buffer[i] : 0xFF;
     e5e:	8f ef       	ldi	r24, 0xFF	; 255
     e60:	20 97       	sbiw	r28, 0x00	; 0
     e62:	11 f0       	breq	.+4      	; 0xe68 <spi_trancieve+0x20>
     e64:	9c 91       	ld	r25, X
     e66:	01 c0       	rjmp	.+2      	; 0xe6a <spi_trancieve+0x22>
     e68:	98 2f       	mov	r25, r24
     e6a:	9e bd       	out	0x2e, r25	; 46

		while(!(SPSR & (1 << SPIF)));
     e6c:	0d b4       	in	r0, 0x2d	; 45
     e6e:	07 fe       	sbrs	r0, 7
     e70:	fd cf       	rjmp	.-6      	; 0xe6c <spi_trancieve+0x24>
		
		if (rx_buffer != NULL) rx_buffer[i] = SPDR;
     e72:	61 15       	cp	r22, r1
     e74:	71 05       	cpc	r23, r1
     e76:	11 f0       	breq	.+4      	; 0xe7c <spi_trancieve+0x34>
     e78:	9e b5       	in	r25, 0x2e	; 46
     e7a:	90 83       	st	Z, r25
     e7c:	31 96       	adiw	r30, 0x01	; 1
     e7e:	11 96       	adiw	r26, 0x01	; 1
}

void spi_trancieve(uint8_t* tx_buffer, uint8_t* rx_buffer, size_t length, bool last_in_transmission) {
	PORTB &= ~(1 << PIN_SS);

	for (size_t i = 0; i < length; i++) {
     e80:	e4 17       	cp	r30, r20
     e82:	f5 07       	cpc	r31, r21
     e84:	69 f7       	brne	.-38     	; 0xe60 <spi_trancieve+0x18>
		while(!(SPSR & (1 << SPIF)));
		
		if (rx_buffer != NULL) rx_buffer[i] = SPDR;
	}

	if (last_in_transmission) {
     e86:	21 11       	cpse	r18, r1
		PORTB |= (1 << PIN_SS);
     e88:	28 9a       	sbi	0x05, 0	; 5
	}
}
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	08 95       	ret

00000e90 <__vector_17>:

uint16_t timer_elapsed_ms(timer_t timer) {
	return elapsed_microseconds[timer] / 1000;
}

ISR(TIMER0_OVF_vect) {
     e90:	1f 92       	push	r1
     e92:	0f 92       	push	r0
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	0f 92       	push	r0
     e98:	11 24       	eor	r1, r1
     e9a:	0b b6       	in	r0, 0x3b	; 59
     e9c:	0f 92       	push	r0
     e9e:	2f 93       	push	r18
     ea0:	3f 93       	push	r19
     ea2:	4f 93       	push	r20
     ea4:	5f 93       	push	r21
     ea6:	6f 93       	push	r22
     ea8:	7f 93       	push	r23
     eaa:	8f 93       	push	r24
     eac:	af 93       	push	r26
     eae:	bf 93       	push	r27
     eb0:	ef 93       	push	r30
     eb2:	ff 93       	push	r31
     eb4:	a3 eb       	ldi	r26, 0xB3	; 179
     eb6:	b2 e0       	ldi	r27, 0x02	; 2
     eb8:	e3 e9       	ldi	r30, 0x93	; 147
     eba:	f2 e0       	ldi	r31, 0x02	; 2
     ebc:	23 eb       	ldi	r18, 0xB3	; 179
     ebe:	32 e0       	ldi	r19, 0x02	; 2
	for (int t = 0; t < NUMBER_OF_TIMERS; t++) {
		if (timer_enabled[t]){
     ec0:	8d 91       	ld	r24, X+
     ec2:	88 23       	and	r24, r24
     ec4:	59 f0       	breq	.+22     	; 0xedc <__vector_17+0x4c>
			elapsed_microseconds[t] += (1000000ULL * 256 * 256) / F_CPU;
     ec6:	40 81       	ld	r20, Z
     ec8:	51 81       	ldd	r21, Z+1	; 0x01
     eca:	62 81       	ldd	r22, Z+2	; 0x02
     ecc:	73 81       	ldd	r23, Z+3	; 0x03
     ece:	50 5e       	subi	r21, 0xE0	; 224
     ed0:	6f 4f       	sbci	r22, 0xFF	; 255
     ed2:	7f 4f       	sbci	r23, 0xFF	; 255
     ed4:	40 83       	st	Z, r20
     ed6:	51 83       	std	Z+1, r21	; 0x01
     ed8:	62 83       	std	Z+2, r22	; 0x02
     eda:	73 83       	std	Z+3, r23	; 0x03
     edc:	34 96       	adiw	r30, 0x04	; 4
uint16_t timer_elapsed_ms(timer_t timer) {
	return elapsed_microseconds[timer] / 1000;
}

ISR(TIMER0_OVF_vect) {
	for (int t = 0; t < NUMBER_OF_TIMERS; t++) {
     ede:	e2 17       	cp	r30, r18
     ee0:	f3 07       	cpc	r31, r19
     ee2:	71 f7       	brne	.-36     	; 0xec0 <__vector_17+0x30>
		if (timer_enabled[t]){
			elapsed_microseconds[t] += (1000000ULL * 256 * 256) / F_CPU;
		}
	}
}
     ee4:	ff 91       	pop	r31
     ee6:	ef 91       	pop	r30
     ee8:	bf 91       	pop	r27
     eea:	af 91       	pop	r26
     eec:	8f 91       	pop	r24
     eee:	7f 91       	pop	r23
     ef0:	6f 91       	pop	r22
     ef2:	5f 91       	pop	r21
     ef4:	4f 91       	pop	r20
     ef6:	3f 91       	pop	r19
     ef8:	2f 91       	pop	r18
     efa:	0f 90       	pop	r0
     efc:	0b be       	out	0x3b, r0	; 59
     efe:	0f 90       	pop	r0
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	0f 90       	pop	r0
     f04:	1f 90       	pop	r1
     f06:	18 95       	reti

00000f08 <__subsf3>:
     f08:	50 58       	subi	r21, 0x80	; 128

00000f0a <__addsf3>:
     f0a:	bb 27       	eor	r27, r27
     f0c:	aa 27       	eor	r26, r26
     f0e:	0e d0       	rcall	.+28     	; 0xf2c <__addsf3x>
     f10:	75 c1       	rjmp	.+746    	; 0x11fc <__fp_round>
     f12:	66 d1       	rcall	.+716    	; 0x11e0 <__fp_pscA>
     f14:	30 f0       	brcs	.+12     	; 0xf22 <__addsf3+0x18>
     f16:	6b d1       	rcall	.+726    	; 0x11ee <__fp_pscB>
     f18:	20 f0       	brcs	.+8      	; 0xf22 <__addsf3+0x18>
     f1a:	31 f4       	brne	.+12     	; 0xf28 <__addsf3+0x1e>
     f1c:	9f 3f       	cpi	r25, 0xFF	; 255
     f1e:	11 f4       	brne	.+4      	; 0xf24 <__addsf3+0x1a>
     f20:	1e f4       	brtc	.+6      	; 0xf28 <__addsf3+0x1e>
     f22:	5b c1       	rjmp	.+694    	; 0x11da <__fp_nan>
     f24:	0e f4       	brtc	.+2      	; 0xf28 <__addsf3+0x1e>
     f26:	e0 95       	com	r30
     f28:	e7 fb       	bst	r30, 7
     f2a:	51 c1       	rjmp	.+674    	; 0x11ce <__fp_inf>

00000f2c <__addsf3x>:
     f2c:	e9 2f       	mov	r30, r25
     f2e:	77 d1       	rcall	.+750    	; 0x121e <__fp_split3>
     f30:	80 f3       	brcs	.-32     	; 0xf12 <__addsf3+0x8>
     f32:	ba 17       	cp	r27, r26
     f34:	62 07       	cpc	r22, r18
     f36:	73 07       	cpc	r23, r19
     f38:	84 07       	cpc	r24, r20
     f3a:	95 07       	cpc	r25, r21
     f3c:	18 f0       	brcs	.+6      	; 0xf44 <__addsf3x+0x18>
     f3e:	71 f4       	brne	.+28     	; 0xf5c <__addsf3x+0x30>
     f40:	9e f5       	brtc	.+102    	; 0xfa8 <__addsf3x+0x7c>
     f42:	8f c1       	rjmp	.+798    	; 0x1262 <__fp_zero>
     f44:	0e f4       	brtc	.+2      	; 0xf48 <__addsf3x+0x1c>
     f46:	e0 95       	com	r30
     f48:	0b 2e       	mov	r0, r27
     f4a:	ba 2f       	mov	r27, r26
     f4c:	a0 2d       	mov	r26, r0
     f4e:	0b 01       	movw	r0, r22
     f50:	b9 01       	movw	r22, r18
     f52:	90 01       	movw	r18, r0
     f54:	0c 01       	movw	r0, r24
     f56:	ca 01       	movw	r24, r20
     f58:	a0 01       	movw	r20, r0
     f5a:	11 24       	eor	r1, r1
     f5c:	ff 27       	eor	r31, r31
     f5e:	59 1b       	sub	r21, r25
     f60:	99 f0       	breq	.+38     	; 0xf88 <__addsf3x+0x5c>
     f62:	59 3f       	cpi	r21, 0xF9	; 249
     f64:	50 f4       	brcc	.+20     	; 0xf7a <__addsf3x+0x4e>
     f66:	50 3e       	cpi	r21, 0xE0	; 224
     f68:	68 f1       	brcs	.+90     	; 0xfc4 <__addsf3x+0x98>
     f6a:	1a 16       	cp	r1, r26
     f6c:	f0 40       	sbci	r31, 0x00	; 0
     f6e:	a2 2f       	mov	r26, r18
     f70:	23 2f       	mov	r18, r19
     f72:	34 2f       	mov	r19, r20
     f74:	44 27       	eor	r20, r20
     f76:	58 5f       	subi	r21, 0xF8	; 248
     f78:	f3 cf       	rjmp	.-26     	; 0xf60 <__addsf3x+0x34>
     f7a:	46 95       	lsr	r20
     f7c:	37 95       	ror	r19
     f7e:	27 95       	ror	r18
     f80:	a7 95       	ror	r26
     f82:	f0 40       	sbci	r31, 0x00	; 0
     f84:	53 95       	inc	r21
     f86:	c9 f7       	brne	.-14     	; 0xf7a <__addsf3x+0x4e>
     f88:	7e f4       	brtc	.+30     	; 0xfa8 <__addsf3x+0x7c>
     f8a:	1f 16       	cp	r1, r31
     f8c:	ba 0b       	sbc	r27, r26
     f8e:	62 0b       	sbc	r22, r18
     f90:	73 0b       	sbc	r23, r19
     f92:	84 0b       	sbc	r24, r20
     f94:	ba f0       	brmi	.+46     	; 0xfc4 <__addsf3x+0x98>
     f96:	91 50       	subi	r25, 0x01	; 1
     f98:	a1 f0       	breq	.+40     	; 0xfc2 <__addsf3x+0x96>
     f9a:	ff 0f       	add	r31, r31
     f9c:	bb 1f       	adc	r27, r27
     f9e:	66 1f       	adc	r22, r22
     fa0:	77 1f       	adc	r23, r23
     fa2:	88 1f       	adc	r24, r24
     fa4:	c2 f7       	brpl	.-16     	; 0xf96 <__addsf3x+0x6a>
     fa6:	0e c0       	rjmp	.+28     	; 0xfc4 <__addsf3x+0x98>
     fa8:	ba 0f       	add	r27, r26
     faa:	62 1f       	adc	r22, r18
     fac:	73 1f       	adc	r23, r19
     fae:	84 1f       	adc	r24, r20
     fb0:	48 f4       	brcc	.+18     	; 0xfc4 <__addsf3x+0x98>
     fb2:	87 95       	ror	r24
     fb4:	77 95       	ror	r23
     fb6:	67 95       	ror	r22
     fb8:	b7 95       	ror	r27
     fba:	f7 95       	ror	r31
     fbc:	9e 3f       	cpi	r25, 0xFE	; 254
     fbe:	08 f0       	brcs	.+2      	; 0xfc2 <__addsf3x+0x96>
     fc0:	b3 cf       	rjmp	.-154    	; 0xf28 <__addsf3+0x1e>
     fc2:	93 95       	inc	r25
     fc4:	88 0f       	add	r24, r24
     fc6:	08 f0       	brcs	.+2      	; 0xfca <__addsf3x+0x9e>
     fc8:	99 27       	eor	r25, r25
     fca:	ee 0f       	add	r30, r30
     fcc:	97 95       	ror	r25
     fce:	87 95       	ror	r24
     fd0:	08 95       	ret

00000fd2 <__cmpsf2>:
     fd2:	d9 d0       	rcall	.+434    	; 0x1186 <__fp_cmp>
     fd4:	08 f4       	brcc	.+2      	; 0xfd8 <__cmpsf2+0x6>
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	08 95       	ret

00000fda <__divsf3>:
     fda:	0c d0       	rcall	.+24     	; 0xff4 <__divsf3x>
     fdc:	0f c1       	rjmp	.+542    	; 0x11fc <__fp_round>
     fde:	07 d1       	rcall	.+526    	; 0x11ee <__fp_pscB>
     fe0:	40 f0       	brcs	.+16     	; 0xff2 <__divsf3+0x18>
     fe2:	fe d0       	rcall	.+508    	; 0x11e0 <__fp_pscA>
     fe4:	30 f0       	brcs	.+12     	; 0xff2 <__divsf3+0x18>
     fe6:	21 f4       	brne	.+8      	; 0xff0 <__divsf3+0x16>
     fe8:	5f 3f       	cpi	r21, 0xFF	; 255
     fea:	19 f0       	breq	.+6      	; 0xff2 <__divsf3+0x18>
     fec:	f0 c0       	rjmp	.+480    	; 0x11ce <__fp_inf>
     fee:	51 11       	cpse	r21, r1
     ff0:	39 c1       	rjmp	.+626    	; 0x1264 <__fp_szero>
     ff2:	f3 c0       	rjmp	.+486    	; 0x11da <__fp_nan>

00000ff4 <__divsf3x>:
     ff4:	14 d1       	rcall	.+552    	; 0x121e <__fp_split3>
     ff6:	98 f3       	brcs	.-26     	; 0xfde <__divsf3+0x4>

00000ff8 <__divsf3_pse>:
     ff8:	99 23       	and	r25, r25
     ffa:	c9 f3       	breq	.-14     	; 0xfee <__divsf3+0x14>
     ffc:	55 23       	and	r21, r21
     ffe:	b1 f3       	breq	.-20     	; 0xfec <__divsf3+0x12>
    1000:	95 1b       	sub	r25, r21
    1002:	55 0b       	sbc	r21, r21
    1004:	bb 27       	eor	r27, r27
    1006:	aa 27       	eor	r26, r26
    1008:	62 17       	cp	r22, r18
    100a:	73 07       	cpc	r23, r19
    100c:	84 07       	cpc	r24, r20
    100e:	38 f0       	brcs	.+14     	; 0x101e <__divsf3_pse+0x26>
    1010:	9f 5f       	subi	r25, 0xFF	; 255
    1012:	5f 4f       	sbci	r21, 0xFF	; 255
    1014:	22 0f       	add	r18, r18
    1016:	33 1f       	adc	r19, r19
    1018:	44 1f       	adc	r20, r20
    101a:	aa 1f       	adc	r26, r26
    101c:	a9 f3       	breq	.-22     	; 0x1008 <__divsf3_pse+0x10>
    101e:	33 d0       	rcall	.+102    	; 0x1086 <__divsf3_pse+0x8e>
    1020:	0e 2e       	mov	r0, r30
    1022:	3a f0       	brmi	.+14     	; 0x1032 <__divsf3_pse+0x3a>
    1024:	e0 e8       	ldi	r30, 0x80	; 128
    1026:	30 d0       	rcall	.+96     	; 0x1088 <__divsf3_pse+0x90>
    1028:	91 50       	subi	r25, 0x01	; 1
    102a:	50 40       	sbci	r21, 0x00	; 0
    102c:	e6 95       	lsr	r30
    102e:	00 1c       	adc	r0, r0
    1030:	ca f7       	brpl	.-14     	; 0x1024 <__divsf3_pse+0x2c>
    1032:	29 d0       	rcall	.+82     	; 0x1086 <__divsf3_pse+0x8e>
    1034:	fe 2f       	mov	r31, r30
    1036:	27 d0       	rcall	.+78     	; 0x1086 <__divsf3_pse+0x8e>
    1038:	66 0f       	add	r22, r22
    103a:	77 1f       	adc	r23, r23
    103c:	88 1f       	adc	r24, r24
    103e:	bb 1f       	adc	r27, r27
    1040:	26 17       	cp	r18, r22
    1042:	37 07       	cpc	r19, r23
    1044:	48 07       	cpc	r20, r24
    1046:	ab 07       	cpc	r26, r27
    1048:	b0 e8       	ldi	r27, 0x80	; 128
    104a:	09 f0       	breq	.+2      	; 0x104e <__divsf3_pse+0x56>
    104c:	bb 0b       	sbc	r27, r27
    104e:	80 2d       	mov	r24, r0
    1050:	bf 01       	movw	r22, r30
    1052:	ff 27       	eor	r31, r31
    1054:	93 58       	subi	r25, 0x83	; 131
    1056:	5f 4f       	sbci	r21, 0xFF	; 255
    1058:	2a f0       	brmi	.+10     	; 0x1064 <__divsf3_pse+0x6c>
    105a:	9e 3f       	cpi	r25, 0xFE	; 254
    105c:	51 05       	cpc	r21, r1
    105e:	68 f0       	brcs	.+26     	; 0x107a <__divsf3_pse+0x82>
    1060:	b6 c0       	rjmp	.+364    	; 0x11ce <__fp_inf>
    1062:	00 c1       	rjmp	.+512    	; 0x1264 <__fp_szero>
    1064:	5f 3f       	cpi	r21, 0xFF	; 255
    1066:	ec f3       	brlt	.-6      	; 0x1062 <__divsf3_pse+0x6a>
    1068:	98 3e       	cpi	r25, 0xE8	; 232
    106a:	dc f3       	brlt	.-10     	; 0x1062 <__divsf3_pse+0x6a>
    106c:	86 95       	lsr	r24
    106e:	77 95       	ror	r23
    1070:	67 95       	ror	r22
    1072:	b7 95       	ror	r27
    1074:	f7 95       	ror	r31
    1076:	9f 5f       	subi	r25, 0xFF	; 255
    1078:	c9 f7       	brne	.-14     	; 0x106c <__divsf3_pse+0x74>
    107a:	88 0f       	add	r24, r24
    107c:	91 1d       	adc	r25, r1
    107e:	96 95       	lsr	r25
    1080:	87 95       	ror	r24
    1082:	97 f9       	bld	r25, 7
    1084:	08 95       	ret
    1086:	e1 e0       	ldi	r30, 0x01	; 1
    1088:	66 0f       	add	r22, r22
    108a:	77 1f       	adc	r23, r23
    108c:	88 1f       	adc	r24, r24
    108e:	bb 1f       	adc	r27, r27
    1090:	62 17       	cp	r22, r18
    1092:	73 07       	cpc	r23, r19
    1094:	84 07       	cpc	r24, r20
    1096:	ba 07       	cpc	r27, r26
    1098:	20 f0       	brcs	.+8      	; 0x10a2 <__divsf3_pse+0xaa>
    109a:	62 1b       	sub	r22, r18
    109c:	73 0b       	sbc	r23, r19
    109e:	84 0b       	sbc	r24, r20
    10a0:	ba 0b       	sbc	r27, r26
    10a2:	ee 1f       	adc	r30, r30
    10a4:	88 f7       	brcc	.-30     	; 0x1088 <__divsf3_pse+0x90>
    10a6:	e0 95       	com	r30
    10a8:	08 95       	ret

000010aa <__fixsfsi>:
    10aa:	04 d0       	rcall	.+8      	; 0x10b4 <__fixunssfsi>
    10ac:	68 94       	set
    10ae:	b1 11       	cpse	r27, r1
    10b0:	d9 c0       	rjmp	.+434    	; 0x1264 <__fp_szero>
    10b2:	08 95       	ret

000010b4 <__fixunssfsi>:
    10b4:	bc d0       	rcall	.+376    	; 0x122e <__fp_splitA>
    10b6:	88 f0       	brcs	.+34     	; 0x10da <__fixunssfsi+0x26>
    10b8:	9f 57       	subi	r25, 0x7F	; 127
    10ba:	90 f0       	brcs	.+36     	; 0x10e0 <__fixunssfsi+0x2c>
    10bc:	b9 2f       	mov	r27, r25
    10be:	99 27       	eor	r25, r25
    10c0:	b7 51       	subi	r27, 0x17	; 23
    10c2:	a0 f0       	brcs	.+40     	; 0x10ec <__fixunssfsi+0x38>
    10c4:	d1 f0       	breq	.+52     	; 0x10fa <__fixunssfsi+0x46>
    10c6:	66 0f       	add	r22, r22
    10c8:	77 1f       	adc	r23, r23
    10ca:	88 1f       	adc	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	1a f0       	brmi	.+6      	; 0x10d6 <__fixunssfsi+0x22>
    10d0:	ba 95       	dec	r27
    10d2:	c9 f7       	brne	.-14     	; 0x10c6 <__fixunssfsi+0x12>
    10d4:	12 c0       	rjmp	.+36     	; 0x10fa <__fixunssfsi+0x46>
    10d6:	b1 30       	cpi	r27, 0x01	; 1
    10d8:	81 f0       	breq	.+32     	; 0x10fa <__fixunssfsi+0x46>
    10da:	c3 d0       	rcall	.+390    	; 0x1262 <__fp_zero>
    10dc:	b1 e0       	ldi	r27, 0x01	; 1
    10de:	08 95       	ret
    10e0:	c0 c0       	rjmp	.+384    	; 0x1262 <__fp_zero>
    10e2:	67 2f       	mov	r22, r23
    10e4:	78 2f       	mov	r23, r24
    10e6:	88 27       	eor	r24, r24
    10e8:	b8 5f       	subi	r27, 0xF8	; 248
    10ea:	39 f0       	breq	.+14     	; 0x10fa <__fixunssfsi+0x46>
    10ec:	b9 3f       	cpi	r27, 0xF9	; 249
    10ee:	cc f3       	brlt	.-14     	; 0x10e2 <__fixunssfsi+0x2e>
    10f0:	86 95       	lsr	r24
    10f2:	77 95       	ror	r23
    10f4:	67 95       	ror	r22
    10f6:	b3 95       	inc	r27
    10f8:	d9 f7       	brne	.-10     	; 0x10f0 <__fixunssfsi+0x3c>
    10fa:	3e f4       	brtc	.+14     	; 0x110a <__stack+0xb>
    10fc:	90 95       	com	r25
    10fe:	80 95       	com	r24
    1100:	70 95       	com	r23
    1102:	61 95       	neg	r22
    1104:	7f 4f       	sbci	r23, 0xFF	; 255
    1106:	8f 4f       	sbci	r24, 0xFF	; 255
    1108:	9f 4f       	sbci	r25, 0xFF	; 255
    110a:	08 95       	ret

0000110c <__floatunsisf>:
    110c:	e8 94       	clt
    110e:	09 c0       	rjmp	.+18     	; 0x1122 <__floatsisf+0x12>

00001110 <__floatsisf>:
    1110:	97 fb       	bst	r25, 7
    1112:	3e f4       	brtc	.+14     	; 0x1122 <__floatsisf+0x12>
    1114:	90 95       	com	r25
    1116:	80 95       	com	r24
    1118:	70 95       	com	r23
    111a:	61 95       	neg	r22
    111c:	7f 4f       	sbci	r23, 0xFF	; 255
    111e:	8f 4f       	sbci	r24, 0xFF	; 255
    1120:	9f 4f       	sbci	r25, 0xFF	; 255
    1122:	99 23       	and	r25, r25
    1124:	a9 f0       	breq	.+42     	; 0x1150 <__floatsisf+0x40>
    1126:	f9 2f       	mov	r31, r25
    1128:	96 e9       	ldi	r25, 0x96	; 150
    112a:	bb 27       	eor	r27, r27
    112c:	93 95       	inc	r25
    112e:	f6 95       	lsr	r31
    1130:	87 95       	ror	r24
    1132:	77 95       	ror	r23
    1134:	67 95       	ror	r22
    1136:	b7 95       	ror	r27
    1138:	f1 11       	cpse	r31, r1
    113a:	f8 cf       	rjmp	.-16     	; 0x112c <__floatsisf+0x1c>
    113c:	fa f4       	brpl	.+62     	; 0x117c <__floatsisf+0x6c>
    113e:	bb 0f       	add	r27, r27
    1140:	11 f4       	brne	.+4      	; 0x1146 <__floatsisf+0x36>
    1142:	60 ff       	sbrs	r22, 0
    1144:	1b c0       	rjmp	.+54     	; 0x117c <__floatsisf+0x6c>
    1146:	6f 5f       	subi	r22, 0xFF	; 255
    1148:	7f 4f       	sbci	r23, 0xFF	; 255
    114a:	8f 4f       	sbci	r24, 0xFF	; 255
    114c:	9f 4f       	sbci	r25, 0xFF	; 255
    114e:	16 c0       	rjmp	.+44     	; 0x117c <__floatsisf+0x6c>
    1150:	88 23       	and	r24, r24
    1152:	11 f0       	breq	.+4      	; 0x1158 <__floatsisf+0x48>
    1154:	96 e9       	ldi	r25, 0x96	; 150
    1156:	11 c0       	rjmp	.+34     	; 0x117a <__floatsisf+0x6a>
    1158:	77 23       	and	r23, r23
    115a:	21 f0       	breq	.+8      	; 0x1164 <__floatsisf+0x54>
    115c:	9e e8       	ldi	r25, 0x8E	; 142
    115e:	87 2f       	mov	r24, r23
    1160:	76 2f       	mov	r23, r22
    1162:	05 c0       	rjmp	.+10     	; 0x116e <__floatsisf+0x5e>
    1164:	66 23       	and	r22, r22
    1166:	71 f0       	breq	.+28     	; 0x1184 <__floatsisf+0x74>
    1168:	96 e8       	ldi	r25, 0x86	; 134
    116a:	86 2f       	mov	r24, r22
    116c:	70 e0       	ldi	r23, 0x00	; 0
    116e:	60 e0       	ldi	r22, 0x00	; 0
    1170:	2a f0       	brmi	.+10     	; 0x117c <__floatsisf+0x6c>
    1172:	9a 95       	dec	r25
    1174:	66 0f       	add	r22, r22
    1176:	77 1f       	adc	r23, r23
    1178:	88 1f       	adc	r24, r24
    117a:	da f7       	brpl	.-10     	; 0x1172 <__floatsisf+0x62>
    117c:	88 0f       	add	r24, r24
    117e:	96 95       	lsr	r25
    1180:	87 95       	ror	r24
    1182:	97 f9       	bld	r25, 7
    1184:	08 95       	ret

00001186 <__fp_cmp>:
    1186:	99 0f       	add	r25, r25
    1188:	00 08       	sbc	r0, r0
    118a:	55 0f       	add	r21, r21
    118c:	aa 0b       	sbc	r26, r26
    118e:	e0 e8       	ldi	r30, 0x80	; 128
    1190:	fe ef       	ldi	r31, 0xFE	; 254
    1192:	16 16       	cp	r1, r22
    1194:	17 06       	cpc	r1, r23
    1196:	e8 07       	cpc	r30, r24
    1198:	f9 07       	cpc	r31, r25
    119a:	c0 f0       	brcs	.+48     	; 0x11cc <__fp_cmp+0x46>
    119c:	12 16       	cp	r1, r18
    119e:	13 06       	cpc	r1, r19
    11a0:	e4 07       	cpc	r30, r20
    11a2:	f5 07       	cpc	r31, r21
    11a4:	98 f0       	brcs	.+38     	; 0x11cc <__fp_cmp+0x46>
    11a6:	62 1b       	sub	r22, r18
    11a8:	73 0b       	sbc	r23, r19
    11aa:	84 0b       	sbc	r24, r20
    11ac:	95 0b       	sbc	r25, r21
    11ae:	39 f4       	brne	.+14     	; 0x11be <__fp_cmp+0x38>
    11b0:	0a 26       	eor	r0, r26
    11b2:	61 f0       	breq	.+24     	; 0x11cc <__fp_cmp+0x46>
    11b4:	23 2b       	or	r18, r19
    11b6:	24 2b       	or	r18, r20
    11b8:	25 2b       	or	r18, r21
    11ba:	21 f4       	brne	.+8      	; 0x11c4 <__fp_cmp+0x3e>
    11bc:	08 95       	ret
    11be:	0a 26       	eor	r0, r26
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <__fp_cmp+0x3e>
    11c2:	a1 40       	sbci	r26, 0x01	; 1
    11c4:	a6 95       	lsr	r26
    11c6:	8f ef       	ldi	r24, 0xFF	; 255
    11c8:	81 1d       	adc	r24, r1
    11ca:	81 1d       	adc	r24, r1
    11cc:	08 95       	ret

000011ce <__fp_inf>:
    11ce:	97 f9       	bld	r25, 7
    11d0:	9f 67       	ori	r25, 0x7F	; 127
    11d2:	80 e8       	ldi	r24, 0x80	; 128
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	08 95       	ret

000011da <__fp_nan>:
    11da:	9f ef       	ldi	r25, 0xFF	; 255
    11dc:	80 ec       	ldi	r24, 0xC0	; 192
    11de:	08 95       	ret

000011e0 <__fp_pscA>:
    11e0:	00 24       	eor	r0, r0
    11e2:	0a 94       	dec	r0
    11e4:	16 16       	cp	r1, r22
    11e6:	17 06       	cpc	r1, r23
    11e8:	18 06       	cpc	r1, r24
    11ea:	09 06       	cpc	r0, r25
    11ec:	08 95       	ret

000011ee <__fp_pscB>:
    11ee:	00 24       	eor	r0, r0
    11f0:	0a 94       	dec	r0
    11f2:	12 16       	cp	r1, r18
    11f4:	13 06       	cpc	r1, r19
    11f6:	14 06       	cpc	r1, r20
    11f8:	05 06       	cpc	r0, r21
    11fa:	08 95       	ret

000011fc <__fp_round>:
    11fc:	09 2e       	mov	r0, r25
    11fe:	03 94       	inc	r0
    1200:	00 0c       	add	r0, r0
    1202:	11 f4       	brne	.+4      	; 0x1208 <__fp_round+0xc>
    1204:	88 23       	and	r24, r24
    1206:	52 f0       	brmi	.+20     	; 0x121c <__fp_round+0x20>
    1208:	bb 0f       	add	r27, r27
    120a:	40 f4       	brcc	.+16     	; 0x121c <__fp_round+0x20>
    120c:	bf 2b       	or	r27, r31
    120e:	11 f4       	brne	.+4      	; 0x1214 <__fp_round+0x18>
    1210:	60 ff       	sbrs	r22, 0
    1212:	04 c0       	rjmp	.+8      	; 0x121c <__fp_round+0x20>
    1214:	6f 5f       	subi	r22, 0xFF	; 255
    1216:	7f 4f       	sbci	r23, 0xFF	; 255
    1218:	8f 4f       	sbci	r24, 0xFF	; 255
    121a:	9f 4f       	sbci	r25, 0xFF	; 255
    121c:	08 95       	ret

0000121e <__fp_split3>:
    121e:	57 fd       	sbrc	r21, 7
    1220:	90 58       	subi	r25, 0x80	; 128
    1222:	44 0f       	add	r20, r20
    1224:	55 1f       	adc	r21, r21
    1226:	59 f0       	breq	.+22     	; 0x123e <__fp_splitA+0x10>
    1228:	5f 3f       	cpi	r21, 0xFF	; 255
    122a:	71 f0       	breq	.+28     	; 0x1248 <__fp_splitA+0x1a>
    122c:	47 95       	ror	r20

0000122e <__fp_splitA>:
    122e:	88 0f       	add	r24, r24
    1230:	97 fb       	bst	r25, 7
    1232:	99 1f       	adc	r25, r25
    1234:	61 f0       	breq	.+24     	; 0x124e <__fp_splitA+0x20>
    1236:	9f 3f       	cpi	r25, 0xFF	; 255
    1238:	79 f0       	breq	.+30     	; 0x1258 <__fp_splitA+0x2a>
    123a:	87 95       	ror	r24
    123c:	08 95       	ret
    123e:	12 16       	cp	r1, r18
    1240:	13 06       	cpc	r1, r19
    1242:	14 06       	cpc	r1, r20
    1244:	55 1f       	adc	r21, r21
    1246:	f2 cf       	rjmp	.-28     	; 0x122c <__fp_split3+0xe>
    1248:	46 95       	lsr	r20
    124a:	f1 df       	rcall	.-30     	; 0x122e <__fp_splitA>
    124c:	08 c0       	rjmp	.+16     	; 0x125e <__fp_splitA+0x30>
    124e:	16 16       	cp	r1, r22
    1250:	17 06       	cpc	r1, r23
    1252:	18 06       	cpc	r1, r24
    1254:	99 1f       	adc	r25, r25
    1256:	f1 cf       	rjmp	.-30     	; 0x123a <__fp_splitA+0xc>
    1258:	86 95       	lsr	r24
    125a:	71 05       	cpc	r23, r1
    125c:	61 05       	cpc	r22, r1
    125e:	08 94       	sec
    1260:	08 95       	ret

00001262 <__fp_zero>:
    1262:	e8 94       	clt

00001264 <__fp_szero>:
    1264:	bb 27       	eor	r27, r27
    1266:	66 27       	eor	r22, r22
    1268:	77 27       	eor	r23, r23
    126a:	cb 01       	movw	r24, r22
    126c:	97 f9       	bld	r25, 7
    126e:	08 95       	ret

00001270 <__gesf2>:
    1270:	8a df       	rcall	.-236    	; 0x1186 <__fp_cmp>
    1272:	08 f4       	brcc	.+2      	; 0x1276 <__gesf2+0x6>
    1274:	8f ef       	ldi	r24, 0xFF	; 255
    1276:	08 95       	ret

00001278 <__mulsf3>:
    1278:	0b d0       	rcall	.+22     	; 0x1290 <__mulsf3x>
    127a:	c0 cf       	rjmp	.-128    	; 0x11fc <__fp_round>
    127c:	b1 df       	rcall	.-158    	; 0x11e0 <__fp_pscA>
    127e:	28 f0       	brcs	.+10     	; 0x128a <__mulsf3+0x12>
    1280:	b6 df       	rcall	.-148    	; 0x11ee <__fp_pscB>
    1282:	18 f0       	brcs	.+6      	; 0x128a <__mulsf3+0x12>
    1284:	95 23       	and	r25, r21
    1286:	09 f0       	breq	.+2      	; 0x128a <__mulsf3+0x12>
    1288:	a2 cf       	rjmp	.-188    	; 0x11ce <__fp_inf>
    128a:	a7 cf       	rjmp	.-178    	; 0x11da <__fp_nan>
    128c:	11 24       	eor	r1, r1
    128e:	ea cf       	rjmp	.-44     	; 0x1264 <__fp_szero>

00001290 <__mulsf3x>:
    1290:	c6 df       	rcall	.-116    	; 0x121e <__fp_split3>
    1292:	a0 f3       	brcs	.-24     	; 0x127c <__mulsf3+0x4>

00001294 <__mulsf3_pse>:
    1294:	95 9f       	mul	r25, r21
    1296:	d1 f3       	breq	.-12     	; 0x128c <__mulsf3+0x14>
    1298:	95 0f       	add	r25, r21
    129a:	50 e0       	ldi	r21, 0x00	; 0
    129c:	55 1f       	adc	r21, r21
    129e:	62 9f       	mul	r22, r18
    12a0:	f0 01       	movw	r30, r0
    12a2:	72 9f       	mul	r23, r18
    12a4:	bb 27       	eor	r27, r27
    12a6:	f0 0d       	add	r31, r0
    12a8:	b1 1d       	adc	r27, r1
    12aa:	63 9f       	mul	r22, r19
    12ac:	aa 27       	eor	r26, r26
    12ae:	f0 0d       	add	r31, r0
    12b0:	b1 1d       	adc	r27, r1
    12b2:	aa 1f       	adc	r26, r26
    12b4:	64 9f       	mul	r22, r20
    12b6:	66 27       	eor	r22, r22
    12b8:	b0 0d       	add	r27, r0
    12ba:	a1 1d       	adc	r26, r1
    12bc:	66 1f       	adc	r22, r22
    12be:	82 9f       	mul	r24, r18
    12c0:	22 27       	eor	r18, r18
    12c2:	b0 0d       	add	r27, r0
    12c4:	a1 1d       	adc	r26, r1
    12c6:	62 1f       	adc	r22, r18
    12c8:	73 9f       	mul	r23, r19
    12ca:	b0 0d       	add	r27, r0
    12cc:	a1 1d       	adc	r26, r1
    12ce:	62 1f       	adc	r22, r18
    12d0:	83 9f       	mul	r24, r19
    12d2:	a0 0d       	add	r26, r0
    12d4:	61 1d       	adc	r22, r1
    12d6:	22 1f       	adc	r18, r18
    12d8:	74 9f       	mul	r23, r20
    12da:	33 27       	eor	r19, r19
    12dc:	a0 0d       	add	r26, r0
    12de:	61 1d       	adc	r22, r1
    12e0:	23 1f       	adc	r18, r19
    12e2:	84 9f       	mul	r24, r20
    12e4:	60 0d       	add	r22, r0
    12e6:	21 1d       	adc	r18, r1
    12e8:	82 2f       	mov	r24, r18
    12ea:	76 2f       	mov	r23, r22
    12ec:	6a 2f       	mov	r22, r26
    12ee:	11 24       	eor	r1, r1
    12f0:	9f 57       	subi	r25, 0x7F	; 127
    12f2:	50 40       	sbci	r21, 0x00	; 0
    12f4:	8a f0       	brmi	.+34     	; 0x1318 <__mulsf3_pse+0x84>
    12f6:	e1 f0       	breq	.+56     	; 0x1330 <__mulsf3_pse+0x9c>
    12f8:	88 23       	and	r24, r24
    12fa:	4a f0       	brmi	.+18     	; 0x130e <__mulsf3_pse+0x7a>
    12fc:	ee 0f       	add	r30, r30
    12fe:	ff 1f       	adc	r31, r31
    1300:	bb 1f       	adc	r27, r27
    1302:	66 1f       	adc	r22, r22
    1304:	77 1f       	adc	r23, r23
    1306:	88 1f       	adc	r24, r24
    1308:	91 50       	subi	r25, 0x01	; 1
    130a:	50 40       	sbci	r21, 0x00	; 0
    130c:	a9 f7       	brne	.-22     	; 0x12f8 <__mulsf3_pse+0x64>
    130e:	9e 3f       	cpi	r25, 0xFE	; 254
    1310:	51 05       	cpc	r21, r1
    1312:	70 f0       	brcs	.+28     	; 0x1330 <__mulsf3_pse+0x9c>
    1314:	5c cf       	rjmp	.-328    	; 0x11ce <__fp_inf>
    1316:	a6 cf       	rjmp	.-180    	; 0x1264 <__fp_szero>
    1318:	5f 3f       	cpi	r21, 0xFF	; 255
    131a:	ec f3       	brlt	.-6      	; 0x1316 <__mulsf3_pse+0x82>
    131c:	98 3e       	cpi	r25, 0xE8	; 232
    131e:	dc f3       	brlt	.-10     	; 0x1316 <__mulsf3_pse+0x82>
    1320:	86 95       	lsr	r24
    1322:	77 95       	ror	r23
    1324:	67 95       	ror	r22
    1326:	b7 95       	ror	r27
    1328:	f7 95       	ror	r31
    132a:	e7 95       	ror	r30
    132c:	9f 5f       	subi	r25, 0xFF	; 255
    132e:	c1 f7       	brne	.-16     	; 0x1320 <__mulsf3_pse+0x8c>
    1330:	fe 2b       	or	r31, r30
    1332:	88 0f       	add	r24, r24
    1334:	91 1d       	adc	r25, r1
    1336:	96 95       	lsr	r25
    1338:	87 95       	ror	r24
    133a:	97 f9       	bld	r25, 7
    133c:	08 95       	ret

0000133e <_exit>:
    133e:	f8 94       	cli

00001340 <__stop_program>:
    1340:	ff cf       	rjmp	.-2      	; 0x1340 <__stop_program>
